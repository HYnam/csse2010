
Pong_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001296  0000132a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800120  00800120  0000134a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000134a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002478  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cb  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001570  00000000  00000000  00004bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  0000614c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bcc  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c6  00000000  00000000  00007458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00008b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_5>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_16>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_20>
      54:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      68:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      70:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      74:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      78:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2267>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2244>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 3c 59 4f 55 52 20 4e 41 4d 45 3e 20      by <YOUR NAME> 
      d4:	2d 20 3c 59 4f 55 52 20 53 54 55 44 45 4e 54 20     - <YOUR STUDENT 
      e4:	4e 55 4d 42 45 52 3e 00                             NUMBER>.

000000ec <__c.2242>:
      ec:	50 4f 4e 47 00                                      PONG.

000000f1 <__c.2058>:
      f1:	1b 5b 3f 32 35 68 00                                .[?25h.

000000f8 <__c.2040>:
      f8:	1b 5b 32 4a 00                                      .[2J.

000000fd <__c.2025>:
      fd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d8 e0       	ldi	r29, 0x08	; 8
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e6 e9       	ldi	r30, 0x96	; 150
     11a:	f2 e1       	ldi	r31, 0x12	; 18
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 32       	cpi	r26, 0x20	; 32
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	a0 e2       	ldi	r26, 0x20	; 32
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ab 34       	cpi	r26, 0x4B	; 75
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 bb 03 	call	0x776	; 0x776 <main>
     13c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     144:	e8 e6       	ldi	r30, 0x68	; 104
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	82 60       	ori	r24, 0x02	; 2
     14c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     14e:	8b b3       	in	r24, 0x1b	; 27
     150:	82 60       	ori	r24, 0x02	; 2
     152:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     154:	ec e6       	ldi	r30, 0x6C	; 108
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 60       	ori	r24, 0x0F	; 15
     15c:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     15e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     162:	08 95       	ret

00000164 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0) {
     164:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     168:	18 16       	cp	r1, r24
     16a:	14 f5       	brge	.+68     	; 0x1b0 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     16c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     170:	6f b7       	in	r22, 0x3f	; 63
		cli();
     172:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++) {
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	09 c0       	rjmp	.+18     	; 0x18a <button_pushed+0x26>
			button_queue[i - 1] = button_queue[i];
     178:	f9 01       	movw	r30, r18
     17a:	ef 5d       	subi	r30, 0xDF	; 223
     17c:	fe 4f       	sbci	r31, 0xFE	; 254
     17e:	40 81       	ld	r20, Z
     180:	f9 01       	movw	r30, r18
     182:	e0 5e       	subi	r30, 0xE0	; 224
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++) {
     188:	9f 5f       	subi	r25, 0xFF	; 255
     18a:	29 2f       	mov	r18, r25
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <__data_end>
     192:	04 2e       	mov	r0, r20
     194:	00 0c       	add	r0, r0
     196:	55 0b       	sbc	r21, r21
     198:	24 17       	cp	r18, r20
     19a:	35 07       	cpc	r19, r21
     19c:	6c f3       	brlt	.-38     	; 0x178 <button_pushed+0x14>
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     19e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     1a2:	91 50       	subi	r25, 0x01	; 1
     1a4:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
		
		if (interrupts_were_enabled) {
     1a8:	66 23       	and	r22, r22
     1aa:	1c f4       	brge	.+6      	; 0x1b2 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     1ac:	78 94       	sei
     1ae:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1b2:	08 95       	ret

000001b4 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	8f 93       	push	r24
     1c6:	9f 93       	push	r25
     1c8:	ef 93       	push	r30
     1ca:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1cc:	43 b1       	in	r20, 0x03	; 3
     1ce:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	26 c0       	rjmp	.+76     	; 0x220 <__vector_5+0x6c>
		if (queue_length < BUTTON_QUEUE_SIZE
     1d4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     1d8:	94 30       	cpi	r25, 0x04	; 4
     1da:	0c f5       	brge	.+66     	; 0x21e <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     1dc:	24 2f       	mov	r18, r20
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	08 2e       	mov	r0, r24
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__vector_5+0x34>
     1e4:	35 95       	asr	r19
     1e6:	27 95       	ror	r18
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <__vector_5+0x30>
     1ec:	20 ff       	sbrs	r18, 0
     1ee:	17 c0       	rjmp	.+46     	; 0x21e <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin))) {
     1f0:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <last_button_state>
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	08 2e       	mov	r0, r24
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__vector_5+0x4a>
     1fa:	35 95       	asr	r19
     1fc:	27 95       	ror	r18
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <__vector_5+0x46>
     202:	20 fd       	sbrc	r18, 0
     204:	0c c0       	rjmp	.+24     	; 0x21e <__vector_5+0x6a>
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     206:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	9e 0f       	add	r25, r30
     20e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
     212:	0e 2e       	mov	r0, r30
     214:	00 0c       	add	r0, r0
     216:	ff 0b       	sbc	r31, r31
     218:	ef 5d       	subi	r30, 0xDF	; 223
     21a:	fe 4f       	sbci	r31, 0xFE	; 254
     21c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     21e:	8f 5f       	subi	r24, 0xFF	; 255
     220:	84 30       	cpi	r24, 0x04	; 4
     222:	c0 f2       	brcs	.-80     	; 0x1d4 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     224:	40 93 25 01 	sts	0x0125, r20	; 0x800125 <last_button_state>
}
     228:	ff 91       	pop	r31
     22a:	ef 91       	pop	r30
     22c:	9f 91       	pop	r25
     22e:	8f 91       	pop	r24
     230:	4f 91       	pop	r20
     232:	3f 91       	pop	r19
     234:	2f 91       	pop	r18
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <initialise_display>:
    0b0111001111101111, // 9
};

// Initialise the display for the board, this creates the display
// for an empty board.
void initialise_display(void) {
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	28 97       	sbiw	r28, 0x08	; 8
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     258:	0e 94 de 02 	call	0x5bc	; 0x5bc <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	09 c0       	rjmp	.+18     	; 0x274 <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BORDER;
     262:	e1 e0       	ldi	r30, 0x01	; 1
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ec 0f       	add	r30, r28
     268:	fd 1f       	adc	r31, r29
     26a:	e8 0f       	add	r30, r24
     26c:	f9 1f       	adc	r31, r25
     26e:	25 e3       	ldi	r18, 0x35	; 53
     270:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	88 30       	cpi	r24, 0x08	; 8
     276:	91 05       	cpc	r25, r1
     278:	a4 f3       	brlt	.-24     	; 0x262 <initialise_display+0x22>
     27a:	01 e0       	ldi	r16, 0x01	; 1
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	08 c0       	rjmp	.+16     	; 0x290 <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     280:	be 01       	movw	r22, r28
     282:	6f 5f       	subi	r22, 0xFF	; 255
     284:	7f 4f       	sbci	r23, 0xFF	; 255
     286:	80 2f       	mov	r24, r16
     288:	0e 94 c1 02 	call	0x582	; 0x582 <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
     28c:	0f 5f       	subi	r16, 0xFF	; 255
     28e:	1f 4f       	sbci	r17, 0xFF	; 255
     290:	02 30       	cpi	r16, 0x02	; 2
     292:	11 05       	cpc	r17, r1
     294:	ac f3       	brlt	.-22     	; 0x280 <initialise_display+0x40>
     296:	0e e0       	ldi	r16, 0x0E	; 14
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	08 c0       	rjmp	.+16     	; 0x2ac <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     29c:	be 01       	movw	r22, r28
     29e:	6f 5f       	subi	r22, 0xFF	; 255
     2a0:	7f 4f       	sbci	r23, 0xFF	; 255
     2a2:	80 2f       	mov	r24, r16
     2a4:	0e 94 c1 02 	call	0x582	; 0x582 <ledmatrix_update_column>
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
     2a8:	0f 5f       	subi	r16, 0xFF	; 255
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	0f 30       	cpi	r16, 0x0F	; 15
     2ae:	11 05       	cpc	r17, r1
     2b0:	ac f3       	brlt	.-22     	; 0x29c <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
}
     2b2:	28 96       	adiw	r28, 0x08	; 8
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	08 95       	ret

000002c8 <show_start_screen>:

void show_start_screen(void) {
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	28 97       	sbiw	r28, 0x08	; 8
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     2de:	0e 94 de 02 	call	0x5bc	; 0x5bc <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	29 c0       	rjmp	.+82     	; 0x338 <show_start_screen+0x70>
		col_data = pong_display[col];
     2e6:	e1 2f       	mov	r30, r17
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	e2 5f       	subi	r30, 0xF2	; 242
     2ec:	fe 4f       	sbci	r31, 0xFE	; 254
     2ee:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     2f0:	90 ff       	sbrs	r25, 0
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <show_start_screen+0x30>
			colour = COLOUR_RED;
     2f4:	2f e0       	ldi	r18, 0x0F	; 15
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <show_start_screen+0x32>
		} else {
			colour = COLOUR_GREEN;
     2f8:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     2fa:	87 e0       	ldi	r24, 0x07	; 7
     2fc:	13 c0       	rjmp	.+38     	; 0x324 <show_start_screen+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     2fe:	99 23       	and	r25, r25
     300:	44 f4       	brge	.+16     	; 0x312 <show_start_screen+0x4a>
				column_colour_data[i] = colour;
     302:	e1 e0       	ldi	r30, 0x01	; 1
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	ec 0f       	add	r30, r28
     308:	fd 1f       	adc	r31, r29
     30a:	e8 0f       	add	r30, r24
     30c:	f1 1d       	adc	r31, r1
     30e:	20 83       	st	Z, r18
     310:	07 c0       	rjmp	.+14     	; 0x320 <show_start_screen+0x58>
			} else {
				column_colour_data[i] = 0;
     312:	e1 e0       	ldi	r30, 0x01	; 1
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ec 0f       	add	r30, r28
     318:	fd 1f       	adc	r31, r29
     31a:	e8 0f       	add	r30, r24
     31c:	f1 1d       	adc	r31, r1
     31e:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     320:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     322:	81 50       	subi	r24, 0x01	; 1
     324:	81 11       	cpse	r24, r1
     326:	eb cf       	rjmp	.-42     	; 0x2fe <show_start_screen+0x36>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     328:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	81 2f       	mov	r24, r17
     332:	0e 94 c1 02 	call	0x582	; 0x582 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     336:	1f 5f       	subi	r17, 0xFF	; 255
     338:	10 31       	cpi	r17, 0x10	; 16
     33a:	a8 f2       	brcs	.-86     	; 0x2e6 <show_start_screen+0x1e>
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
		// Update pong ball colour
	ledmatrix_update_pixel(START_SCREEN_BALL_X, START_SCREEN_BALL_Y, MATRIX_COLOUR_BALL);
     33c:	4f e0       	ldi	r20, 0x0F	; 15
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	8e e0       	ldi	r24, 0x0E	; 14
     342:	0e 94 a2 02 	call	0x544	; 0x544 <ledmatrix_update_pixel>
}
     346:	28 96       	adiw	r28, 0x08	; 8
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	08 95       	ret

0000035a <update_start_screen>:

// Update dynamic start screen based on the frame number (0-11)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number) {
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	68 97       	sbiw	r28, 0x18	; 24
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
	
	if (frame_number < 0 || frame_number > 11) {
     370:	8c 30       	cpi	r24, 0x0C	; 12
     372:	08 f0       	brcs	.+2      	; 0x376 <update_start_screen+0x1c>
     374:	64 c0       	rjmp	.+200    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	17 c0       	rjmp	.+46     	; 0x3a8 <update_start_screen+0x4e>
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
			column_colour_data[col][row] = 0;
     37a:	e2 2f       	mov	r30, r18
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	4c 0f       	add	r20, r28
     390:	5d 1f       	adc	r21, r29
     392:	e4 0f       	add	r30, r20
     394:	f5 1f       	adc	r31, r21
     396:	e9 0f       	add	r30, r25
     398:	f1 1d       	adc	r31, r1
     39a:	10 82       	st	Z, r1
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
     39c:	9f 5f       	subi	r25, 0xFF	; 255
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <update_start_screen+0x48>
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	98 30       	cpi	r25, 0x08	; 8
     3a4:	50 f3       	brcs	.-44     	; 0x37a <update_start_screen+0x20>
		return;
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	23 30       	cpi	r18, 0x03	; 3
     3aa:	d0 f3       	brcs	.-12     	; 0x3a0 <update_start_screen+0x46>
			column_colour_data[col][row] = 0;
		}
	}
	
	// Set the middle paddle pixel
	column_colour_data[1][6] = MATRIX_COLOUR_PLAYER;
     3ac:	90 ef       	ldi	r25, 0xF0	; 240
     3ae:	9f 87       	std	Y+15, r25	; 0x0f
	column_colour_data[1][1] = MATRIX_COLOUR_PLAYER;
     3b0:	9a 87       	std	Y+10, r25	; 0x0a
	
	// Set the edge paddle pixel depending on frame number
	if (frame_number < 3 || frame_number >= 9) {
     3b2:	9d ef       	ldi	r25, 0xFD	; 253
     3b4:	98 0f       	add	r25, r24
     3b6:	96 30       	cpi	r25, 0x06	; 6
     3b8:	18 f0       	brcs	.+6      	; 0x3c0 <update_start_screen+0x66>
		column_colour_data[2][6] = MATRIX_COLOUR_PLAYER;
     3ba:	90 ef       	ldi	r25, 0xF0	; 240
     3bc:	9f 8b       	std	Y+23, r25	; 0x17
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <update_start_screen+0x6a>
	} else {
		column_colour_data[0][6] = MATRIX_COLOUR_PLAYER;
     3c0:	90 ef       	ldi	r25, 0xF0	; 240
     3c2:	9f 83       	std	Y+7, r25	; 0x07
	}
	if (frame_number < 6) {
     3c4:	86 30       	cpi	r24, 0x06	; 6
     3c6:	18 f4       	brcc	.+6      	; 0x3ce <update_start_screen+0x74>
		column_colour_data[0][1] = MATRIX_COLOUR_PLAYER;
     3c8:	90 ef       	ldi	r25, 0xF0	; 240
     3ca:	9a 83       	std	Y+2, r25	; 0x02
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <update_start_screen+0x78>
	} else {
		column_colour_data[2][1] = MATRIX_COLOUR_PLAYER;
     3ce:	90 ef       	ldi	r25, 0xF0	; 240
     3d0:	9a 8b       	std	Y+18, r25	; 0x12
	}
	
	// Set the ball pixel depending on frame number
	if (frame_number == 5 || frame_number == 11) {
     3d2:	85 30       	cpi	r24, 0x05	; 5
     3d4:	11 f0       	breq	.+4      	; 0x3da <update_start_screen+0x80>
     3d6:	8b 30       	cpi	r24, 0x0B	; 11
     3d8:	19 f4       	brne	.+6      	; 0x3e0 <update_start_screen+0x86>
		column_colour_data[1][5] = MATRIX_COLOUR_BALL;
     3da:	8f e0       	ldi	r24, 0x0F	; 15
     3dc:	8e 87       	std	Y+14, r24	; 0x0e
     3de:	15 c0       	rjmp	.+42     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	} else if (frame_number == 0 || frame_number == 4 || frame_number == 6
     3e0:	88 23       	and	r24, r24
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <update_start_screen+0x96>
     3e4:	84 30       	cpi	r24, 0x04	; 4
     3e6:	21 f0       	breq	.+8      	; 0x3f0 <update_start_screen+0x96>
     3e8:	86 30       	cpi	r24, 0x06	; 6
     3ea:	11 f0       	breq	.+4      	; 0x3f0 <update_start_screen+0x96>
			|| frame_number == 10) {
     3ec:	8a 30       	cpi	r24, 0x0A	; 10
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <update_start_screen+0x9c>
		column_colour_data[1][4] = MATRIX_COLOUR_BALL;
     3f0:	8f e0       	ldi	r24, 0x0F	; 15
     3f2:	8d 87       	std	Y+13, r24	; 0x0d
     3f4:	0a c0       	rjmp	.+20     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	} else if (frame_number == 1 || frame_number == 3 || frame_number == 7
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	31 f0       	breq	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3fa:	83 30       	cpi	r24, 0x03	; 3
     3fc:	21 f0       	breq	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3fe:	87 30       	cpi	r24, 0x07	; 7
     400:	11 f0       	breq	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			|| frame_number == 9) {
     402:	89 30       	cpi	r24, 0x09	; 9
     404:	21 f4       	brne	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		column_colour_data[1][3] = MATRIX_COLOUR_BALL;
     406:	8f e0       	ldi	r24, 0x0F	; 15
     408:	8c 87       	std	Y+12, r24	; 0x0c
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	16 c0       	rjmp	.+44     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	8b 87       	std	Y+11, r24	; 0x0b
     412:	fb cf       	rjmp	.-10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
     414:	61 2f       	mov	r22, r17
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	66 0f       	add	r22, r22
     41a:	77 1f       	adc	r23, r23
     41c:	66 0f       	add	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	66 0f       	add	r22, r22
     422:	77 1f       	adc	r23, r23
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	8c 0f       	add	r24, r28
     42a:	9d 1f       	adc	r25, r29
     42c:	68 0f       	add	r22, r24
     42e:	79 1f       	adc	r23, r25
     430:	8d e0       	ldi	r24, 0x0D	; 13
     432:	81 0f       	add	r24, r17
     434:	0e 94 c1 02 	call	0x582	; 0x582 <ledmatrix_update_column>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     438:	1f 5f       	subi	r17, 0xFF	; 255
     43a:	13 30       	cpi	r17, 0x03	; 3
     43c:	58 f3       	brcs	.-42     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
	}
}
     43e:	68 96       	adiw	r28, 0x18	; 24
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <update_square_colour>:
// provided object
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	
	switch (object) {
     452:	41 30       	cpi	r20, 0x01	; 1
     454:	31 f0       	breq	.+12     	; 0x462 <update_square_colour+0x10>
     456:	42 30       	cpi	r20, 0x02	; 2
     458:	11 f0       	breq	.+4      	; 0x45e <update_square_colour+0xc>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	03 c0       	rjmp	.+6      	; 0x464 <update_square_colour+0x12>
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
			break;
		case BALL:
			colour = MATRIX_COLOUR_BALL;
     45e:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     460:	01 c0       	rjmp	.+2      	; 0x464 <update_square_colour+0x12>
	switch (object) {
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
     462:	40 ef       	ldi	r20, 0xF0	; 240
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y + MATRIX_Y_OFFSET, colour);
     464:	8e 5f       	subi	r24, 0xFE	; 254
     466:	0e 94 a2 02 	call	0x544	; 0x544 <ledmatrix_update_pixel>
     46a:	08 95       	ret

0000046c <draw_player_paddle>:
	int8_t player_y = player_y_coordinates[player_to_draw];

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
		update_square_colour(player_x, y, EMPTY_SQUARE);
	}
}
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	e2 5e       	subi	r30, 0xE2	; 226
     47c:	fe 4f       	sbci	r31, 0xFE	; 254
     47e:	f0 80       	ld	r15, Z
     480:	fc 01       	movw	r30, r24
     482:	ea 5d       	subi	r30, 0xDA	; 218
     484:	fe 4f       	sbci	r31, 0xFE	; 254
     486:	00 81       	ld	r16, Z
     488:	00 2e       	mov	r0, r16
     48a:	00 0c       	add	r0, r0
     48c:	11 0b       	sbc	r17, r17
     48e:	e8 01       	movw	r28, r16
     490:	06 c0       	rjmp	.+12     	; 0x49e <draw_player_paddle+0x32>
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	6c 2f       	mov	r22, r28
     496:	8f 2d       	mov	r24, r15
     498:	0e 94 29 02 	call	0x452	; 0x452 <update_square_colour>
     49c:	21 96       	adiw	r28, 0x01	; 1
     49e:	c8 01       	movw	r24, r16
     4a0:	02 96       	adiw	r24, 0x02	; 2
     4a2:	c8 17       	cp	r28, r24
     4a4:	d9 07       	cpc	r29, r25
     4a6:	ac f3       	brlt	.-22     	; 0x492 <draw_player_paddle+0x26>
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	08 95       	ret

000004b4 <initialise_game>:
     4b4:	0e 94 20 01 	call	0x240	; 0x240 <initialise_display>
     4b8:	e6 e2       	ldi	r30, 0x26	; 38
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	80 83       	st	Z, r24
     4c0:	81 83       	std	Z+1, r24	; 0x01
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 36 02 	call	0x46c	; 0x46c <draw_player_paddle>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0e 94 36 02 	call	0x46c	; 0x46c <draw_player_paddle>
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <ball_y>
     4d4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ball_x>
     4d8:	0e 94 29 02 	call	0x452	; 0x452 <update_square_colour>
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <ball_x>
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <ball_y>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <ball_x_direction>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ball_y_direction>
     4f4:	42 e0       	ldi	r20, 0x02	; 2
     4f6:	64 e0       	ldi	r22, 0x04	; 4
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	0e 94 29 02 	call	0x452	; 0x452 <update_square_colour>
     4fe:	08 95       	ret

00000500 <move_player_paddle>:

// Try and move the selected player's y coordinate by the amount specified.
// For example, to move player 1's paddle up one space, call the function
// as `move_player(PLAYER_1, 1)`. Use `-1` instead to move the paddle down. No
// pixels of the player paddles should be allowed to move off the display.
void move_player_paddle(int8_t player, int8_t direction) {
     500:	08 95       	ret

00000502 <update_ball_position>:
	// YOUR CODE HERE

}

// Update ball position based on current x direction and y direction of ball
void update_ball_position(void) {
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
	
	// Determine new ball coordinates
	int8_t new_ball_x = ball_x + ball_x_direction;
     506:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ball_x>
     50a:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <ball_x_direction>
     50e:	c8 0f       	add	r28, r24
	int8_t new_ball_y = ball_y + ball_y_direction;
     510:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <ball_y>
     514:	d0 91 2d 01 	lds	r29, 0x012D	; 0x80012d <ball_y_direction>
     518:	d6 0f       	add	r29, r22
	
	// Erase old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	0e 94 29 02 	call	0x452	; 0x452 <update_square_colour>
	
	// Assign new ball coordinates
	ball_x = new_ball_x;
     520:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <ball_x>
	ball_y = new_ball_y;
     524:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <ball_y>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
     528:	42 e0       	ldi	r20, 0x02	; 2
     52a:	6d 2f       	mov	r22, r29
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 29 02 	call	0x452	; 0x452 <update_square_colour>
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <is_game_over>:
// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void) {
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
}
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	08 95       	ret

0000053c <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     53c:	80 e8       	ldi	r24, 0x80	; 128
     53e:	0e 94 14 05 	call	0xa28	; 0xa28 <spi_setup_master>
     542:	08 95       	ret

00000544 <ledmatrix_update_pixel>:
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	80 31       	cpi	r24, 0x10	; 16
     54c:	b0 f4       	brcc	.+44     	; 0x57a <ledmatrix_update_pixel+0x36>
     54e:	68 30       	cpi	r22, 0x08	; 8
     550:	a0 f4       	brcc	.+40     	; 0x57a <ledmatrix_update_pixel+0x36>
     552:	14 2f       	mov	r17, r20
     554:	c6 2f       	mov	r28, r22
     556:	d8 2f       	mov	r29, r24
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     55e:	6c 2f       	mov	r22, r28
     560:	67 70       	andi	r22, 0x07	; 7
     562:	80 e1       	ldi	r24, 0x10	; 16
     564:	68 9f       	mul	r22, r24
     566:	90 01       	movw	r18, r0
     568:	11 24       	eor	r1, r1
     56a:	8d 2f       	mov	r24, r29
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	82 2b       	or	r24, r18
     570:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     574:	81 2f       	mov	r24, r17
     576:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	08 95       	ret

00000582 <ledmatrix_update_column>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	80 31       	cpi	r24, 0x10	; 16
     58a:	a0 f4       	brcc	.+40     	; 0x5b4 <ledmatrix_update_column+0x32>
     58c:	8b 01       	movw	r16, r22
     58e:	c8 2f       	mov	r28, r24
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     596:	8c 2f       	mov	r24, r28
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     59e:	c0 e0       	ldi	r28, 0x00	; 0
     5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <ledmatrix_update_column+0x2e>
     5a2:	f8 01       	movw	r30, r16
     5a4:	ec 0f       	add	r30, r28
     5a6:	f1 1d       	adc	r31, r1
     5a8:	80 81       	ld	r24, Z
     5aa:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     5ae:	cf 5f       	subi	r28, 0xFF	; 255
     5b0:	c8 30       	cpi	r28, 0x08	; 8
     5b2:	b8 f3       	brcs	.-18     	; 0x5a2 <ledmatrix_update_column+0x20>
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     5bc:	8f e0       	ldi	r24, 0x0F	; 15
     5be:	0e 94 40 05 	call	0xa80	; 0xa80 <spi_send_byte>
     5c2:	08 95       	ret

000005c4 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     5c4:	0e 94 9e 02 	call	0x53c	; 0x53c <ledmatrix_setup>
	init_button_interrupts();
     5c8:	0e 94 a2 00 	call	0x144	; 0x144 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	7b e4       	ldi	r23, 0x4B	; 75
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 2c 04 	call	0x858	; 0x858 <init_serial_stdio>
	
	init_timer0();
     5da:	0e 94 69 05 	call	0xad2	; 0xad2 <init_timer0>
	
	// Turn on global interrupts
	sei();
     5de:	78 94       	sei
     5e0:	08 95       	ret

000005e2 <start_screen>:
}

void start_screen(void) {
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	cf 93       	push	r28
	// Clear terminal screen and output a message
	clear_terminal();
     5f4:	0e 94 57 05 	call	0xaae	; 0xaae <clear_terminal>
	show_cursor();
     5f8:	0e 94 60 05 	call	0xac0	; 0xac0 <show_cursor>
	move_terminal_cursor(10,10);
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	8a e0       	ldi	r24, 0x0A	; 10
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 46 05 	call	0xa8c	; 0xa8c <move_terminal_cursor>
	printf_P(PSTR("PONG"));
     608:	8c ee       	ldi	r24, 0xEC	; 236
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
	move_terminal_cursor(10,12);
     614:	6c e0       	ldi	r22, 0x0C	; 12
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	8a e0       	ldi	r24, 0x0A	; 10
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 46 05 	call	0xa8c	; 0xa8c <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 A2 by <YOUR NAME> - <YOUR STUDENT NUMBER>"));
     620:	84 eb       	ldi	r24, 0xB4	; 180
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     62c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     630:	0e 94 7f 05 	call	0xafe	; 0xafe <get_current_time>
     634:	4b 01       	movw	r8, r22
     636:	5c 01       	movw	r10, r24
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
	
	uint8_t frame_number = 0;
     640:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     642:	0e 94 73 04 	call	0x8e6	; 0x8e6 <serial_input_available>
     646:	88 23       	and	r24, r24
     648:	39 f0       	breq	.+14     	; 0x658 <start_screen+0x76>
			serial_input = fgetc(stdin);
     64a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <__iob>
     64e:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__iob+0x1>
     652:	0e 94 1d 06 	call	0xc3a	; 0xc3a <fgetc>
     656:	01 c0       	rjmp	.+2      	; 0x65a <start_screen+0x78>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     658:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     65a:	83 37       	cpi	r24, 0x73	; 115
     65c:	19 f1       	breq	.+70     	; 0x6a4 <start_screen+0xc2>
     65e:	83 35       	cpi	r24, 0x53	; 83
     660:	09 f1       	breq	.+66     	; 0x6a4 <start_screen+0xc2>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     662:	0e 94 b2 00 	call	0x164	; 0x164 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     666:	8f 3f       	cpi	r24, 0xFF	; 255
     668:	e9 f4       	brne	.+58     	; 0x6a4 <start_screen+0xc2>
			break;
		}

		current_time = get_current_time();
     66a:	0e 94 7f 05 	call	0xafe	; 0xafe <get_current_time>
     66e:	6b 01       	movw	r12, r22
     670:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > 500) {
     672:	ab 01       	movw	r20, r22
     674:	bc 01       	movw	r22, r24
     676:	48 19       	sub	r20, r8
     678:	59 09       	sbc	r21, r9
     67a:	6a 09       	sbc	r22, r10
     67c:	7b 09       	sbc	r23, r11
     67e:	45 3f       	cpi	r20, 0xF5	; 245
     680:	51 40       	sbci	r21, 0x01	; 1
     682:	61 05       	cpc	r22, r1
     684:	71 05       	cpc	r23, r1
     686:	e8 f2       	brcs	.-70     	; 0x642 <start_screen+0x60>
			update_start_screen(frame_number);
     688:	8c 2f       	mov	r24, r28
     68a:	0e 94 ad 01 	call	0x35a	; 0x35a <update_start_screen>
			frame_number = (frame_number + 1) % 12;
     68e:	8c 2f       	mov	r24, r28
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	6c e0       	ldi	r22, 0x0C	; 12
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	0e 94 b4 05 	call	0xb68	; 0xb68 <__divmodhi4>
     69c:	c8 2f       	mov	r28, r24
			last_screen_update = current_time;
     69e:	46 01       	movw	r8, r12
     6a0:	57 01       	movw	r10, r14
     6a2:	cf cf       	rjmp	.-98     	; 0x642 <start_screen+0x60>
		}
	}
}
     6a4:	cf 91       	pop	r28
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	9f 90       	pop	r9
     6b4:	8f 90       	pop	r8
     6b6:	08 95       	ret

000006b8 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     6b8:	0e 94 57 05 	call	0xaae	; 0xaae <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     6bc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     6c0:	0e 94 b2 00 	call	0x164	; 0x164 <button_pushed>
	clear_serial_input_buffer();
     6c4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <clear_serial_input_buffer>
     6c8:	08 95       	ret

000006ca <play_game>:
}

void play_game(void) {
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
	
	uint32_t last_ball_move_time, current_time;
	uint8_t btn; // The button pushed
	
	last_ball_move_time = get_current_time();
     6da:	0e 94 7f 05 	call	0xafe	; 0xafe <get_current_time>
     6de:	4b 01       	movw	r8, r22
     6e0:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over()) {
     6e2:	1b c0       	rjmp	.+54     	; 0x71a <play_game+0x50>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     6e4:	0e 94 b2 00 	call	0x164	; 0x164 <button_pushed>
		
		if (btn == BUTTON3_PUSHED) {
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	21 f4       	brne	.+8      	; 0x6f4 <play_game+0x2a>
			// If button 3 is pushed, move player 1 one space up
			// YOU WILL NEED TO IMPLEMENT THIS FUNCTION
			move_player_paddle(PLAYER_1, UP);
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 80 02 	call	0x500	; 0x500 <move_player_paddle>
		}
		
		current_time = get_current_time();
     6f4:	0e 94 7f 05 	call	0xafe	; 0xafe <get_current_time>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
		if (current_time >= last_ball_move_time + 500) {
     6fc:	d5 01       	movw	r26, r10
     6fe:	c4 01       	movw	r24, r8
     700:	8c 50       	subi	r24, 0x0C	; 12
     702:	9e 4f       	sbci	r25, 0xFE	; 254
     704:	af 4f       	sbci	r26, 0xFF	; 255
     706:	bf 4f       	sbci	r27, 0xFF	; 255
     708:	c8 16       	cp	r12, r24
     70a:	d9 06       	cpc	r13, r25
     70c:	ea 06       	cpc	r14, r26
     70e:	fb 06       	cpc	r15, r27
     710:	20 f0       	brcs	.+8      	; 0x71a <play_game+0x50>
			// 500ms (0.5 second) has passed since the last time we move the
			// ball, so update the position of the ball based on current x
			// direction and y direction
			update_ball_position();
     712:	0e 94 81 02 	call	0x502	; 0x502 <update_ball_position>
			
			// Update the most recent time the ball was moved
			last_ball_move_time = current_time;
     716:	46 01       	movw	r8, r12
     718:	57 01       	movw	r10, r14
	uint8_t btn; // The button pushed
	
	last_ball_move_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over()) {
     71a:	0e 94 9c 02 	call	0x538	; 0x538 <is_game_over>
     71e:	88 23       	and	r24, r24
     720:	09 f3       	breq	.-62     	; 0x6e4 <play_game+0x1a>
			// Update the most recent time the ball was moved
			last_ball_move_time = current_time;
		}
	}
	// We get here if the game is over.
}
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	08 95       	ret

00000734 <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
     734:	6e e0       	ldi	r22, 0x0E	; 14
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	8a e0       	ldi	r24, 0x0A	; 10
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 46 05 	call	0xa8c	; 0xa8c <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     740:	8a ea       	ldi	r24, 0xAA	; 170
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	9f 93       	push	r25
     746:	8f 93       	push	r24
     748:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
	move_terminal_cursor(10,15);
     74c:	6f e0       	ldi	r22, 0x0F	; 15
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 46 05 	call	0xa8c	; 0xa8c <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     758:	8c e7       	ldi	r24, 0x7C	; 124
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED) {
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0e 94 b2 00 	call	0x164	; 0x164 <button_pushed>
     770:	8f 3f       	cpi	r24, 0xFF	; 255
     772:	e1 f3       	breq	.-8      	; 0x76c <handle_game_over+0x38>
		; // wait
	}
}
     774:	08 95       	ret

00000776 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     776:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     77a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
     77e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <new_game>
		play_game();
     782:	0e 94 65 03 	call	0x6ca	; 0x6ca <play_game>
		handle_game_over();
     786:	0e 94 9a 03 	call	0x734	; 0x734 <handle_game_over>
     78a:	f9 cf       	rjmp	.-14     	; 0x77e <main+0x8>

0000078c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     78c:	cf 93       	push	r28
     78e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n') {
     790:	8a 30       	cpi	r24, 0x0A	; 10
     792:	19 f4       	brne	.+6      	; 0x79a <uart_put_char+0xe>
		uart_put_char('\r', stream);
     794:	8d e0       	ldi	r24, 0x0D	; 13
     796:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     79a:	9f b7       	in	r25, 0x3f	; 63
     79c:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <uart_put_char+0x18>
		if (!interrupts_enabled) {
     7a0:	99 23       	and	r25, r25
     7a2:	29 f1       	breq	.+74     	; 0x7ee <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     7a4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     7a8:	8f 3f       	cpi	r24, 0xFF	; 255
     7aa:	d1 f3       	breq	.-12     	; 0x7a0 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     7ac:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     7ae:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	8e 0f       	add	r24, r30
     7b6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <out_insert_pos>
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	ed 5c       	subi	r30, 0xCD	; 205
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     7c2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE) {
     7cc:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <out_insert_pos>
     7d0:	8f 3f       	cpi	r24, 0xFF	; 255
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     7d4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     7d8:	e1 ec       	ldi	r30, 0xC1	; 193
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	80 62       	ori	r24, 0x20	; 32
     7e0:	80 83       	st	Z, r24
	if (interrupts_enabled) {
     7e2:	99 23       	and	r25, r25
     7e4:	39 f0       	breq	.+14     	; 0x7f4 <uart_put_char+0x68>
		sei();
     7e6:	78 94       	sei
	}
	return 0;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if (!interrupts_enabled) {
			return 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled) {
		sei();
	}
	return 0;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
}
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0) {
     7fc:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     800:	88 23       	and	r24, r24
     802:	e1 f3       	breq	.-8      	; 0x7fc <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     804:	2f b7       	in	r18, 0x3f	; 63
     806:	20 78       	andi	r18, 0x80	; 128
	cli();
     808:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0) {
     80a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <input_insert_pos>
     80e:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <bytes_in_input_buffer>
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	83 1b       	sub	r24, r19
     816:	91 09       	sbc	r25, r1
     818:	5a f4       	brpl	.+22     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     81a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     81e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	e8 1b       	sub	r30, r24
     826:	f1 09       	sbc	r31, r1
     828:	ed 5b       	subi	r30, 0xBD	; 189
     82a:	fd 4f       	sbci	r31, 0xFD	; 253
     82c:	80 81       	ld	r24, Z
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     830:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     834:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	e8 1b       	sub	r30, r24
     83c:	f1 09       	sbc	r31, r1
     83e:	ed 5c       	subi	r30, 0xCD	; 205
     840:	fd 4f       	sbci	r31, 0xFD	; 253
     842:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     844:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <bytes_in_input_buffer>
     848:	91 50       	subi	r25, 0x01	; 1
     84a:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <bytes_in_input_buffer>
	if (interrupts_enabled) {
     84e:	22 23       	and	r18, r18
     850:	09 f0       	breq	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
		sei();
     852:	78 94       	sei
	}	
	return c;
}
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	08 95       	ret

00000858 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     858:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <out_insert_pos>
	bytes_in_out_buffer = 0;
     85c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <bytes_in_out_buffer>
	input_insert_pos = 0;
     860:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
	bytes_in_input_buffer = 0;
     864:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <bytes_in_input_buffer>
	input_overrun = 0;
     868:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     86c:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	aa 1f       	adc	r26, r26
     87a:	bb 1f       	adc	r27, r27
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	aa 1f       	adc	r26, r26
     882:	bb 1f       	adc	r27, r27
     884:	9c 01       	movw	r18, r24
     886:	ad 01       	movw	r20, r26
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	44 1f       	adc	r20, r20
     88e:	55 1f       	adc	r21, r21
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	72 e1       	ldi	r23, 0x12	; 18
     894:	8a e7       	ldi	r24, 0x7A	; 122
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 c8 05 	call	0xb90	; 0xb90 <__divmodsi4>
     89c:	ba 01       	movw	r22, r20
     89e:	a9 01       	movw	r20, r18
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	6f 4f       	sbci	r22, 0xFF	; 255
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	db 01       	movw	r26, r22
     8aa:	ca 01       	movw	r24, r20
     8ac:	1a f4       	brpl	.+6      	; 0x8b4 <init_serial_stdio+0x5c>
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	a1 1d       	adc	r26, r1
     8b2:	b1 1d       	adc	r27, r1
     8b4:	b5 95       	asr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     8be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     8c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     8c6:	e1 ec       	ldi	r30, 0xC1	; 193
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	88 e1       	ldi	r24, 0x18	; 24
     8cc:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
     8ce:	80 81       	ld	r24, Z
     8d0:	80 68       	ori	r24, 0x80	; 128
     8d2:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     8d4:	e5 e4       	ldi	r30, 0x45	; 69
     8d6:	f2 e0       	ldi	r31, 0x02	; 2
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	93 83       	std	Z+3, r25	; 0x03
     8de:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     8e0:	91 83       	std	Z+1, r25	; 0x01
     8e2:	80 83       	st	Z, r24
     8e4:	08 95       	ret

000008e6 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return bytes_in_input_buffer != 0;
     8e6:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <bytes_in_input_buffer>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	91 11       	cpse	r25, r1
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <serial_input_available+0xc>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
}
     8f2:	08 95       	ret

000008f4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     8f4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
	bytes_in_input_buffer = 0;
     8f8:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <bytes_in_input_buffer>
     8fc:	08 95       	ret

000008fe <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	2f 93       	push	r18
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0) {
     912:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     916:	88 23       	and	r24, r24
     918:	29 f1       	breq	.+74     	; 0x964 <__stack+0x65>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
     91a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <out_insert_pos>
     91e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <bytes_in_out_buffer>
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	82 1b       	sub	r24, r18
     926:	91 09       	sbc	r25, r1
     928:	5a f4       	brpl	.+22     	; 0x940 <__stack+0x41>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     92a:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     92e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e8 1b       	sub	r30, r24
     936:	f1 09       	sbc	r31, r1
     938:	ee 5c       	subi	r30, 0xCE	; 206
     93a:	fd 4f       	sbci	r31, 0xFD	; 253
     93c:	90 81       	ld	r25, Z
     93e:	0a c0       	rjmp	.+20     	; 0x954 <__stack+0x55>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     940:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     944:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	e8 1b       	sub	r30, r24
     94c:	f1 09       	sbc	r31, r1
     94e:	ed 5c       	subi	r30, 0xCD	; 205
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     954:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     958:	81 50       	subi	r24, 0x01	; 1
     95a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     95e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x6f>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
     964:	e1 ec       	ldi	r30, 0xC1	; 193
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	8f 7d       	andi	r24, 0xDF	; 223
     96c:	80 83       	st	Z, r24
	}
}
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	2f 91       	pop	r18
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0
     97e:	1f 90       	pop	r1
     980:	18 95       	reti

00000982 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	cf 93       	push	r28
     9a2:	ef 93       	push	r30
     9a4:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     9a6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     9aa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <do_echo>
     9ae:	88 23       	and	r24, r24
     9b0:	49 f0       	breq	.+18     	; 0x9c4 <__vector_20+0x42>
     9b2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     9b6:	8f 3f       	cpi	r24, 0xFF	; 255
     9b8:	29 f0       	breq	.+10     	; 0x9c4 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	8c 2f       	mov	r24, r28
     9c0:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     9c4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     9c8:	80 31       	cpi	r24, 0x10	; 16
     9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__vector_20+0x52>
		input_overrun = 1;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <input_overrun>
     9d2:	18 c0       	rjmp	.+48     	; 0xa04 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     9d4:	cd 30       	cpi	r28, 0x0D	; 13
     9d6:	09 f4       	brne	.+2      	; 0x9da <__vector_20+0x58>
			c = '\n';
     9d8:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     9da:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	8e 0f       	add	r24, r30
     9e2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <input_insert_pos>
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	ed 5c       	subi	r30, 0xCD	; 205
     9ea:	fd 4f       	sbci	r31, 0xFD	; 253
     9ec:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     9ee:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
     9f8:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <input_insert_pos>
     9fc:	80 31       	cpi	r24, 0x10	; 16
     9fe:	11 f4       	brne	.+4      	; 0xa04 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     a00:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
		}
	}
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	cf 91       	pop	r28
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     a28:	94 b1       	in	r25, 0x04	; 4
     a2a:	90 6b       	ori	r25, 0xB0	; 176
     a2c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
     a2e:	95 b1       	in	r25, 0x05	; 5
     a30:	90 61       	ori	r25, 0x10	; 16
     a32:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     a34:	90 e5       	ldi	r25, 0x50	; 80
     a36:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider) {
     a38:	88 30       	cpi	r24, 0x08	; 8
     a3a:	21 f0       	breq	.+8      	; 0xa44 <spi_setup_master+0x1c>
     a3c:	80 32       	cpi	r24, 0x20	; 32
     a3e:	11 f0       	breq	.+4      	; 0xa44 <spi_setup_master+0x1c>
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	19 f4       	brne	.+6      	; 0xa4a <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	9d bd       	out	0x2d, r25	; 45
			break;
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     a4a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider) {
     a4c:	80 32       	cpi	r24, 0x20	; 32
     a4e:	69 f0       	breq	.+26     	; 0xa6a <spi_setup_master+0x42>
     a50:	28 f4       	brcc	.+10     	; 0xa5c <spi_setup_master+0x34>
     a52:	88 30       	cpi	r24, 0x08	; 8
     a54:	71 f0       	breq	.+28     	; 0xa72 <spi_setup_master+0x4a>
     a56:	80 31       	cpi	r24, 0x10	; 16
     a58:	61 f0       	breq	.+24     	; 0xa72 <spi_setup_master+0x4a>
     a5a:	0e c0       	rjmp	.+28     	; 0xa78 <spi_setup_master+0x50>
     a5c:	80 34       	cpi	r24, 0x40	; 64
     a5e:	29 f0       	breq	.+10     	; 0xa6a <spi_setup_master+0x42>
     a60:	80 38       	cpi	r24, 0x80	; 128
     a62:	51 f4       	brne	.+20     	; 0xa78 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
     a64:	8c b5       	in	r24, 0x2c	; 44
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
     a6a:	8c b5       	in	r24, 0x2c	; 44
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	8c bd       	out	0x2c, r24	; 44
			break;
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
     a72:	8c b5       	in	r24, 0x2c	; 44
     a74:	81 60       	ori	r24, 0x01	; 1
     a76:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
     a78:	85 b1       	in	r24, 0x05	; 5
     a7a:	8f 7e       	andi	r24, 0xEF	; 239
     a7c:	85 b9       	out	0x05, r24	; 5
     a7e:	08 95       	ret

00000a80 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     a80:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0) {
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     a88:	8e b5       	in	r24, 0x2e	; 46
}
     a8a:	08 95       	ret

00000a8c <move_terminal_cursor>:
	printf_P(PSTR("\x1b[%dm"), parameter);
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
}
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	7f 93       	push	r23
     a92:	6f 93       	push	r22
     a94:	8d ef       	ldi	r24, 0xFD	; 253
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	08 95       	ret

00000aae <clear_terminal>:
     aae:	88 ef       	ldi	r24, 0xF8	; 248
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	08 95       	ret

00000ac0 <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
     ac0:	81 ef       	ldi	r24, 0xF1	; 241
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <printf_P>
}
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	08 95       	ret

00000ad2 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
     ad2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <clock_ticks_ms>
     ad6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <clock_ticks_ms+0x1>
     ada:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <clock_ticks_ms+0x2>
     ade:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     ae2:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     ae4:	8c e7       	ldi	r24, 0x7C	; 124
     ae6:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
     af0:	ee e6       	ldi	r30, 0x6E	; 110
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
     afa:	95 bb       	out	0x15, r25	; 21
     afc:	08 95       	ret

00000afe <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     afe:	8f b7       	in	r24, 0x3f	; 63
     b00:	28 2f       	mov	r18, r24
     b02:	20 78       	andi	r18, 0x80	; 128
	cli();
     b04:	f8 94       	cli
	return_value = clock_ticks_ms;
     b06:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <clock_ticks_ms>
     b0a:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <clock_ticks_ms+0x1>
     b0e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <clock_ticks_ms+0x2>
     b12:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <clock_ticks_ms+0x3>
	if (interrupts_were_enabled) {
     b16:	22 23       	and	r18, r18
     b18:	09 f0       	breq	.+2      	; 0xb1c <get_current_time+0x1e>
		sei();
     b1a:	78 94       	sei
	}
	return return_value;
}
     b1c:	08 95       	ret

00000b1e <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
     b30:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clock_ticks_ms>
     b34:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clock_ticks_ms+0x1>
     b38:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <clock_ticks_ms+0x2>
     b3c:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <clock_ticks_ms+0x3>
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	a1 1d       	adc	r26, r1
     b44:	b1 1d       	adc	r27, r1
     b46:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <clock_ticks_ms>
     b4a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <clock_ticks_ms+0x1>
     b4e:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <clock_ticks_ms+0x2>
     b52:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <clock_ticks_ms+0x3>
}
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__divmodhi4>:
     b68:	97 fb       	bst	r25, 7
     b6a:	07 2e       	mov	r0, r23
     b6c:	16 f4       	brtc	.+4      	; 0xb72 <__divmodhi4+0xa>
     b6e:	00 94       	com	r0
     b70:	07 d0       	rcall	.+14     	; 0xb80 <__divmodhi4_neg1>
     b72:	77 fd       	sbrc	r23, 7
     b74:	09 d0       	rcall	.+18     	; 0xb88 <__divmodhi4_neg2>
     b76:	0e 94 e7 05 	call	0xbce	; 0xbce <__udivmodhi4>
     b7a:	07 fc       	sbrc	r0, 7
     b7c:	05 d0       	rcall	.+10     	; 0xb88 <__divmodhi4_neg2>
     b7e:	3e f4       	brtc	.+14     	; 0xb8e <__divmodhi4_exit>

00000b80 <__divmodhi4_neg1>:
     b80:	90 95       	com	r25
     b82:	81 95       	neg	r24
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	08 95       	ret

00000b88 <__divmodhi4_neg2>:
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b8e <__divmodhi4_exit>:
     b8e:	08 95       	ret

00000b90 <__divmodsi4>:
     b90:	05 2e       	mov	r0, r21
     b92:	97 fb       	bst	r25, 7
     b94:	1e f4       	brtc	.+6      	; 0xb9c <__divmodsi4+0xc>
     b96:	00 94       	com	r0
     b98:	0e 94 df 05 	call	0xbbe	; 0xbbe <__negsi2>
     b9c:	57 fd       	sbrc	r21, 7
     b9e:	07 d0       	rcall	.+14     	; 0xbae <__divmodsi4_neg2>
     ba0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__udivmodsi4>
     ba4:	07 fc       	sbrc	r0, 7
     ba6:	03 d0       	rcall	.+6      	; 0xbae <__divmodsi4_neg2>
     ba8:	4e f4       	brtc	.+18     	; 0xbbc <__divmodsi4_exit>
     baa:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__negsi2>

00000bae <__divmodsi4_neg2>:
     bae:	50 95       	com	r21
     bb0:	40 95       	com	r20
     bb2:	30 95       	com	r19
     bb4:	21 95       	neg	r18
     bb6:	3f 4f       	sbci	r19, 0xFF	; 255
     bb8:	4f 4f       	sbci	r20, 0xFF	; 255
     bba:	5f 4f       	sbci	r21, 0xFF	; 255

00000bbc <__divmodsi4_exit>:
     bbc:	08 95       	ret

00000bbe <__negsi2>:
     bbe:	90 95       	com	r25
     bc0:	80 95       	com	r24
     bc2:	70 95       	com	r23
     bc4:	61 95       	neg	r22
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	8f 4f       	sbci	r24, 0xFF	; 255
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	08 95       	ret

00000bce <__udivmodhi4>:
     bce:	aa 1b       	sub	r26, r26
     bd0:	bb 1b       	sub	r27, r27
     bd2:	51 e1       	ldi	r21, 0x11	; 17
     bd4:	07 c0       	rjmp	.+14     	; 0xbe4 <__udivmodhi4_ep>

00000bd6 <__udivmodhi4_loop>:
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	a6 17       	cp	r26, r22
     bdc:	b7 07       	cpc	r27, r23
     bde:	10 f0       	brcs	.+4      	; 0xbe4 <__udivmodhi4_ep>
     be0:	a6 1b       	sub	r26, r22
     be2:	b7 0b       	sbc	r27, r23

00000be4 <__udivmodhi4_ep>:
     be4:	88 1f       	adc	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	5a 95       	dec	r21
     bea:	a9 f7       	brne	.-22     	; 0xbd6 <__udivmodhi4_loop>
     bec:	80 95       	com	r24
     bee:	90 95       	com	r25
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	08 95       	ret

00000bf6 <__udivmodsi4>:
     bf6:	a1 e2       	ldi	r26, 0x21	; 33
     bf8:	1a 2e       	mov	r1, r26
     bfa:	aa 1b       	sub	r26, r26
     bfc:	bb 1b       	sub	r27, r27
     bfe:	fd 01       	movw	r30, r26
     c00:	0d c0       	rjmp	.+26     	; 0xc1c <__udivmodsi4_ep>

00000c02 <__udivmodsi4_loop>:
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	ee 1f       	adc	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	a2 17       	cp	r26, r18
     c0c:	b3 07       	cpc	r27, r19
     c0e:	e4 07       	cpc	r30, r20
     c10:	f5 07       	cpc	r31, r21
     c12:	20 f0       	brcs	.+8      	; 0xc1c <__udivmodsi4_ep>
     c14:	a2 1b       	sub	r26, r18
     c16:	b3 0b       	sbc	r27, r19
     c18:	e4 0b       	sbc	r30, r20
     c1a:	f5 0b       	sbc	r31, r21

00000c1c <__udivmodsi4_ep>:
     c1c:	66 1f       	adc	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	88 1f       	adc	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	1a 94       	dec	r1
     c26:	69 f7       	brne	.-38     	; 0xc02 <__udivmodsi4_loop>
     c28:	60 95       	com	r22
     c2a:	70 95       	com	r23
     c2c:	80 95       	com	r24
     c2e:	90 95       	com	r25
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	bd 01       	movw	r22, r26
     c36:	cf 01       	movw	r24, r30
     c38:	08 95       	ret

00000c3a <fgetc>:
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
     c40:	2b 81       	ldd	r18, Y+3	; 0x03
     c42:	20 ff       	sbrs	r18, 0
     c44:	33 c0       	rjmp	.+102    	; 0xcac <fgetc+0x72>
     c46:	26 ff       	sbrs	r18, 6
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <fgetc+0x24>
     c4a:	2f 7b       	andi	r18, 0xBF	; 191
     c4c:	2b 83       	std	Y+3, r18	; 0x03
     c4e:	8e 81       	ldd	r24, Y+6	; 0x06
     c50:	9f 81       	ldd	r25, Y+7	; 0x07
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	9f 83       	std	Y+7, r25	; 0x07
     c56:	8e 83       	std	Y+6, r24	; 0x06
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	29 c0       	rjmp	.+82     	; 0xcb0 <fgetc+0x76>
     c5e:	22 ff       	sbrs	r18, 2
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <fgetc+0x46>
     c62:	e8 81       	ld	r30, Y
     c64:	f9 81       	ldd	r31, Y+1	; 0x01
     c66:	80 81       	ld	r24, Z
     c68:	08 2e       	mov	r0, r24
     c6a:	00 0c       	add	r0, r0
     c6c:	99 0b       	sbc	r25, r25
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	19 f4       	brne	.+6      	; 0xc78 <fgetc+0x3e>
     c72:	20 62       	ori	r18, 0x20	; 32
     c74:	2b 83       	std	Y+3, r18	; 0x03
     c76:	1a c0       	rjmp	.+52     	; 0xcac <fgetc+0x72>
     c78:	31 96       	adiw	r30, 0x01	; 1
     c7a:	f9 83       	std	Y+1, r31	; 0x01
     c7c:	e8 83       	st	Y, r30
     c7e:	0e c0       	rjmp	.+28     	; 0xc9c <fgetc+0x62>
     c80:	ea 85       	ldd	r30, Y+10	; 0x0a
     c82:	fb 85       	ldd	r31, Y+11	; 0x0b
     c84:	09 95       	icall
     c86:	97 ff       	sbrs	r25, 7
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <fgetc+0x62>
     c8a:	2b 81       	ldd	r18, Y+3	; 0x03
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	11 f0       	breq	.+4      	; 0xc94 <fgetc+0x5a>
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <fgetc+0x5c>
     c94:	80 e1       	ldi	r24, 0x10	; 16
     c96:	82 2b       	or	r24, r18
     c98:	8b 83       	std	Y+3, r24	; 0x03
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <fgetc+0x72>
     c9c:	2e 81       	ldd	r18, Y+6	; 0x06
     c9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ca0:	2f 5f       	subi	r18, 0xFF	; 255
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	3f 83       	std	Y+7, r19	; 0x07
     ca6:	2e 83       	std	Y+6, r18	; 0x06
     ca8:	99 27       	eor	r25, r25
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <fgetc+0x76>
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <printf_P>:
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e6       	ldi	r30, 0x61	; 97
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__prologue_saves__+0x1c>
     cc2:	ae 01       	movw	r20, r28
     cc4:	49 5f       	subi	r20, 0xF9	; 249
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	da 01       	movw	r26, r20
     cca:	6d 91       	ld	r22, X+
     ccc:	7d 91       	ld	r23, X+
     cce:	ad 01       	movw	r20, r26
     cd0:	05 e4       	ldi	r16, 0x45	; 69
     cd2:	12 e0       	ldi	r17, 0x02	; 2
     cd4:	f8 01       	movw	r30, r16
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	93 81       	ldd	r25, Z+3	; 0x03
     cda:	dc 01       	movw	r26, r24
     cdc:	13 96       	adiw	r26, 0x03	; 3
     cde:	2c 91       	ld	r18, X
     ce0:	13 97       	sbiw	r26, 0x03	; 3
     ce2:	28 60       	ori	r18, 0x08	; 8
     ce4:	13 96       	adiw	r26, 0x03	; 3
     ce6:	2c 93       	st	X, r18
     ce8:	0e 94 81 06 	call	0xd02	; 0xd02 <vfprintf>
     cec:	d8 01       	movw	r26, r16
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	ed 91       	ld	r30, X+
     cf2:	fc 91       	ld	r31, X
     cf4:	13 97       	sbiw	r26, 0x03	; 3
     cf6:	23 81       	ldd	r18, Z+3	; 0x03
     cf8:	27 7f       	andi	r18, 0xF7	; 247
     cfa:	23 83       	std	Z+3, r18	; 0x03
     cfc:	e4 e0       	ldi	r30, 0x04	; 4
     cfe:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__epilogue_restores__+0x1c>

00000d02 <vfprintf>:
     d02:	ab e0       	ldi	r26, 0x0B	; 11
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e8       	ldi	r30, 0x87	; 135
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__prologue_saves__>
     d0e:	6c 01       	movw	r12, r24
     d10:	7b 01       	movw	r14, r22
     d12:	8a 01       	movw	r16, r20
     d14:	fc 01       	movw	r30, r24
     d16:	17 82       	std	Z+7, r1	; 0x07
     d18:	16 82       	std	Z+6, r1	; 0x06
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	81 ff       	sbrs	r24, 1
     d1e:	cc c1       	rjmp	.+920    	; 0x10b8 <vfprintf+0x3b6>
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	3c 01       	movw	r6, r24
     d26:	f6 01       	movw	r30, r12
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	f7 01       	movw	r30, r14
     d2c:	93 fd       	sbrc	r25, 3
     d2e:	85 91       	lpm	r24, Z+
     d30:	93 ff       	sbrs	r25, 3
     d32:	81 91       	ld	r24, Z+
     d34:	7f 01       	movw	r14, r30
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <vfprintf+0x3a>
     d3a:	ba c1       	rjmp	.+884    	; 0x10b0 <vfprintf+0x3ae>
     d3c:	85 32       	cpi	r24, 0x25	; 37
     d3e:	39 f4       	brne	.+14     	; 0xd4e <vfprintf+0x4c>
     d40:	93 fd       	sbrc	r25, 3
     d42:	85 91       	lpm	r24, Z+
     d44:	93 ff       	sbrs	r25, 3
     d46:	81 91       	ld	r24, Z+
     d48:	7f 01       	movw	r14, r30
     d4a:	85 32       	cpi	r24, 0x25	; 37
     d4c:	29 f4       	brne	.+10     	; 0xd58 <vfprintf+0x56>
     d4e:	b6 01       	movw	r22, r12
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     d56:	e7 cf       	rjmp	.-50     	; 0xd26 <vfprintf+0x24>
     d58:	91 2c       	mov	r9, r1
     d5a:	21 2c       	mov	r2, r1
     d5c:	31 2c       	mov	r3, r1
     d5e:	ff e1       	ldi	r31, 0x1F	; 31
     d60:	f3 15       	cp	r31, r3
     d62:	d8 f0       	brcs	.+54     	; 0xd9a <vfprintf+0x98>
     d64:	8b 32       	cpi	r24, 0x2B	; 43
     d66:	79 f0       	breq	.+30     	; 0xd86 <vfprintf+0x84>
     d68:	38 f4       	brcc	.+14     	; 0xd78 <vfprintf+0x76>
     d6a:	80 32       	cpi	r24, 0x20	; 32
     d6c:	79 f0       	breq	.+30     	; 0xd8c <vfprintf+0x8a>
     d6e:	83 32       	cpi	r24, 0x23	; 35
     d70:	a1 f4       	brne	.+40     	; 0xd9a <vfprintf+0x98>
     d72:	23 2d       	mov	r18, r3
     d74:	20 61       	ori	r18, 0x10	; 16
     d76:	1d c0       	rjmp	.+58     	; 0xdb2 <vfprintf+0xb0>
     d78:	8d 32       	cpi	r24, 0x2D	; 45
     d7a:	61 f0       	breq	.+24     	; 0xd94 <vfprintf+0x92>
     d7c:	80 33       	cpi	r24, 0x30	; 48
     d7e:	69 f4       	brne	.+26     	; 0xd9a <vfprintf+0x98>
     d80:	23 2d       	mov	r18, r3
     d82:	21 60       	ori	r18, 0x01	; 1
     d84:	16 c0       	rjmp	.+44     	; 0xdb2 <vfprintf+0xb0>
     d86:	83 2d       	mov	r24, r3
     d88:	82 60       	ori	r24, 0x02	; 2
     d8a:	38 2e       	mov	r3, r24
     d8c:	e3 2d       	mov	r30, r3
     d8e:	e4 60       	ori	r30, 0x04	; 4
     d90:	3e 2e       	mov	r3, r30
     d92:	2a c0       	rjmp	.+84     	; 0xde8 <vfprintf+0xe6>
     d94:	f3 2d       	mov	r31, r3
     d96:	f8 60       	ori	r31, 0x08	; 8
     d98:	1d c0       	rjmp	.+58     	; 0xdd4 <vfprintf+0xd2>
     d9a:	37 fc       	sbrc	r3, 7
     d9c:	2d c0       	rjmp	.+90     	; 0xdf8 <vfprintf+0xf6>
     d9e:	20 ed       	ldi	r18, 0xD0	; 208
     da0:	28 0f       	add	r18, r24
     da2:	2a 30       	cpi	r18, 0x0A	; 10
     da4:	40 f0       	brcs	.+16     	; 0xdb6 <vfprintf+0xb4>
     da6:	8e 32       	cpi	r24, 0x2E	; 46
     da8:	b9 f4       	brne	.+46     	; 0xdd8 <vfprintf+0xd6>
     daa:	36 fc       	sbrc	r3, 6
     dac:	81 c1       	rjmp	.+770    	; 0x10b0 <vfprintf+0x3ae>
     dae:	23 2d       	mov	r18, r3
     db0:	20 64       	ori	r18, 0x40	; 64
     db2:	32 2e       	mov	r3, r18
     db4:	19 c0       	rjmp	.+50     	; 0xde8 <vfprintf+0xe6>
     db6:	36 fe       	sbrs	r3, 6
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <vfprintf+0xc4>
     dba:	8a e0       	ldi	r24, 0x0A	; 10
     dbc:	98 9e       	mul	r9, r24
     dbe:	20 0d       	add	r18, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	92 2e       	mov	r9, r18
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <vfprintf+0xe6>
     dc6:	ea e0       	ldi	r30, 0x0A	; 10
     dc8:	2e 9e       	mul	r2, r30
     dca:	20 0d       	add	r18, r0
     dcc:	11 24       	eor	r1, r1
     dce:	22 2e       	mov	r2, r18
     dd0:	f3 2d       	mov	r31, r3
     dd2:	f0 62       	ori	r31, 0x20	; 32
     dd4:	3f 2e       	mov	r3, r31
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <vfprintf+0xe6>
     dd8:	8c 36       	cpi	r24, 0x6C	; 108
     dda:	21 f4       	brne	.+8      	; 0xde4 <vfprintf+0xe2>
     ddc:	83 2d       	mov	r24, r3
     dde:	80 68       	ori	r24, 0x80	; 128
     de0:	38 2e       	mov	r3, r24
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0xe6>
     de4:	88 36       	cpi	r24, 0x68	; 104
     de6:	41 f4       	brne	.+16     	; 0xdf8 <vfprintf+0xf6>
     de8:	f7 01       	movw	r30, r14
     dea:	93 fd       	sbrc	r25, 3
     dec:	85 91       	lpm	r24, Z+
     dee:	93 ff       	sbrs	r25, 3
     df0:	81 91       	ld	r24, Z+
     df2:	7f 01       	movw	r14, r30
     df4:	81 11       	cpse	r24, r1
     df6:	b3 cf       	rjmp	.-154    	; 0xd5e <vfprintf+0x5c>
     df8:	98 2f       	mov	r25, r24
     dfa:	9f 7d       	andi	r25, 0xDF	; 223
     dfc:	95 54       	subi	r25, 0x45	; 69
     dfe:	93 30       	cpi	r25, 0x03	; 3
     e00:	28 f4       	brcc	.+10     	; 0xe0c <vfprintf+0x10a>
     e02:	0c 5f       	subi	r16, 0xFC	; 252
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	9f e3       	ldi	r25, 0x3F	; 63
     e08:	99 83       	std	Y+1, r25	; 0x01
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <vfprintf+0x124>
     e0c:	83 36       	cpi	r24, 0x63	; 99
     e0e:	31 f0       	breq	.+12     	; 0xe1c <vfprintf+0x11a>
     e10:	83 37       	cpi	r24, 0x73	; 115
     e12:	71 f0       	breq	.+28     	; 0xe30 <vfprintf+0x12e>
     e14:	83 35       	cpi	r24, 0x53	; 83
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x118>
     e18:	59 c0       	rjmp	.+178    	; 0xecc <vfprintf+0x1ca>
     e1a:	21 c0       	rjmp	.+66     	; 0xe5e <vfprintf+0x15c>
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 81       	ld	r24, Z
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	0e 5f       	subi	r16, 0xFE	; 254
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	88 24       	eor	r8, r8
     e28:	83 94       	inc	r8
     e2a:	91 2c       	mov	r9, r1
     e2c:	53 01       	movw	r10, r6
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <vfprintf+0x154>
     e30:	28 01       	movw	r4, r16
     e32:	f2 e0       	ldi	r31, 0x02	; 2
     e34:	4f 0e       	add	r4, r31
     e36:	51 1c       	adc	r5, r1
     e38:	f8 01       	movw	r30, r16
     e3a:	a0 80       	ld	r10, Z
     e3c:	b1 80       	ldd	r11, Z+1	; 0x01
     e3e:	36 fe       	sbrs	r3, 6
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <vfprintf+0x146>
     e42:	69 2d       	mov	r22, r9
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <vfprintf+0x14a>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	c5 01       	movw	r24, r10
     e4e:	0e 94 6d 08 	call	0x10da	; 0x10da <strnlen>
     e52:	4c 01       	movw	r8, r24
     e54:	82 01       	movw	r16, r4
     e56:	f3 2d       	mov	r31, r3
     e58:	ff 77       	andi	r31, 0x7F	; 127
     e5a:	3f 2e       	mov	r3, r31
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <vfprintf+0x188>
     e5e:	28 01       	movw	r4, r16
     e60:	22 e0       	ldi	r18, 0x02	; 2
     e62:	42 0e       	add	r4, r18
     e64:	51 1c       	adc	r5, r1
     e66:	f8 01       	movw	r30, r16
     e68:	a0 80       	ld	r10, Z
     e6a:	b1 80       	ldd	r11, Z+1	; 0x01
     e6c:	36 fe       	sbrs	r3, 6
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <vfprintf+0x174>
     e70:	69 2d       	mov	r22, r9
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x178>
     e76:	6f ef       	ldi	r22, 0xFF	; 255
     e78:	7f ef       	ldi	r23, 0xFF	; 255
     e7a:	c5 01       	movw	r24, r10
     e7c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <strnlen_P>
     e80:	4c 01       	movw	r8, r24
     e82:	f3 2d       	mov	r31, r3
     e84:	f0 68       	ori	r31, 0x80	; 128
     e86:	3f 2e       	mov	r3, r31
     e88:	82 01       	movw	r16, r4
     e8a:	33 fc       	sbrc	r3, 3
     e8c:	1b c0       	rjmp	.+54     	; 0xec4 <vfprintf+0x1c2>
     e8e:	82 2d       	mov	r24, r2
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 16       	cp	r8, r24
     e94:	99 06       	cpc	r9, r25
     e96:	b0 f4       	brcc	.+44     	; 0xec4 <vfprintf+0x1c2>
     e98:	b6 01       	movw	r22, r12
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     ea2:	2a 94       	dec	r2
     ea4:	f4 cf       	rjmp	.-24     	; 0xe8e <vfprintf+0x18c>
     ea6:	f5 01       	movw	r30, r10
     ea8:	37 fc       	sbrc	r3, 7
     eaa:	85 91       	lpm	r24, Z+
     eac:	37 fe       	sbrs	r3, 7
     eae:	81 91       	ld	r24, Z+
     eb0:	5f 01       	movw	r10, r30
     eb2:	b6 01       	movw	r22, r12
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
     eba:	21 10       	cpse	r2, r1
     ebc:	2a 94       	dec	r2
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	82 1a       	sub	r8, r18
     ec2:	91 08       	sbc	r9, r1
     ec4:	81 14       	cp	r8, r1
     ec6:	91 04       	cpc	r9, r1
     ec8:	71 f7       	brne	.-36     	; 0xea6 <vfprintf+0x1a4>
     eca:	e8 c0       	rjmp	.+464    	; 0x109c <vfprintf+0x39a>
     ecc:	84 36       	cpi	r24, 0x64	; 100
     ece:	11 f0       	breq	.+4      	; 0xed4 <vfprintf+0x1d2>
     ed0:	89 36       	cpi	r24, 0x69	; 105
     ed2:	41 f5       	brne	.+80     	; 0xf24 <vfprintf+0x222>
     ed4:	f8 01       	movw	r30, r16
     ed6:	37 fe       	sbrs	r3, 7
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <vfprintf+0x1e6>
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	0c 5f       	subi	r16, 0xFC	; 252
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	08 c0       	rjmp	.+16     	; 0xef8 <vfprintf+0x1f6>
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	07 2e       	mov	r0, r23
     eee:	00 0c       	add	r0, r0
     ef0:	88 0b       	sbc	r24, r24
     ef2:	99 0b       	sbc	r25, r25
     ef4:	0e 5f       	subi	r16, 0xFE	; 254
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	f3 2d       	mov	r31, r3
     efa:	ff 76       	andi	r31, 0x6F	; 111
     efc:	3f 2e       	mov	r3, r31
     efe:	97 ff       	sbrs	r25, 7
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <vfprintf+0x212>
     f02:	90 95       	com	r25
     f04:	80 95       	com	r24
     f06:	70 95       	com	r23
     f08:	61 95       	neg	r22
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	f0 68       	ori	r31, 0x80	; 128
     f12:	3f 2e       	mov	r3, r31
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a3 01       	movw	r20, r6
     f1a:	0e 94 b4 08 	call	0x1168	; 0x1168 <__ultoa_invert>
     f1e:	88 2e       	mov	r8, r24
     f20:	86 18       	sub	r8, r6
     f22:	45 c0       	rjmp	.+138    	; 0xfae <vfprintf+0x2ac>
     f24:	85 37       	cpi	r24, 0x75	; 117
     f26:	31 f4       	brne	.+12     	; 0xf34 <vfprintf+0x232>
     f28:	23 2d       	mov	r18, r3
     f2a:	2f 7e       	andi	r18, 0xEF	; 239
     f2c:	b2 2e       	mov	r11, r18
     f2e:	2a e0       	ldi	r18, 0x0A	; 10
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	25 c0       	rjmp	.+74     	; 0xf7e <vfprintf+0x27c>
     f34:	93 2d       	mov	r25, r3
     f36:	99 7f       	andi	r25, 0xF9	; 249
     f38:	b9 2e       	mov	r11, r25
     f3a:	8f 36       	cpi	r24, 0x6F	; 111
     f3c:	c1 f0       	breq	.+48     	; 0xf6e <vfprintf+0x26c>
     f3e:	18 f4       	brcc	.+6      	; 0xf46 <vfprintf+0x244>
     f40:	88 35       	cpi	r24, 0x58	; 88
     f42:	79 f0       	breq	.+30     	; 0xf62 <vfprintf+0x260>
     f44:	b5 c0       	rjmp	.+362    	; 0x10b0 <vfprintf+0x3ae>
     f46:	80 37       	cpi	r24, 0x70	; 112
     f48:	19 f0       	breq	.+6      	; 0xf50 <vfprintf+0x24e>
     f4a:	88 37       	cpi	r24, 0x78	; 120
     f4c:	21 f0       	breq	.+8      	; 0xf56 <vfprintf+0x254>
     f4e:	b0 c0       	rjmp	.+352    	; 0x10b0 <vfprintf+0x3ae>
     f50:	e9 2f       	mov	r30, r25
     f52:	e0 61       	ori	r30, 0x10	; 16
     f54:	be 2e       	mov	r11, r30
     f56:	b4 fe       	sbrs	r11, 4
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <vfprintf+0x272>
     f5a:	fb 2d       	mov	r31, r11
     f5c:	f4 60       	ori	r31, 0x04	; 4
     f5e:	bf 2e       	mov	r11, r31
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <vfprintf+0x272>
     f62:	34 fe       	sbrs	r3, 4
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <vfprintf+0x278>
     f66:	29 2f       	mov	r18, r25
     f68:	26 60       	ori	r18, 0x06	; 6
     f6a:	b2 2e       	mov	r11, r18
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0x278>
     f6e:	28 e0       	ldi	r18, 0x08	; 8
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <vfprintf+0x27c>
     f74:	20 e1       	ldi	r18, 0x10	; 16
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x27c>
     f7a:	20 e1       	ldi	r18, 0x10	; 16
     f7c:	32 e0       	ldi	r19, 0x02	; 2
     f7e:	f8 01       	movw	r30, r16
     f80:	b7 fe       	sbrs	r11, 7
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <vfprintf+0x290>
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	0c 5f       	subi	r16, 0xFC	; 252
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x29c>
     f92:	60 81       	ld	r22, Z
     f94:	71 81       	ldd	r23, Z+1	; 0x01
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 5f       	subi	r16, 0xFE	; 254
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	a3 01       	movw	r20, r6
     fa0:	0e 94 b4 08 	call	0x1168	; 0x1168 <__ultoa_invert>
     fa4:	88 2e       	mov	r8, r24
     fa6:	86 18       	sub	r8, r6
     fa8:	fb 2d       	mov	r31, r11
     faa:	ff 77       	andi	r31, 0x7F	; 127
     fac:	3f 2e       	mov	r3, r31
     fae:	36 fe       	sbrs	r3, 6
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <vfprintf+0x2ca>
     fb2:	23 2d       	mov	r18, r3
     fb4:	2e 7f       	andi	r18, 0xFE	; 254
     fb6:	a2 2e       	mov	r10, r18
     fb8:	89 14       	cp	r8, r9
     fba:	58 f4       	brcc	.+22     	; 0xfd2 <vfprintf+0x2d0>
     fbc:	34 fe       	sbrs	r3, 4
     fbe:	0b c0       	rjmp	.+22     	; 0xfd6 <vfprintf+0x2d4>
     fc0:	32 fc       	sbrc	r3, 2
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x2d4>
     fc4:	83 2d       	mov	r24, r3
     fc6:	8e 7e       	andi	r24, 0xEE	; 238
     fc8:	a8 2e       	mov	r10, r24
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <vfprintf+0x2d4>
     fcc:	b8 2c       	mov	r11, r8
     fce:	a3 2c       	mov	r10, r3
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <vfprintf+0x2d6>
     fd2:	b8 2c       	mov	r11, r8
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <vfprintf+0x2d6>
     fd6:	b9 2c       	mov	r11, r9
     fd8:	a4 fe       	sbrs	r10, 4
     fda:	0f c0       	rjmp	.+30     	; 0xffa <vfprintf+0x2f8>
     fdc:	fe 01       	movw	r30, r28
     fde:	e8 0d       	add	r30, r8
     fe0:	f1 1d       	adc	r31, r1
     fe2:	80 81       	ld	r24, Z
     fe4:	80 33       	cpi	r24, 0x30	; 48
     fe6:	21 f4       	brne	.+8      	; 0xff0 <vfprintf+0x2ee>
     fe8:	9a 2d       	mov	r25, r10
     fea:	99 7e       	andi	r25, 0xE9	; 233
     fec:	a9 2e       	mov	r10, r25
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <vfprintf+0x300>
     ff0:	a2 fe       	sbrs	r10, 2
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <vfprintf+0x2fe>
     ff4:	b3 94       	inc	r11
     ff6:	b3 94       	inc	r11
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <vfprintf+0x300>
     ffa:	8a 2d       	mov	r24, r10
     ffc:	86 78       	andi	r24, 0x86	; 134
     ffe:	09 f0       	breq	.+2      	; 0x1002 <vfprintf+0x300>
    1000:	b3 94       	inc	r11
    1002:	a3 fc       	sbrc	r10, 3
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <vfprintf+0x326>
    1006:	a0 fe       	sbrs	r10, 0
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x314>
    100a:	b2 14       	cp	r11, r2
    100c:	88 f4       	brcc	.+34     	; 0x1030 <vfprintf+0x32e>
    100e:	28 0c       	add	r2, r8
    1010:	92 2c       	mov	r9, r2
    1012:	9b 18       	sub	r9, r11
    1014:	0e c0       	rjmp	.+28     	; 0x1032 <vfprintf+0x330>
    1016:	b2 14       	cp	r11, r2
    1018:	60 f4       	brcc	.+24     	; 0x1032 <vfprintf+0x330>
    101a:	b6 01       	movw	r22, r12
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1024:	b3 94       	inc	r11
    1026:	f7 cf       	rjmp	.-18     	; 0x1016 <vfprintf+0x314>
    1028:	b2 14       	cp	r11, r2
    102a:	18 f4       	brcc	.+6      	; 0x1032 <vfprintf+0x330>
    102c:	2b 18       	sub	r2, r11
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x332>
    1030:	98 2c       	mov	r9, r8
    1032:	21 2c       	mov	r2, r1
    1034:	a4 fe       	sbrs	r10, 4
    1036:	10 c0       	rjmp	.+32     	; 0x1058 <vfprintf+0x356>
    1038:	b6 01       	movw	r22, r12
    103a:	80 e3       	ldi	r24, 0x30	; 48
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1042:	a2 fe       	sbrs	r10, 2
    1044:	17 c0       	rjmp	.+46     	; 0x1074 <vfprintf+0x372>
    1046:	a1 fc       	sbrc	r10, 1
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <vfprintf+0x34e>
    104a:	88 e7       	ldi	r24, 0x78	; 120
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <vfprintf+0x352>
    1050:	88 e5       	ldi	r24, 0x58	; 88
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	b6 01       	movw	r22, r12
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <vfprintf+0x36e>
    1058:	8a 2d       	mov	r24, r10
    105a:	86 78       	andi	r24, 0x86	; 134
    105c:	59 f0       	breq	.+22     	; 0x1074 <vfprintf+0x372>
    105e:	a1 fe       	sbrs	r10, 1
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x364>
    1062:	8b e2       	ldi	r24, 0x2B	; 43
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <vfprintf+0x366>
    1066:	80 e2       	ldi	r24, 0x20	; 32
    1068:	a7 fc       	sbrc	r10, 7
    106a:	8d e2       	ldi	r24, 0x2D	; 45
    106c:	b6 01       	movw	r22, r12
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1074:	89 14       	cp	r8, r9
    1076:	38 f4       	brcc	.+14     	; 0x1086 <vfprintf+0x384>
    1078:	b6 01       	movw	r22, r12
    107a:	80 e3       	ldi	r24, 0x30	; 48
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1082:	9a 94       	dec	r9
    1084:	f7 cf       	rjmp	.-18     	; 0x1074 <vfprintf+0x372>
    1086:	8a 94       	dec	r8
    1088:	f3 01       	movw	r30, r6
    108a:	e8 0d       	add	r30, r8
    108c:	f1 1d       	adc	r31, r1
    108e:	80 81       	ld	r24, Z
    1090:	b6 01       	movw	r22, r12
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    1098:	81 10       	cpse	r8, r1
    109a:	f5 cf       	rjmp	.-22     	; 0x1086 <vfprintf+0x384>
    109c:	22 20       	and	r2, r2
    109e:	09 f4       	brne	.+2      	; 0x10a2 <vfprintf+0x3a0>
    10a0:	42 ce       	rjmp	.-892    	; 0xd26 <vfprintf+0x24>
    10a2:	b6 01       	movw	r22, r12
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <fputc>
    10ac:	2a 94       	dec	r2
    10ae:	f6 cf       	rjmp	.-20     	; 0x109c <vfprintf+0x39a>
    10b0:	f6 01       	movw	r30, r12
    10b2:	86 81       	ldd	r24, Z+6	; 0x06
    10b4:	97 81       	ldd	r25, Z+7	; 0x07
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <vfprintf+0x3ba>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	2b 96       	adiw	r28, 0x0b	; 11
    10be:	e2 e1       	ldi	r30, 0x12	; 18
    10c0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__epilogue_restores__>

000010c4 <strnlen_P>:
    10c4:	fc 01       	movw	r30, r24
    10c6:	05 90       	lpm	r0, Z+
    10c8:	61 50       	subi	r22, 0x01	; 1
    10ca:	70 40       	sbci	r23, 0x00	; 0
    10cc:	01 10       	cpse	r0, r1
    10ce:	d8 f7       	brcc	.-10     	; 0x10c6 <strnlen_P+0x2>
    10d0:	80 95       	com	r24
    10d2:	90 95       	com	r25
    10d4:	8e 0f       	add	r24, r30
    10d6:	9f 1f       	adc	r25, r31
    10d8:	08 95       	ret

000010da <strnlen>:
    10da:	fc 01       	movw	r30, r24
    10dc:	61 50       	subi	r22, 0x01	; 1
    10de:	70 40       	sbci	r23, 0x00	; 0
    10e0:	01 90       	ld	r0, Z+
    10e2:	01 10       	cpse	r0, r1
    10e4:	d8 f7       	brcc	.-10     	; 0x10dc <strnlen+0x2>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	8e 0f       	add	r24, r30
    10ec:	9f 1f       	adc	r25, r31
    10ee:	08 95       	ret

000010f0 <fputc>:
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	fb 01       	movw	r30, r22
    10fa:	23 81       	ldd	r18, Z+3	; 0x03
    10fc:	21 fd       	sbrc	r18, 1
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <fputc+0x16>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	2c c0       	rjmp	.+88     	; 0x115e <fputc+0x6e>
    1106:	22 ff       	sbrs	r18, 2
    1108:	16 c0       	rjmp	.+44     	; 0x1136 <fputc+0x46>
    110a:	46 81       	ldd	r20, Z+6	; 0x06
    110c:	57 81       	ldd	r21, Z+7	; 0x07
    110e:	24 81       	ldd	r18, Z+4	; 0x04
    1110:	35 81       	ldd	r19, Z+5	; 0x05
    1112:	42 17       	cp	r20, r18
    1114:	53 07       	cpc	r21, r19
    1116:	44 f4       	brge	.+16     	; 0x1128 <fputc+0x38>
    1118:	a0 81       	ld	r26, Z
    111a:	b1 81       	ldd	r27, Z+1	; 0x01
    111c:	9d 01       	movw	r18, r26
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	31 83       	std	Z+1, r19	; 0x01
    1124:	20 83       	st	Z, r18
    1126:	8c 93       	st	X, r24
    1128:	26 81       	ldd	r18, Z+6	; 0x06
    112a:	37 81       	ldd	r19, Z+7	; 0x07
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	37 83       	std	Z+7, r19	; 0x07
    1132:	26 83       	std	Z+6, r18	; 0x06
    1134:	14 c0       	rjmp	.+40     	; 0x115e <fputc+0x6e>
    1136:	8b 01       	movw	r16, r22
    1138:	ec 01       	movw	r28, r24
    113a:	fb 01       	movw	r30, r22
    113c:	00 84       	ldd	r0, Z+8	; 0x08
    113e:	f1 85       	ldd	r31, Z+9	; 0x09
    1140:	e0 2d       	mov	r30, r0
    1142:	09 95       	icall
    1144:	89 2b       	or	r24, r25
    1146:	e1 f6       	brne	.-72     	; 0x1100 <fputc+0x10>
    1148:	d8 01       	movw	r26, r16
    114a:	16 96       	adiw	r26, 0x06	; 6
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	17 97       	sbiw	r26, 0x07	; 7
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	17 96       	adiw	r26, 0x07	; 7
    1156:	9c 93       	st	X, r25
    1158:	8e 93       	st	-X, r24
    115a:	16 97       	sbiw	r26, 0x06	; 6
    115c:	ce 01       	movw	r24, r28
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	08 95       	ret

00001168 <__ultoa_invert>:
    1168:	fa 01       	movw	r30, r20
    116a:	aa 27       	eor	r26, r26
    116c:	28 30       	cpi	r18, 0x08	; 8
    116e:	51 f1       	breq	.+84     	; 0x11c4 <__ultoa_invert+0x5c>
    1170:	20 31       	cpi	r18, 0x10	; 16
    1172:	81 f1       	breq	.+96     	; 0x11d4 <__ultoa_invert+0x6c>
    1174:	e8 94       	clt
    1176:	6f 93       	push	r22
    1178:	6e 7f       	andi	r22, 0xFE	; 254
    117a:	6e 5f       	subi	r22, 0xFE	; 254
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	af 4f       	sbci	r26, 0xFF	; 255
    1184:	b1 e0       	ldi	r27, 0x01	; 1
    1186:	3e d0       	rcall	.+124    	; 0x1204 <__ultoa_invert+0x9c>
    1188:	b4 e0       	ldi	r27, 0x04	; 4
    118a:	3c d0       	rcall	.+120    	; 0x1204 <__ultoa_invert+0x9c>
    118c:	67 0f       	add	r22, r23
    118e:	78 1f       	adc	r23, r24
    1190:	89 1f       	adc	r24, r25
    1192:	9a 1f       	adc	r25, r26
    1194:	a1 1d       	adc	r26, r1
    1196:	68 0f       	add	r22, r24
    1198:	79 1f       	adc	r23, r25
    119a:	8a 1f       	adc	r24, r26
    119c:	91 1d       	adc	r25, r1
    119e:	a1 1d       	adc	r26, r1
    11a0:	6a 0f       	add	r22, r26
    11a2:	71 1d       	adc	r23, r1
    11a4:	81 1d       	adc	r24, r1
    11a6:	91 1d       	adc	r25, r1
    11a8:	a1 1d       	adc	r26, r1
    11aa:	20 d0       	rcall	.+64     	; 0x11ec <__ultoa_invert+0x84>
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <__ultoa_invert+0x48>
    11ae:	68 94       	set
    11b0:	3f 91       	pop	r19
    11b2:	2a e0       	ldi	r18, 0x0A	; 10
    11b4:	26 9f       	mul	r18, r22
    11b6:	11 24       	eor	r1, r1
    11b8:	30 19       	sub	r19, r0
    11ba:	30 5d       	subi	r19, 0xD0	; 208
    11bc:	31 93       	st	Z+, r19
    11be:	de f6       	brtc	.-74     	; 0x1176 <__ultoa_invert+0xe>
    11c0:	cf 01       	movw	r24, r30
    11c2:	08 95       	ret
    11c4:	46 2f       	mov	r20, r22
    11c6:	47 70       	andi	r20, 0x07	; 7
    11c8:	40 5d       	subi	r20, 0xD0	; 208
    11ca:	41 93       	st	Z+, r20
    11cc:	b3 e0       	ldi	r27, 0x03	; 3
    11ce:	0f d0       	rcall	.+30     	; 0x11ee <__ultoa_invert+0x86>
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__ultoa_invert+0x5c>
    11d2:	f6 cf       	rjmp	.-20     	; 0x11c0 <__ultoa_invert+0x58>
    11d4:	46 2f       	mov	r20, r22
    11d6:	4f 70       	andi	r20, 0x0F	; 15
    11d8:	40 5d       	subi	r20, 0xD0	; 208
    11da:	4a 33       	cpi	r20, 0x3A	; 58
    11dc:	18 f0       	brcs	.+6      	; 0x11e4 <__ultoa_invert+0x7c>
    11de:	49 5d       	subi	r20, 0xD9	; 217
    11e0:	31 fd       	sbrc	r19, 1
    11e2:	40 52       	subi	r20, 0x20	; 32
    11e4:	41 93       	st	Z+, r20
    11e6:	02 d0       	rcall	.+4      	; 0x11ec <__ultoa_invert+0x84>
    11e8:	a9 f7       	brne	.-22     	; 0x11d4 <__ultoa_invert+0x6c>
    11ea:	ea cf       	rjmp	.-44     	; 0x11c0 <__ultoa_invert+0x58>
    11ec:	b4 e0       	ldi	r27, 0x04	; 4
    11ee:	a6 95       	lsr	r26
    11f0:	97 95       	ror	r25
    11f2:	87 95       	ror	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	ba 95       	dec	r27
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__ultoa_invert+0x86>
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 05       	cpc	r22, r1
    1200:	71 05       	cpc	r23, r1
    1202:	08 95       	ret
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	0a 2e       	mov	r0, r26
    120a:	06 94       	lsr	r0
    120c:	57 95       	ror	r21
    120e:	47 95       	ror	r20
    1210:	37 95       	ror	r19
    1212:	27 95       	ror	r18
    1214:	ba 95       	dec	r27
    1216:	c9 f7       	brne	.-14     	; 0x120a <__ultoa_invert+0xa2>
    1218:	62 0f       	add	r22, r18
    121a:	73 1f       	adc	r23, r19
    121c:	84 1f       	adc	r24, r20
    121e:	95 1f       	adc	r25, r21
    1220:	a0 1d       	adc	r26, r0
    1222:	08 95       	ret

00001224 <__prologue_saves__>:
    1224:	2f 92       	push	r2
    1226:	3f 92       	push	r3
    1228:	4f 92       	push	r4
    122a:	5f 92       	push	r5
    122c:	6f 92       	push	r6
    122e:	7f 92       	push	r7
    1230:	8f 92       	push	r8
    1232:	9f 92       	push	r9
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	ca 1b       	sub	r28, r26
    124e:	db 0b       	sbc	r29, r27
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	09 94       	ijmp

0000125c <__epilogue_restores__>:
    125c:	2a 88       	ldd	r2, Y+18	; 0x12
    125e:	39 88       	ldd	r3, Y+17	; 0x11
    1260:	48 88       	ldd	r4, Y+16	; 0x10
    1262:	5f 84       	ldd	r5, Y+15	; 0x0f
    1264:	6e 84       	ldd	r6, Y+14	; 0x0e
    1266:	7d 84       	ldd	r7, Y+13	; 0x0d
    1268:	8c 84       	ldd	r8, Y+12	; 0x0c
    126a:	9b 84       	ldd	r9, Y+11	; 0x0b
    126c:	aa 84       	ldd	r10, Y+10	; 0x0a
    126e:	b9 84       	ldd	r11, Y+9	; 0x09
    1270:	c8 84       	ldd	r12, Y+8	; 0x08
    1272:	df 80       	ldd	r13, Y+7	; 0x07
    1274:	ee 80       	ldd	r14, Y+6	; 0x06
    1276:	fd 80       	ldd	r15, Y+5	; 0x05
    1278:	0c 81       	ldd	r16, Y+4	; 0x04
    127a:	1b 81       	ldd	r17, Y+3	; 0x03
    127c:	aa 81       	ldd	r26, Y+2	; 0x02
    127e:	b9 81       	ldd	r27, Y+1	; 0x01
    1280:	ce 0f       	add	r28, r30
    1282:	d1 1d       	adc	r29, r1
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	ed 01       	movw	r28, r26
    1290:	08 95       	ret

00001292 <_exit>:
    1292:	f8 94       	cli

00001294 <__stop_program>:
    1294:	ff cf       	rjmp	.-2      	; 0x1294 <__stop_program>
