
Pong_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001288  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800120  00800120  0000133c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002478  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cb  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001570  00000000  00000000  00004bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  0000613c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bcc  00000000  00000000  0000687c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c6  00000000  00000000  00007448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00008b0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_5>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_16>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_20>
      54:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_21>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2267>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2244>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 4e 41 4d 20 48 69 75 20 59 69 20 2d      by NAM Hiu Yi -
      d4:	20 34 36 36 30 34 35 36 33 00                        46604563.

000000de <__c.2242>:
      de:	50 4f 4e 47 00                                      PONG.

000000e3 <__c.2058>:
      e3:	1b 5b 3f 32 35 68 00                                .[?25h.

000000ea <__c.2040>:
      ea:	1b 5b 32 4a 00                                      .[2J.

000000ef <__c.2025>:
      ef:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d8 e0       	ldi	r29, 0x08	; 8
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	e8 e8       	ldi	r30, 0x88	; 136
     10c:	f2 e1       	ldi	r31, 0x12	; 18
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 32       	cpi	r26, 0x20	; 32
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	22 e0       	ldi	r18, 0x02	; 2
     11c:	a0 e2       	ldi	r26, 0x20	; 32
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ab 34       	cpi	r26, 0x4B	; 75
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 b4 03 	call	0x768	; 0x768 <main>
     12e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     136:	e8 e6       	ldi	r30, 0x68	; 104
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	82 60       	ori	r24, 0x02	; 2
     13e:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     140:	8b b3       	in	r24, 0x1b	; 27
     142:	82 60       	ori	r24, 0x02	; 2
     144:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     146:	ec e6       	ldi	r30, 0x6C	; 108
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 60       	ori	r24, 0x0F	; 15
     14e:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     150:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     154:	08 95       	ret

00000156 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0) {
     156:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     15a:	18 16       	cp	r1, r24
     15c:	14 f5       	brge	.+68     	; 0x1a2 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     15e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     162:	6f b7       	in	r22, 0x3f	; 63
		cli();
     164:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++) {
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	09 c0       	rjmp	.+18     	; 0x17c <button_pushed+0x26>
			button_queue[i - 1] = button_queue[i];
     16a:	f9 01       	movw	r30, r18
     16c:	ef 5d       	subi	r30, 0xDF	; 223
     16e:	fe 4f       	sbci	r31, 0xFE	; 254
     170:	40 81       	ld	r20, Z
     172:	f9 01       	movw	r30, r18
     174:	e0 5e       	subi	r30, 0xE0	; 224
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++) {
     17a:	9f 5f       	subi	r25, 0xFF	; 255
     17c:	29 2f       	mov	r18, r25
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <__data_end>
     184:	04 2e       	mov	r0, r20
     186:	00 0c       	add	r0, r0
     188:	55 0b       	sbc	r21, r21
     18a:	24 17       	cp	r18, r20
     18c:	35 07       	cpc	r19, r21
     18e:	6c f3       	brlt	.-38     	; 0x16a <button_pushed+0x14>
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     190:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     194:	91 50       	subi	r25, 0x01	; 1
     196:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
		
		if (interrupts_were_enabled) {
     19a:	66 23       	and	r22, r22
     19c:	1c f4       	brge	.+6      	; 0x1a4 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     19e:	78 94       	sei
     1a0:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1a4:	08 95       	ret

000001a6 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	2f 93       	push	r18
     1b2:	3f 93       	push	r19
     1b4:	4f 93       	push	r20
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1be:	43 b1       	in	r20, 0x03	; 3
     1c0:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	26 c0       	rjmp	.+76     	; 0x212 <__vector_5+0x6c>
		if (queue_length < BUTTON_QUEUE_SIZE
     1c6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     1ca:	94 30       	cpi	r25, 0x04	; 4
     1cc:	0c f5       	brge	.+66     	; 0x210 <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     1ce:	24 2f       	mov	r18, r20
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	08 2e       	mov	r0, r24
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_5+0x34>
     1d6:	35 95       	asr	r19
     1d8:	27 95       	ror	r18
     1da:	0a 94       	dec	r0
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <__vector_5+0x30>
     1de:	20 ff       	sbrs	r18, 0
     1e0:	17 c0       	rjmp	.+46     	; 0x210 <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin))) {
     1e2:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <last_button_state>
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	08 2e       	mov	r0, r24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__vector_5+0x4a>
     1ec:	35 95       	asr	r19
     1ee:	27 95       	ror	r18
     1f0:	0a 94       	dec	r0
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <__vector_5+0x46>
     1f4:	20 fd       	sbrc	r18, 0
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <__vector_5+0x6a>
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1f8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	9e 0f       	add	r25, r30
     200:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
     204:	0e 2e       	mov	r0, r30
     206:	00 0c       	add	r0, r0
     208:	ff 0b       	sbc	r31, r31
     20a:	ef 5d       	subi	r30, 0xDF	; 223
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     210:	8f 5f       	subi	r24, 0xFF	; 255
     212:	84 30       	cpi	r24, 0x04	; 4
     214:	c0 f2       	brcs	.-80     	; 0x1c6 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     216:	40 93 25 01 	sts	0x0125, r20	; 0x800125 <last_button_state>
}
     21a:	ff 91       	pop	r31
     21c:	ef 91       	pop	r30
     21e:	9f 91       	pop	r25
     220:	8f 91       	pop	r24
     222:	4f 91       	pop	r20
     224:	3f 91       	pop	r19
     226:	2f 91       	pop	r18
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti

00000232 <initialise_display>:
    0b0111001111101111, // 9
};

// Initialise the display for the board, this creates the display
// for an empty board.
void initialise_display(void) {
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	28 97       	sbiw	r28, 0x08	; 8
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     24a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	09 c0       	rjmp	.+18     	; 0x266 <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BORDER;
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e8 0f       	add	r30, r24
     25e:	f9 1f       	adc	r31, r25
     260:	25 e3       	ldi	r18, 0x35	; 53
     262:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	91 05       	cpc	r25, r1
     26a:	a4 f3       	brlt	.-24     	; 0x254 <initialise_display+0x22>
     26c:	01 e0       	ldi	r16, 0x01	; 1
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	08 c0       	rjmp	.+16     	; 0x282 <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     272:	be 01       	movw	r22, r28
     274:	6f 5f       	subi	r22, 0xFF	; 255
     276:	7f 4f       	sbci	r23, 0xFF	; 255
     278:	80 2f       	mov	r24, r16
     27a:	0e 94 ba 02 	call	0x574	; 0x574 <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
     27e:	0f 5f       	subi	r16, 0xFF	; 255
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	02 30       	cpi	r16, 0x02	; 2
     284:	11 05       	cpc	r17, r1
     286:	ac f3       	brlt	.-22     	; 0x272 <initialise_display+0x40>
     288:	0e e0       	ldi	r16, 0x0E	; 14
     28a:	10 e0       	ldi	r17, 0x00	; 0
     28c:	08 c0       	rjmp	.+16     	; 0x29e <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     28e:	be 01       	movw	r22, r28
     290:	6f 5f       	subi	r22, 0xFF	; 255
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	80 2f       	mov	r24, r16
     296:	0e 94 ba 02 	call	0x574	; 0x574 <ledmatrix_update_column>
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
     29a:	0f 5f       	subi	r16, 0xFF	; 255
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	0f 30       	cpi	r16, 0x0F	; 15
     2a0:	11 05       	cpc	r17, r1
     2a2:	ac f3       	brlt	.-22     	; 0x28e <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
}
     2a4:	28 96       	adiw	r28, 0x08	; 8
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <show_start_screen>:

void show_start_screen(void) {
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	28 97       	sbiw	r28, 0x08	; 8
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     2d0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	29 c0       	rjmp	.+82     	; 0x32a <show_start_screen+0x70>
		col_data = pong_display[col];
     2d8:	e1 2f       	mov	r30, r17
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	e2 5f       	subi	r30, 0xF2	; 242
     2de:	fe 4f       	sbci	r31, 0xFE	; 254
     2e0:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     2e2:	90 ff       	sbrs	r25, 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <show_start_screen+0x30>
			colour = COLOUR_RED;
     2e6:	2f e0       	ldi	r18, 0x0F	; 15
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <show_start_screen+0x32>
		} else {
			colour = COLOUR_GREEN;
     2ea:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     2ec:	87 e0       	ldi	r24, 0x07	; 7
     2ee:	13 c0       	rjmp	.+38     	; 0x316 <show_start_screen+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     2f0:	99 23       	and	r25, r25
     2f2:	44 f4       	brge	.+16     	; 0x304 <show_start_screen+0x4a>
				column_colour_data[i] = colour;
     2f4:	e1 e0       	ldi	r30, 0x01	; 1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ec 0f       	add	r30, r28
     2fa:	fd 1f       	adc	r31, r29
     2fc:	e8 0f       	add	r30, r24
     2fe:	f1 1d       	adc	r31, r1
     300:	20 83       	st	Z, r18
     302:	07 c0       	rjmp	.+14     	; 0x312 <show_start_screen+0x58>
			} else {
				column_colour_data[i] = 0;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     312:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     314:	81 50       	subi	r24, 0x01	; 1
     316:	81 11       	cpse	r24, r1
     318:	eb cf       	rjmp	.-42     	; 0x2f0 <show_start_screen+0x36>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     31a:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     31c:	be 01       	movw	r22, r28
     31e:	6f 5f       	subi	r22, 0xFF	; 255
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	81 2f       	mov	r24, r17
     324:	0e 94 ba 02 	call	0x574	; 0x574 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     328:	1f 5f       	subi	r17, 0xFF	; 255
     32a:	10 31       	cpi	r17, 0x10	; 16
     32c:	a8 f2       	brcs	.-86     	; 0x2d8 <show_start_screen+0x1e>
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
		// Update pong ball colour
	ledmatrix_update_pixel(START_SCREEN_BALL_X, START_SCREEN_BALL_Y, MATRIX_COLOUR_BALL);
     32e:	4f e0       	ldi	r20, 0x0F	; 15
     330:	64 e0       	ldi	r22, 0x04	; 4
     332:	8e e0       	ldi	r24, 0x0E	; 14
     334:	0e 94 9b 02 	call	0x536	; 0x536 <ledmatrix_update_pixel>
}
     338:	28 96       	adiw	r28, 0x08	; 8
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	08 95       	ret

0000034c <update_start_screen>:

// Update dynamic start screen based on the frame number (0-11)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number) {
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	68 97       	sbiw	r28, 0x18	; 24
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
	
	if (frame_number < 0 || frame_number > 11) {
     362:	8c 30       	cpi	r24, 0x0C	; 12
     364:	08 f0       	brcs	.+2      	; 0x368 <update_start_screen+0x1c>
     366:	64 c0       	rjmp	.+200    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	17 c0       	rjmp	.+46     	; 0x39a <update_start_screen+0x4e>
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
			column_colour_data[col][row] = 0;
     36c:	e2 2f       	mov	r30, r18
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	4c 0f       	add	r20, r28
     382:	5d 1f       	adc	r21, r29
     384:	e4 0f       	add	r30, r20
     386:	f5 1f       	adc	r31, r21
     388:	e9 0f       	add	r30, r25
     38a:	f1 1d       	adc	r31, r1
     38c:	10 82       	st	Z, r1
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
     38e:	9f 5f       	subi	r25, 0xFF	; 255
     390:	01 c0       	rjmp	.+2      	; 0x394 <update_start_screen+0x48>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	98 30       	cpi	r25, 0x08	; 8
     396:	50 f3       	brcs	.-44     	; 0x36c <update_start_screen+0x20>
		return;
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	23 30       	cpi	r18, 0x03	; 3
     39c:	d0 f3       	brcs	.-12     	; 0x392 <update_start_screen+0x46>
			column_colour_data[col][row] = 0;
		}
	}
	
	// Set the middle paddle pixel
	column_colour_data[1][6] = MATRIX_COLOUR_PLAYER;
     39e:	90 ef       	ldi	r25, 0xF0	; 240
     3a0:	9f 87       	std	Y+15, r25	; 0x0f
	column_colour_data[1][1] = MATRIX_COLOUR_PLAYER;
     3a2:	9a 87       	std	Y+10, r25	; 0x0a
	
	// Set the edge paddle pixel depending on frame number
	if (frame_number < 3 || frame_number >= 9) {
     3a4:	9d ef       	ldi	r25, 0xFD	; 253
     3a6:	98 0f       	add	r25, r24
     3a8:	96 30       	cpi	r25, 0x06	; 6
     3aa:	18 f0       	brcs	.+6      	; 0x3b2 <update_start_screen+0x66>
		column_colour_data[2][6] = MATRIX_COLOUR_PLAYER;
     3ac:	90 ef       	ldi	r25, 0xF0	; 240
     3ae:	9f 8b       	std	Y+23, r25	; 0x17
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <update_start_screen+0x6a>
	} else {
		column_colour_data[0][6] = MATRIX_COLOUR_PLAYER;
     3b2:	90 ef       	ldi	r25, 0xF0	; 240
     3b4:	9f 83       	std	Y+7, r25	; 0x07
	}
	if (frame_number < 6) {
     3b6:	86 30       	cpi	r24, 0x06	; 6
     3b8:	18 f4       	brcc	.+6      	; 0x3c0 <update_start_screen+0x74>
		column_colour_data[0][1] = MATRIX_COLOUR_PLAYER;
     3ba:	90 ef       	ldi	r25, 0xF0	; 240
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <update_start_screen+0x78>
	} else {
		column_colour_data[2][1] = MATRIX_COLOUR_PLAYER;
     3c0:	90 ef       	ldi	r25, 0xF0	; 240
     3c2:	9a 8b       	std	Y+18, r25	; 0x12
	}
	
	// Set the ball pixel depending on frame number
	if (frame_number == 5 || frame_number == 11) {
     3c4:	85 30       	cpi	r24, 0x05	; 5
     3c6:	11 f0       	breq	.+4      	; 0x3cc <update_start_screen+0x80>
     3c8:	8b 30       	cpi	r24, 0x0B	; 11
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <update_start_screen+0x86>
		column_colour_data[1][5] = MATRIX_COLOUR_BALL;
     3cc:	8f e0       	ldi	r24, 0x0F	; 15
     3ce:	8e 87       	std	Y+14, r24	; 0x0e
     3d0:	15 c0       	rjmp	.+42     	; 0x3fc <update_start_screen+0xb0>
	} else if (frame_number == 0 || frame_number == 4 || frame_number == 6
     3d2:	88 23       	and	r24, r24
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <update_start_screen+0x96>
     3d6:	84 30       	cpi	r24, 0x04	; 4
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <update_start_screen+0x96>
     3da:	86 30       	cpi	r24, 0x06	; 6
     3dc:	11 f0       	breq	.+4      	; 0x3e2 <update_start_screen+0x96>
			|| frame_number == 10) {
     3de:	8a 30       	cpi	r24, 0x0A	; 10
     3e0:	19 f4       	brne	.+6      	; 0x3e8 <update_start_screen+0x9c>
		column_colour_data[1][4] = MATRIX_COLOUR_BALL;
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	8d 87       	std	Y+13, r24	; 0x0d
     3e6:	0a c0       	rjmp	.+20     	; 0x3fc <update_start_screen+0xb0>
	} else if (frame_number == 1 || frame_number == 3 || frame_number == 7
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	31 f0       	breq	.+12     	; 0x3f8 <update_start_screen+0xac>
     3ec:	83 30       	cpi	r24, 0x03	; 3
     3ee:	21 f0       	breq	.+8      	; 0x3f8 <update_start_screen+0xac>
     3f0:	87 30       	cpi	r24, 0x07	; 7
     3f2:	11 f0       	breq	.+4      	; 0x3f8 <update_start_screen+0xac>
			|| frame_number == 9) {
     3f4:	89 30       	cpi	r24, 0x09	; 9
     3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
		column_colour_data[1][3] = MATRIX_COLOUR_BALL;
     3f8:	8f e0       	ldi	r24, 0x0F	; 15
     3fa:	8c 87       	std	Y+12, r24	; 0x0c
     3fc:	10 e0       	ldi	r17, 0x00	; 0
     3fe:	16 c0       	rjmp	.+44     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
     400:	8f e0       	ldi	r24, 0x0F	; 15
     402:	8b 87       	std	Y+11, r24	; 0x0b
     404:	fb cf       	rjmp	.-10     	; 0x3fc <update_start_screen+0xb0>
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
     406:	61 2f       	mov	r22, r17
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	66 0f       	add	r22, r22
     40c:	77 1f       	adc	r23, r23
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	66 0f       	add	r22, r22
     414:	77 1f       	adc	r23, r23
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	8c 0f       	add	r24, r28
     41c:	9d 1f       	adc	r25, r29
     41e:	68 0f       	add	r22, r24
     420:	79 1f       	adc	r23, r25
     422:	8d e0       	ldi	r24, 0x0D	; 13
     424:	81 0f       	add	r24, r17
     426:	0e 94 ba 02 	call	0x574	; 0x574 <ledmatrix_update_column>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     42a:	1f 5f       	subi	r17, 0xFF	; 255
     42c:	13 30       	cpi	r17, 0x03	; 3
     42e:	58 f3       	brcs	.-42     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
	}
}
     430:	68 96       	adiw	r28, 0x18	; 24
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	08 95       	ret

00000444 <update_square_colour>:
// provided object
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	
	switch (object) {
     444:	41 30       	cpi	r20, 0x01	; 1
     446:	31 f0       	breq	.+12     	; 0x454 <update_square_colour+0x10>
     448:	42 30       	cpi	r20, 0x02	; 2
     44a:	11 f0       	breq	.+4      	; 0x450 <update_square_colour+0xc>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	03 c0       	rjmp	.+6      	; 0x456 <update_square_colour+0x12>
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
			break;
		case BALL:
			colour = MATRIX_COLOUR_BALL;
     450:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     452:	01 c0       	rjmp	.+2      	; 0x456 <update_square_colour+0x12>
	switch (object) {
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
     454:	40 ef       	ldi	r20, 0xF0	; 240
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y + MATRIX_Y_OFFSET, colour);
     456:	8e 5f       	subi	r24, 0xFE	; 254
     458:	0e 94 9b 02 	call	0x536	; 0x536 <ledmatrix_update_pixel>
     45c:	08 95       	ret

0000045e <draw_player_paddle>:
	int8_t player_y = player_y_coordinates[player_to_draw];

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
		update_square_colour(player_x, y, EMPTY_SQUARE);
	}
}
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	e2 5e       	subi	r30, 0xE2	; 226
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	f0 80       	ld	r15, Z
     472:	fc 01       	movw	r30, r24
     474:	ea 5d       	subi	r30, 0xDA	; 218
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	00 81       	ld	r16, Z
     47a:	00 2e       	mov	r0, r16
     47c:	00 0c       	add	r0, r0
     47e:	11 0b       	sbc	r17, r17
     480:	e8 01       	movw	r28, r16
     482:	06 c0       	rjmp	.+12     	; 0x490 <draw_player_paddle+0x32>
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	6c 2f       	mov	r22, r28
     488:	8f 2d       	mov	r24, r15
     48a:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	c8 01       	movw	r24, r16
     492:	02 96       	adiw	r24, 0x02	; 2
     494:	c8 17       	cp	r28, r24
     496:	d9 07       	cpc	r29, r25
     498:	ac f3       	brlt	.-22     	; 0x484 <draw_player_paddle+0x26>
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	08 95       	ret

000004a6 <initialise_game>:
     4a6:	0e 94 19 01 	call	0x232	; 0x232 <initialise_display>
     4aa:	e6 e2       	ldi	r30, 0x26	; 38
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	80 83       	st	Z, r24
     4b2:	81 83       	std	Z+1, r24	; 0x01
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 2f 02 	call	0x45e	; 0x45e <draw_player_paddle>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 2f 02 	call	0x45e	; 0x45e <draw_player_paddle>
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <ball_y>
     4c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ball_x>
     4ca:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <ball_x>
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <ball_y>
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <ball_x_direction>
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ball_y_direction>
     4e6:	42 e0       	ldi	r20, 0x02	; 2
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
     4f0:	08 95       	ret

000004f2 <move_player_paddle>:

// Try and move the selected player's y coordinate by the amount specified.
// For example, to move player 1's paddle up one space, call the function
// as `move_player(PLAYER_1, 1)`. Use `-1` instead to move the paddle down. No
// pixels of the player paddles should be allowed to move off the display.
void move_player_paddle(int8_t player, int8_t direction) {
     4f2:	08 95       	ret

000004f4 <update_ball_position>:
	// YOUR CODE HERE

}

// Update ball position based on current x direction and y direction of ball
void update_ball_position(void) {
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
	
	// Determine new ball coordinates
	int8_t new_ball_x = ball_x + ball_x_direction;
     4f8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ball_x>
     4fc:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <ball_x_direction>
     500:	c8 0f       	add	r28, r24
	int8_t new_ball_y = ball_y + ball_y_direction;
     502:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <ball_y>
     506:	d0 91 2d 01 	lds	r29, 0x012D	; 0x80012d <ball_y_direction>
     50a:	d6 0f       	add	r29, r22
	
	// Erase old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
	
	// Assign new ball coordinates
	ball_x = new_ball_x;
     512:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <ball_x>
	ball_y = new_ball_y;
     516:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <ball_y>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
     51a:	42 e0       	ldi	r20, 0x02	; 2
     51c:	6d 2f       	mov	r22, r29
     51e:	8c 2f       	mov	r24, r28
     520:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <is_game_over>:
// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void) {
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
}
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	08 95       	ret

0000052e <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     52e:	80 e8       	ldi	r24, 0x80	; 128
     530:	0e 94 0d 05 	call	0xa1a	; 0xa1a <spi_setup_master>
     534:	08 95       	ret

00000536 <ledmatrix_update_pixel>:
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	80 31       	cpi	r24, 0x10	; 16
     53e:	b0 f4       	brcc	.+44     	; 0x56c <ledmatrix_update_pixel+0x36>
     540:	68 30       	cpi	r22, 0x08	; 8
     542:	a0 f4       	brcc	.+40     	; 0x56c <ledmatrix_update_pixel+0x36>
     544:	14 2f       	mov	r17, r20
     546:	c6 2f       	mov	r28, r22
     548:	d8 2f       	mov	r29, r24
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     550:	6c 2f       	mov	r22, r28
     552:	67 70       	andi	r22, 0x07	; 7
     554:	80 e1       	ldi	r24, 0x10	; 16
     556:	68 9f       	mul	r22, r24
     558:	90 01       	movw	r18, r0
     55a:	11 24       	eor	r1, r1
     55c:	8d 2f       	mov	r24, r29
     55e:	8f 70       	andi	r24, 0x0F	; 15
     560:	82 2b       	or	r24, r18
     562:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     566:	81 2f       	mov	r24, r17
     568:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	08 95       	ret

00000574 <ledmatrix_update_column>:
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	80 31       	cpi	r24, 0x10	; 16
     57c:	a0 f4       	brcc	.+40     	; 0x5a6 <ledmatrix_update_column+0x32>
     57e:	8b 01       	movw	r16, r22
     580:	c8 2f       	mov	r28, r24
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     588:	8c 2f       	mov	r24, r28
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     590:	c0 e0       	ldi	r28, 0x00	; 0
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <ledmatrix_update_column+0x2e>
     594:	f8 01       	movw	r30, r16
     596:	ec 0f       	add	r30, r28
     598:	f1 1d       	adc	r31, r1
     59a:	80 81       	ld	r24, Z
     59c:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     5a0:	cf 5f       	subi	r28, 0xFF	; 255
     5a2:	c8 30       	cpi	r28, 0x08	; 8
     5a4:	b8 f3       	brcs	.-18     	; 0x594 <ledmatrix_update_column+0x20>
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     5ae:	8f e0       	ldi	r24, 0x0F	; 15
     5b0:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_send_byte>
     5b4:	08 95       	ret

000005b6 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     5b6:	0e 94 97 02 	call	0x52e	; 0x52e <ledmatrix_setup>
	init_button_interrupts();
     5ba:	0e 94 9b 00 	call	0x136	; 0x136 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	7b e4       	ldi	r23, 0x4B	; 75
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 25 04 	call	0x84a	; 0x84a <init_serial_stdio>
	
	init_timer0();
     5cc:	0e 94 62 05 	call	0xac4	; 0xac4 <init_timer0>
	
	// Turn on global interrupts
	sei();
     5d0:	78 94       	sei
     5d2:	08 95       	ret

000005d4 <start_screen>:
}

void start_screen(void) {
     5d4:	8f 92       	push	r8
     5d6:	9f 92       	push	r9
     5d8:	af 92       	push	r10
     5da:	bf 92       	push	r11
     5dc:	cf 92       	push	r12
     5de:	df 92       	push	r13
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	cf 93       	push	r28
	// Start Screen (Level 1: 4 marks)
	// Clear terminal screen and output a message
	clear_terminal();
     5e6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <clear_terminal>
	show_cursor();
     5ea:	0e 94 59 05 	call	0xab2	; 0xab2 <show_cursor>
	move_terminal_cursor(10,10);
     5ee:	6a e0       	ldi	r22, 0x0A	; 10
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	8a e0       	ldi	r24, 0x0A	; 10
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <move_terminal_cursor>
	printf_P(PSTR("PONG"));
     5fa:	8e ed       	ldi	r24, 0xDE	; 222
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
	move_terminal_cursor(10,12);
     606:	6c e0       	ldi	r22, 0x0C	; 12
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	8a e0       	ldi	r24, 0x0A	; 10
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 A2 by NAM Hiu Yi - 46604563"));
     612:	84 eb       	ldi	r24, 0xB4	; 180
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     61e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     622:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_current_time>
     626:	4b 01       	movw	r8, r22
     628:	5c 01       	movw	r10, r24
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
	
	uint8_t frame_number = 0;
     632:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     634:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <serial_input_available>
     638:	88 23       	and	r24, r24
     63a:	39 f0       	breq	.+14     	; 0x64a <start_screen+0x76>
			serial_input = fgetc(stdin);
     63c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <__iob>
     640:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__iob+0x1>
     644:	0e 94 16 06 	call	0xc2c	; 0xc2c <fgetc>
     648:	01 c0       	rjmp	.+2      	; 0x64c <start_screen+0x78>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     64a:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     64c:	83 37       	cpi	r24, 0x73	; 115
     64e:	19 f1       	breq	.+70     	; 0x696 <start_screen+0xc2>
     650:	83 35       	cpi	r24, 0x53	; 83
     652:	09 f1       	breq	.+66     	; 0x696 <start_screen+0xc2>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     654:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     658:	8f 3f       	cpi	r24, 0xFF	; 255
     65a:	e9 f4       	brne	.+58     	; 0x696 <start_screen+0xc2>
			break;
		}

		current_time = get_current_time();
     65c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_current_time>
     660:	6b 01       	movw	r12, r22
     662:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > 500) {
     664:	ab 01       	movw	r20, r22
     666:	bc 01       	movw	r22, r24
     668:	48 19       	sub	r20, r8
     66a:	59 09       	sbc	r21, r9
     66c:	6a 09       	sbc	r22, r10
     66e:	7b 09       	sbc	r23, r11
     670:	45 3f       	cpi	r20, 0xF5	; 245
     672:	51 40       	sbci	r21, 0x01	; 1
     674:	61 05       	cpc	r22, r1
     676:	71 05       	cpc	r23, r1
     678:	e8 f2       	brcs	.-70     	; 0x634 <start_screen+0x60>
			update_start_screen(frame_number);
     67a:	8c 2f       	mov	r24, r28
     67c:	0e 94 a6 01 	call	0x34c	; 0x34c <update_start_screen>
			frame_number = (frame_number + 1) % 12;
     680:	8c 2f       	mov	r24, r28
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	6c e0       	ldi	r22, 0x0C	; 12
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__divmodhi4>
     68e:	c8 2f       	mov	r28, r24
			last_screen_update = current_time;
     690:	46 01       	movw	r8, r12
     692:	57 01       	movw	r10, r14
     694:	cf cf       	rjmp	.-98     	; 0x634 <start_screen+0x60>
		}
	}
}
     696:	cf 91       	pop	r28
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	bf 90       	pop	r11
     6a2:	af 90       	pop	r10
     6a4:	9f 90       	pop	r9
     6a6:	8f 90       	pop	r8
     6a8:	08 95       	ret

000006aa <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     6aa:	0e 94 50 05 	call	0xaa0	; 0xaa0 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     6ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     6b2:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
	clear_serial_input_buffer();
     6b6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <clear_serial_input_buffer>
     6ba:	08 95       	ret

000006bc <play_game>:
}

void play_game(void) {
     6bc:	8f 92       	push	r8
     6be:	9f 92       	push	r9
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
	
	uint32_t last_ball_move_time, current_time;
	uint8_t btn; // The button pushed
	
	last_ball_move_time = get_current_time();
     6cc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_current_time>
     6d0:	4b 01       	movw	r8, r22
     6d2:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while (!is_game_over()) {
     6d4:	1b c0       	rjmp	.+54     	; 0x70c <play_game+0x50>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     6d6:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
		
		if (btn == BUTTON3_PUSHED) {
     6da:	83 30       	cpi	r24, 0x03	; 3
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <play_game+0x2a>
			// If button 3 is pushed, move player 1 one space up
			// YOU WILL NEED TO IMPLEMENT THIS FUNCTION
			move_player_paddle(PLAYER_1, UP);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <move_player_paddle>
		}
		
		current_time = get_current_time();
     6e6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_current_time>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
		if (current_time >= last_ball_move_time + 500) {
     6ee:	d5 01       	movw	r26, r10
     6f0:	c4 01       	movw	r24, r8
     6f2:	8c 50       	subi	r24, 0x0C	; 12
     6f4:	9e 4f       	sbci	r25, 0xFE	; 254
     6f6:	af 4f       	sbci	r26, 0xFF	; 255
     6f8:	bf 4f       	sbci	r27, 0xFF	; 255
     6fa:	c8 16       	cp	r12, r24
     6fc:	d9 06       	cpc	r13, r25
     6fe:	ea 06       	cpc	r14, r26
     700:	fb 06       	cpc	r15, r27
     702:	20 f0       	brcs	.+8      	; 0x70c <play_game+0x50>
			// 500ms (0.5 second) has passed since the last time we move the
			// ball, so update the position of the ball based on current x
			// direction and y direction
			update_ball_position();
     704:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <update_ball_position>
			
			// Update the most recent time the ball was moved
			last_ball_move_time = current_time;
     708:	46 01       	movw	r8, r12
     70a:	57 01       	movw	r10, r14
	uint8_t btn; // The button pushed
	
	last_ball_move_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over()) {
     70c:	0e 94 95 02 	call	0x52a	; 0x52a <is_game_over>
     710:	88 23       	and	r24, r24
     712:	09 f3       	breq	.-62     	; 0x6d6 <play_game+0x1a>
			// Update the most recent time the ball was moved
			last_ball_move_time = current_time;
		}
	}
	// We get here if the game is over.
}
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	af 90       	pop	r10
     720:	9f 90       	pop	r9
     722:	8f 90       	pop	r8
     724:	08 95       	ret

00000726 <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
     726:	6e e0       	ldi	r22, 0x0E	; 14
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	8a e0       	ldi	r24, 0x0A	; 10
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     732:	8a ea       	ldi	r24, 0xAA	; 170
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
	move_terminal_cursor(10,15);
     73e:	6f e0       	ldi	r22, 0x0F	; 15
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	8a e0       	ldi	r24, 0x0A	; 10
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 3f 05 	call	0xa7e	; 0xa7e <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     74a:	8c e7       	ldi	r24, 0x7C	; 124
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED) {
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
     762:	8f 3f       	cpi	r24, 0xFF	; 255
     764:	e1 f3       	breq	.-8      	; 0x75e <handle_game_over+0x38>
		; // wait
	}
}
     766:	08 95       	ret

00000768 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     768:	0e 94 db 02 	call	0x5b6	; 0x5b6 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     76c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
     770:	0e 94 55 03 	call	0x6aa	; 0x6aa <new_game>
		play_game();
     774:	0e 94 5e 03 	call	0x6bc	; 0x6bc <play_game>
		handle_game_over();
     778:	0e 94 93 03 	call	0x726	; 0x726 <handle_game_over>
     77c:	f9 cf       	rjmp	.-14     	; 0x770 <main+0x8>

0000077e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     77e:	cf 93       	push	r28
     780:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n') {
     782:	8a 30       	cpi	r24, 0x0A	; 10
     784:	19 f4       	brne	.+6      	; 0x78c <uart_put_char+0xe>
		uart_put_char('\r', stream);
     786:	8d e0       	ldi	r24, 0x0D	; 13
     788:	0e 94 bf 03 	call	0x77e	; 0x77e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     78c:	9f b7       	in	r25, 0x3f	; 63
     78e:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     790:	02 c0       	rjmp	.+4      	; 0x796 <uart_put_char+0x18>
		if (!interrupts_enabled) {
     792:	99 23       	and	r25, r25
     794:	29 f1       	breq	.+74     	; 0x7e0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     796:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     79a:	8f 3f       	cpi	r24, 0xFF	; 255
     79c:	d1 f3       	breq	.-12     	; 0x792 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     79e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     7a0:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	8e 0f       	add	r24, r30
     7a8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <out_insert_pos>
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	ed 5c       	subi	r30, 0xCD	; 205
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     7b4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE) {
     7be:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <out_insert_pos>
     7c2:	8f 3f       	cpi	r24, 0xFF	; 255
     7c4:	11 f4       	brne	.+4      	; 0x7ca <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     7c6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     7ca:	e1 ec       	ldi	r30, 0xC1	; 193
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	80 62       	ori	r24, 0x20	; 32
     7d2:	80 83       	st	Z, r24
	if (interrupts_enabled) {
     7d4:	99 23       	and	r25, r25
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <uart_put_char+0x68>
		sei();
     7d8:	78 94       	sei
	}
	return 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if (!interrupts_enabled) {
			return 1;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled) {
		sei();
	}
	return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
}
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0) {
     7ee:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     7f2:	88 23       	and	r24, r24
     7f4:	e1 f3       	breq	.-8      	; 0x7ee <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     7f6:	2f b7       	in	r18, 0x3f	; 63
     7f8:	20 78       	andi	r18, 0x80	; 128
	cli();
     7fa:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0) {
     7fc:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <input_insert_pos>
     800:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <bytes_in_input_buffer>
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	83 1b       	sub	r24, r19
     808:	91 09       	sbc	r25, r1
     80a:	5a f4       	brpl	.+22     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     80c:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     810:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	e8 1b       	sub	r30, r24
     818:	f1 09       	sbc	r31, r1
     81a:	ed 5b       	subi	r30, 0xBD	; 189
     81c:	fd 4f       	sbci	r31, 0xFD	; 253
     81e:	80 81       	ld	r24, Z
     820:	0a c0       	rjmp	.+20     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     822:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     826:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	e8 1b       	sub	r30, r24
     82e:	f1 09       	sbc	r31, r1
     830:	ed 5c       	subi	r30, 0xCD	; 205
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     836:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <bytes_in_input_buffer>
     83a:	91 50       	subi	r25, 0x01	; 1
     83c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <bytes_in_input_buffer>
	if (interrupts_enabled) {
     840:	22 23       	and	r18, r18
     842:	09 f0       	breq	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		sei();
     844:	78 94       	sei
	}	
	return c;
}
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret

0000084a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     84a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <out_insert_pos>
	bytes_in_out_buffer = 0;
     84e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <bytes_in_out_buffer>
	input_insert_pos = 0;
     852:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
	bytes_in_input_buffer = 0;
     856:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <bytes_in_input_buffer>
	input_overrun = 0;
     85a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     85e:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	aa 1f       	adc	r26, r26
     86c:	bb 1f       	adc	r27, r27
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	9c 01       	movw	r18, r24
     878:	ad 01       	movw	r20, r26
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	44 1f       	adc	r20, r20
     880:	55 1f       	adc	r21, r21
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	72 e1       	ldi	r23, 0x12	; 18
     886:	8a e7       	ldi	r24, 0x7A	; 122
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__divmodsi4>
     88e:	ba 01       	movw	r22, r20
     890:	a9 01       	movw	r20, r18
     892:	4f 5f       	subi	r20, 0xFF	; 255
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	6f 4f       	sbci	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	db 01       	movw	r26, r22
     89c:	ca 01       	movw	r24, r20
     89e:	1a f4       	brpl	.+6      	; 0x8a6 <init_serial_stdio+0x5c>
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	a1 1d       	adc	r26, r1
     8a4:	b1 1d       	adc	r27, r1
     8a6:	b5 95       	asr	r27
     8a8:	a7 95       	ror	r26
     8aa:	97 95       	ror	r25
     8ac:	87 95       	ror	r24
     8ae:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     8b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     8b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     8b8:	e1 ec       	ldi	r30, 0xC1	; 193
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	88 e1       	ldi	r24, 0x18	; 24
     8be:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
     8c0:	80 81       	ld	r24, Z
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     8c6:	e5 e4       	ldi	r30, 0x45	; 69
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	93 83       	std	Z+3, r25	; 0x03
     8d0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
     8d6:	08 95       	ret

000008d8 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return bytes_in_input_buffer != 0;
     8d8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <bytes_in_input_buffer>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	91 11       	cpse	r25, r1
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <serial_input_available+0xc>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
}
     8e4:	08 95       	ret

000008e6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     8e6:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
	bytes_in_input_buffer = 0;
     8ea:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <bytes_in_input_buffer>
     8ee:	08 95       	ret

000008f0 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	2f 93       	push	r18
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0) {
     904:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     908:	88 23       	and	r24, r24
     90a:	29 f1       	breq	.+74     	; 0x956 <__stack+0x57>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
     90c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <out_insert_pos>
     910:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <bytes_in_out_buffer>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	82 1b       	sub	r24, r18
     918:	91 09       	sbc	r25, r1
     91a:	5a f4       	brpl	.+22     	; 0x932 <__stack+0x33>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     91c:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     920:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	e8 1b       	sub	r30, r24
     928:	f1 09       	sbc	r31, r1
     92a:	ee 5c       	subi	r30, 0xCE	; 206
     92c:	fd 4f       	sbci	r31, 0xFD	; 253
     92e:	90 81       	ld	r25, Z
     930:	0a c0       	rjmp	.+20     	; 0x946 <__stack+0x47>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     932:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     936:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	e8 1b       	sub	r30, r24
     93e:	f1 09       	sbc	r31, r1
     940:	ed 5c       	subi	r30, 0xCD	; 205
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     946:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     950:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
     956:	e1 ec       	ldi	r30, 0xC1	; 193
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7d       	andi	r24, 0xDF	; 223
     95e:	80 83       	st	Z, r24
	}
}
     960:	ff 91       	pop	r31
     962:	ef 91       	pop	r30
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	cf 93       	push	r28
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     998:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     99c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <do_echo>
     9a0:	88 23       	and	r24, r24
     9a2:	49 f0       	breq	.+18     	; 0x9b6 <__vector_20+0x42>
     9a4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	29 f0       	breq	.+10     	; 0x9b6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	8c 2f       	mov	r24, r28
     9b2:	0e 94 bf 03 	call	0x77e	; 0x77e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     9b6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     9ba:	80 31       	cpi	r24, 0x10	; 16
     9bc:	20 f0       	brcs	.+8      	; 0x9c6 <__vector_20+0x52>
		input_overrun = 1;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <input_overrun>
     9c4:	18 c0       	rjmp	.+48     	; 0x9f6 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     9c6:	cd 30       	cpi	r28, 0x0D	; 13
     9c8:	09 f4       	brne	.+2      	; 0x9cc <__vector_20+0x58>
			c = '\n';
     9ca:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     9cc:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	8e 0f       	add	r24, r30
     9d4:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <input_insert_pos>
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ed 5c       	subi	r30, 0xCD	; 205
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     9e0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
     9ea:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <input_insert_pos>
     9ee:	80 31       	cpi	r24, 0x10	; 16
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     9f2:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
		}
	}
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	cf 91       	pop	r28
     9fc:	bf 91       	pop	r27
     9fe:	af 91       	pop	r26
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	7f 91       	pop	r23
     a06:	6f 91       	pop	r22
     a08:	5f 91       	pop	r21
     a0a:	4f 91       	pop	r20
     a0c:	3f 91       	pop	r19
     a0e:	2f 91       	pop	r18
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     a1a:	94 b1       	in	r25, 0x04	; 4
     a1c:	90 6b       	ori	r25, 0xB0	; 176
     a1e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
     a20:	95 b1       	in	r25, 0x05	; 5
     a22:	90 61       	ori	r25, 0x10	; 16
     a24:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     a26:	90 e5       	ldi	r25, 0x50	; 80
     a28:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider) {
     a2a:	88 30       	cpi	r24, 0x08	; 8
     a2c:	21 f0       	breq	.+8      	; 0xa36 <spi_setup_master+0x1c>
     a2e:	80 32       	cpi	r24, 0x20	; 32
     a30:	11 f0       	breq	.+4      	; 0xa36 <spi_setup_master+0x1c>
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	19 f4       	brne	.+6      	; 0xa3c <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	9d bd       	out	0x2d, r25	; 45
			break;
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     a3c:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider) {
     a3e:	80 32       	cpi	r24, 0x20	; 32
     a40:	69 f0       	breq	.+26     	; 0xa5c <spi_setup_master+0x42>
     a42:	28 f4       	brcc	.+10     	; 0xa4e <spi_setup_master+0x34>
     a44:	88 30       	cpi	r24, 0x08	; 8
     a46:	71 f0       	breq	.+28     	; 0xa64 <spi_setup_master+0x4a>
     a48:	80 31       	cpi	r24, 0x10	; 16
     a4a:	61 f0       	breq	.+24     	; 0xa64 <spi_setup_master+0x4a>
     a4c:	0e c0       	rjmp	.+28     	; 0xa6a <spi_setup_master+0x50>
     a4e:	80 34       	cpi	r24, 0x40	; 64
     a50:	29 f0       	breq	.+10     	; 0xa5c <spi_setup_master+0x42>
     a52:	80 38       	cpi	r24, 0x80	; 128
     a54:	51 f4       	brne	.+20     	; 0xa6a <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
     a56:	8c b5       	in	r24, 0x2c	; 44
     a58:	81 60       	ori	r24, 0x01	; 1
     a5a:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
     a5c:	8c b5       	in	r24, 0x2c	; 44
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	8c bd       	out	0x2c, r24	; 44
			break;
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
     a64:	8c b5       	in	r24, 0x2c	; 44
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
     a6a:	85 b1       	in	r24, 0x05	; 5
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	85 b9       	out	0x05, r24	; 5
     a70:	08 95       	ret

00000a72 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     a72:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0) {
     a74:	0d b4       	in	r0, 0x2d	; 45
     a76:	07 fe       	sbrs	r0, 7
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     a7a:	8e b5       	in	r24, 0x2e	; 46
}
     a7c:	08 95       	ret

00000a7e <move_terminal_cursor>:
	printf_P(PSTR("\x1b[%dm"), parameter);
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
}
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	7f 93       	push	r23
     a84:	6f 93       	push	r22
     a86:	8f ee       	ldi	r24, 0xEF	; 239
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	9f 93       	push	r25
     a8c:	8f 93       	push	r24
     a8e:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	08 95       	ret

00000aa0 <clear_terminal>:
     aa0:	8a ee       	ldi	r24, 0xEA	; 234
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	08 95       	ret

00000ab2 <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
     ab2:	83 ee       	ldi	r24, 0xE3	; 227
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	0e 94 54 06 	call	0xca8	; 0xca8 <printf_P>
}
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	08 95       	ret

00000ac4 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
     ac4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <clock_ticks_ms>
     ac8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <clock_ticks_ms+0x1>
     acc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <clock_ticks_ms+0x2>
     ad0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     ad4:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     ad6:	8c e7       	ldi	r24, 0x7C	; 124
     ad8:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
     ae2:	ee e6       	ldi	r30, 0x6E	; 110
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	82 60       	ori	r24, 0x02	; 2
     aea:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
     aec:	95 bb       	out	0x15, r25	; 21
     aee:	08 95       	ret

00000af0 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     af0:	8f b7       	in	r24, 0x3f	; 63
     af2:	28 2f       	mov	r18, r24
     af4:	20 78       	andi	r18, 0x80	; 128
	cli();
     af6:	f8 94       	cli
	return_value = clock_ticks_ms;
     af8:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <clock_ticks_ms>
     afc:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <clock_ticks_ms+0x1>
     b00:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <clock_ticks_ms+0x2>
     b04:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <clock_ticks_ms+0x3>
	if (interrupts_were_enabled) {
     b08:	22 23       	and	r18, r18
     b0a:	09 f0       	breq	.+2      	; 0xb0e <get_current_time+0x1e>
		sei();
     b0c:	78 94       	sei
	}
	return return_value;
}
     b0e:	08 95       	ret

00000b10 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
     b22:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clock_ticks_ms>
     b26:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clock_ticks_ms+0x1>
     b2a:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <clock_ticks_ms+0x2>
     b2e:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <clock_ticks_ms+0x3>
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	a1 1d       	adc	r26, r1
     b36:	b1 1d       	adc	r27, r1
     b38:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <clock_ticks_ms>
     b3c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <clock_ticks_ms+0x1>
     b40:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <clock_ticks_ms+0x2>
     b44:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <clock_ticks_ms+0x3>
}
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	0f 90       	pop	r0
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	0f 90       	pop	r0
     b56:	1f 90       	pop	r1
     b58:	18 95       	reti

00000b5a <__divmodhi4>:
     b5a:	97 fb       	bst	r25, 7
     b5c:	07 2e       	mov	r0, r23
     b5e:	16 f4       	brtc	.+4      	; 0xb64 <__divmodhi4+0xa>
     b60:	00 94       	com	r0
     b62:	07 d0       	rcall	.+14     	; 0xb72 <__divmodhi4_neg1>
     b64:	77 fd       	sbrc	r23, 7
     b66:	09 d0       	rcall	.+18     	; 0xb7a <__divmodhi4_neg2>
     b68:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__udivmodhi4>
     b6c:	07 fc       	sbrc	r0, 7
     b6e:	05 d0       	rcall	.+10     	; 0xb7a <__divmodhi4_neg2>
     b70:	3e f4       	brtc	.+14     	; 0xb80 <__divmodhi4_exit>

00000b72 <__divmodhi4_neg1>:
     b72:	90 95       	com	r25
     b74:	81 95       	neg	r24
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	08 95       	ret

00000b7a <__divmodhi4_neg2>:
     b7a:	70 95       	com	r23
     b7c:	61 95       	neg	r22
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b80 <__divmodhi4_exit>:
     b80:	08 95       	ret

00000b82 <__divmodsi4>:
     b82:	05 2e       	mov	r0, r21
     b84:	97 fb       	bst	r25, 7
     b86:	1e f4       	brtc	.+6      	; 0xb8e <__divmodsi4+0xc>
     b88:	00 94       	com	r0
     b8a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__negsi2>
     b8e:	57 fd       	sbrc	r21, 7
     b90:	07 d0       	rcall	.+14     	; 0xba0 <__divmodsi4_neg2>
     b92:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__udivmodsi4>
     b96:	07 fc       	sbrc	r0, 7
     b98:	03 d0       	rcall	.+6      	; 0xba0 <__divmodsi4_neg2>
     b9a:	4e f4       	brtc	.+18     	; 0xbae <__divmodsi4_exit>
     b9c:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__negsi2>

00000ba0 <__divmodsi4_neg2>:
     ba0:	50 95       	com	r21
     ba2:	40 95       	com	r20
     ba4:	30 95       	com	r19
     ba6:	21 95       	neg	r18
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	4f 4f       	sbci	r20, 0xFF	; 255
     bac:	5f 4f       	sbci	r21, 0xFF	; 255

00000bae <__divmodsi4_exit>:
     bae:	08 95       	ret

00000bb0 <__negsi2>:
     bb0:	90 95       	com	r25
     bb2:	80 95       	com	r24
     bb4:	70 95       	com	r23
     bb6:	61 95       	neg	r22
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	08 95       	ret

00000bc0 <__udivmodhi4>:
     bc0:	aa 1b       	sub	r26, r26
     bc2:	bb 1b       	sub	r27, r27
     bc4:	51 e1       	ldi	r21, 0x11	; 17
     bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <__udivmodhi4_ep>

00000bc8 <__udivmodhi4_loop>:
     bc8:	aa 1f       	adc	r26, r26
     bca:	bb 1f       	adc	r27, r27
     bcc:	a6 17       	cp	r26, r22
     bce:	b7 07       	cpc	r27, r23
     bd0:	10 f0       	brcs	.+4      	; 0xbd6 <__udivmodhi4_ep>
     bd2:	a6 1b       	sub	r26, r22
     bd4:	b7 0b       	sbc	r27, r23

00000bd6 <__udivmodhi4_ep>:
     bd6:	88 1f       	adc	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	5a 95       	dec	r21
     bdc:	a9 f7       	brne	.-22     	; 0xbc8 <__udivmodhi4_loop>
     bde:	80 95       	com	r24
     be0:	90 95       	com	r25
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	08 95       	ret

00000be8 <__udivmodsi4>:
     be8:	a1 e2       	ldi	r26, 0x21	; 33
     bea:	1a 2e       	mov	r1, r26
     bec:	aa 1b       	sub	r26, r26
     bee:	bb 1b       	sub	r27, r27
     bf0:	fd 01       	movw	r30, r26
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <__udivmodsi4_ep>

00000bf4 <__udivmodsi4_loop>:
     bf4:	aa 1f       	adc	r26, r26
     bf6:	bb 1f       	adc	r27, r27
     bf8:	ee 1f       	adc	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	a2 17       	cp	r26, r18
     bfe:	b3 07       	cpc	r27, r19
     c00:	e4 07       	cpc	r30, r20
     c02:	f5 07       	cpc	r31, r21
     c04:	20 f0       	brcs	.+8      	; 0xc0e <__udivmodsi4_ep>
     c06:	a2 1b       	sub	r26, r18
     c08:	b3 0b       	sbc	r27, r19
     c0a:	e4 0b       	sbc	r30, r20
     c0c:	f5 0b       	sbc	r31, r21

00000c0e <__udivmodsi4_ep>:
     c0e:	66 1f       	adc	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	1a 94       	dec	r1
     c18:	69 f7       	brne	.-38     	; 0xbf4 <__udivmodsi4_loop>
     c1a:	60 95       	com	r22
     c1c:	70 95       	com	r23
     c1e:	80 95       	com	r24
     c20:	90 95       	com	r25
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	bd 01       	movw	r22, r26
     c28:	cf 01       	movw	r24, r30
     c2a:	08 95       	ret

00000c2c <fgetc>:
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ec 01       	movw	r28, r24
     c32:	2b 81       	ldd	r18, Y+3	; 0x03
     c34:	20 ff       	sbrs	r18, 0
     c36:	33 c0       	rjmp	.+102    	; 0xc9e <fgetc+0x72>
     c38:	26 ff       	sbrs	r18, 6
     c3a:	0a c0       	rjmp	.+20     	; 0xc50 <fgetc+0x24>
     c3c:	2f 7b       	andi	r18, 0xBF	; 191
     c3e:	2b 83       	std	Y+3, r18	; 0x03
     c40:	8e 81       	ldd	r24, Y+6	; 0x06
     c42:	9f 81       	ldd	r25, Y+7	; 0x07
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	9f 83       	std	Y+7, r25	; 0x07
     c48:	8e 83       	std	Y+6, r24	; 0x06
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	29 c0       	rjmp	.+82     	; 0xca2 <fgetc+0x76>
     c50:	22 ff       	sbrs	r18, 2
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <fgetc+0x46>
     c54:	e8 81       	ld	r30, Y
     c56:	f9 81       	ldd	r31, Y+1	; 0x01
     c58:	80 81       	ld	r24, Z
     c5a:	08 2e       	mov	r0, r24
     c5c:	00 0c       	add	r0, r0
     c5e:	99 0b       	sbc	r25, r25
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	19 f4       	brne	.+6      	; 0xc6a <fgetc+0x3e>
     c64:	20 62       	ori	r18, 0x20	; 32
     c66:	2b 83       	std	Y+3, r18	; 0x03
     c68:	1a c0       	rjmp	.+52     	; 0xc9e <fgetc+0x72>
     c6a:	31 96       	adiw	r30, 0x01	; 1
     c6c:	f9 83       	std	Y+1, r31	; 0x01
     c6e:	e8 83       	st	Y, r30
     c70:	0e c0       	rjmp	.+28     	; 0xc8e <fgetc+0x62>
     c72:	ea 85       	ldd	r30, Y+10	; 0x0a
     c74:	fb 85       	ldd	r31, Y+11	; 0x0b
     c76:	09 95       	icall
     c78:	97 ff       	sbrs	r25, 7
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <fgetc+0x62>
     c7c:	2b 81       	ldd	r18, Y+3	; 0x03
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	11 f0       	breq	.+4      	; 0xc86 <fgetc+0x5a>
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <fgetc+0x5c>
     c86:	80 e1       	ldi	r24, 0x10	; 16
     c88:	82 2b       	or	r24, r18
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <fgetc+0x72>
     c8e:	2e 81       	ldd	r18, Y+6	; 0x06
     c90:	3f 81       	ldd	r19, Y+7	; 0x07
     c92:	2f 5f       	subi	r18, 0xFF	; 255
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	3f 83       	std	Y+7, r19	; 0x07
     c98:	2e 83       	std	Y+6, r18	; 0x06
     c9a:	99 27       	eor	r25, r25
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <fgetc+0x76>
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	9f ef       	ldi	r25, 0xFF	; 255
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <printf_P>:
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ea e5       	ldi	r30, 0x5A	; 90
     cae:	f6 e0       	ldi	r31, 0x06	; 6
     cb0:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__prologue_saves__+0x1c>
     cb4:	ae 01       	movw	r20, r28
     cb6:	49 5f       	subi	r20, 0xF9	; 249
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	da 01       	movw	r26, r20
     cbc:	6d 91       	ld	r22, X+
     cbe:	7d 91       	ld	r23, X+
     cc0:	ad 01       	movw	r20, r26
     cc2:	05 e4       	ldi	r16, 0x45	; 69
     cc4:	12 e0       	ldi	r17, 0x02	; 2
     cc6:	f8 01       	movw	r30, r16
     cc8:	82 81       	ldd	r24, Z+2	; 0x02
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	dc 01       	movw	r26, r24
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	2c 91       	ld	r18, X
     cd2:	13 97       	sbiw	r26, 0x03	; 3
     cd4:	28 60       	ori	r18, 0x08	; 8
     cd6:	13 96       	adiw	r26, 0x03	; 3
     cd8:	2c 93       	st	X, r18
     cda:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vfprintf>
     cde:	d8 01       	movw	r26, r16
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	ed 91       	ld	r30, X+
     ce4:	fc 91       	ld	r31, X
     ce6:	13 97       	sbiw	r26, 0x03	; 3
     ce8:	23 81       	ldd	r18, Z+3	; 0x03
     cea:	27 7f       	andi	r18, 0xF7	; 247
     cec:	23 83       	std	Z+3, r18	; 0x03
     cee:	e4 e0       	ldi	r30, 0x04	; 4
     cf0:	0c 94 35 09 	jmp	0x126a	; 0x126a <__epilogue_restores__+0x1c>

00000cf4 <vfprintf>:
     cf4:	ab e0       	ldi	r26, 0x0B	; 11
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e0 e8       	ldi	r30, 0x80	; 128
     cfa:	f6 e0       	ldi	r31, 0x06	; 6
     cfc:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__prologue_saves__>
     d00:	6c 01       	movw	r12, r24
     d02:	7b 01       	movw	r14, r22
     d04:	8a 01       	movw	r16, r20
     d06:	fc 01       	movw	r30, r24
     d08:	17 82       	std	Z+7, r1	; 0x07
     d0a:	16 82       	std	Z+6, r1	; 0x06
     d0c:	83 81       	ldd	r24, Z+3	; 0x03
     d0e:	81 ff       	sbrs	r24, 1
     d10:	cc c1       	rjmp	.+920    	; 0x10aa <vfprintf+0x3b6>
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	3c 01       	movw	r6, r24
     d18:	f6 01       	movw	r30, r12
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	f7 01       	movw	r30, r14
     d1e:	93 fd       	sbrc	r25, 3
     d20:	85 91       	lpm	r24, Z+
     d22:	93 ff       	sbrs	r25, 3
     d24:	81 91       	ld	r24, Z+
     d26:	7f 01       	movw	r14, r30
     d28:	88 23       	and	r24, r24
     d2a:	09 f4       	brne	.+2      	; 0xd2e <vfprintf+0x3a>
     d2c:	ba c1       	rjmp	.+884    	; 0x10a2 <vfprintf+0x3ae>
     d2e:	85 32       	cpi	r24, 0x25	; 37
     d30:	39 f4       	brne	.+14     	; 0xd40 <vfprintf+0x4c>
     d32:	93 fd       	sbrc	r25, 3
     d34:	85 91       	lpm	r24, Z+
     d36:	93 ff       	sbrs	r25, 3
     d38:	81 91       	ld	r24, Z+
     d3a:	7f 01       	movw	r14, r30
     d3c:	85 32       	cpi	r24, 0x25	; 37
     d3e:	29 f4       	brne	.+10     	; 0xd4a <vfprintf+0x56>
     d40:	b6 01       	movw	r22, r12
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
     d48:	e7 cf       	rjmp	.-50     	; 0xd18 <vfprintf+0x24>
     d4a:	91 2c       	mov	r9, r1
     d4c:	21 2c       	mov	r2, r1
     d4e:	31 2c       	mov	r3, r1
     d50:	ff e1       	ldi	r31, 0x1F	; 31
     d52:	f3 15       	cp	r31, r3
     d54:	d8 f0       	brcs	.+54     	; 0xd8c <vfprintf+0x98>
     d56:	8b 32       	cpi	r24, 0x2B	; 43
     d58:	79 f0       	breq	.+30     	; 0xd78 <vfprintf+0x84>
     d5a:	38 f4       	brcc	.+14     	; 0xd6a <vfprintf+0x76>
     d5c:	80 32       	cpi	r24, 0x20	; 32
     d5e:	79 f0       	breq	.+30     	; 0xd7e <vfprintf+0x8a>
     d60:	83 32       	cpi	r24, 0x23	; 35
     d62:	a1 f4       	brne	.+40     	; 0xd8c <vfprintf+0x98>
     d64:	23 2d       	mov	r18, r3
     d66:	20 61       	ori	r18, 0x10	; 16
     d68:	1d c0       	rjmp	.+58     	; 0xda4 <vfprintf+0xb0>
     d6a:	8d 32       	cpi	r24, 0x2D	; 45
     d6c:	61 f0       	breq	.+24     	; 0xd86 <vfprintf+0x92>
     d6e:	80 33       	cpi	r24, 0x30	; 48
     d70:	69 f4       	brne	.+26     	; 0xd8c <vfprintf+0x98>
     d72:	23 2d       	mov	r18, r3
     d74:	21 60       	ori	r18, 0x01	; 1
     d76:	16 c0       	rjmp	.+44     	; 0xda4 <vfprintf+0xb0>
     d78:	83 2d       	mov	r24, r3
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	38 2e       	mov	r3, r24
     d7e:	e3 2d       	mov	r30, r3
     d80:	e4 60       	ori	r30, 0x04	; 4
     d82:	3e 2e       	mov	r3, r30
     d84:	2a c0       	rjmp	.+84     	; 0xdda <vfprintf+0xe6>
     d86:	f3 2d       	mov	r31, r3
     d88:	f8 60       	ori	r31, 0x08	; 8
     d8a:	1d c0       	rjmp	.+58     	; 0xdc6 <vfprintf+0xd2>
     d8c:	37 fc       	sbrc	r3, 7
     d8e:	2d c0       	rjmp	.+90     	; 0xdea <vfprintf+0xf6>
     d90:	20 ed       	ldi	r18, 0xD0	; 208
     d92:	28 0f       	add	r18, r24
     d94:	2a 30       	cpi	r18, 0x0A	; 10
     d96:	40 f0       	brcs	.+16     	; 0xda8 <vfprintf+0xb4>
     d98:	8e 32       	cpi	r24, 0x2E	; 46
     d9a:	b9 f4       	brne	.+46     	; 0xdca <vfprintf+0xd6>
     d9c:	36 fc       	sbrc	r3, 6
     d9e:	81 c1       	rjmp	.+770    	; 0x10a2 <vfprintf+0x3ae>
     da0:	23 2d       	mov	r18, r3
     da2:	20 64       	ori	r18, 0x40	; 64
     da4:	32 2e       	mov	r3, r18
     da6:	19 c0       	rjmp	.+50     	; 0xdda <vfprintf+0xe6>
     da8:	36 fe       	sbrs	r3, 6
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0xc4>
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	98 9e       	mul	r9, r24
     db0:	20 0d       	add	r18, r0
     db2:	11 24       	eor	r1, r1
     db4:	92 2e       	mov	r9, r18
     db6:	11 c0       	rjmp	.+34     	; 0xdda <vfprintf+0xe6>
     db8:	ea e0       	ldi	r30, 0x0A	; 10
     dba:	2e 9e       	mul	r2, r30
     dbc:	20 0d       	add	r18, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	22 2e       	mov	r2, r18
     dc2:	f3 2d       	mov	r31, r3
     dc4:	f0 62       	ori	r31, 0x20	; 32
     dc6:	3f 2e       	mov	r3, r31
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <vfprintf+0xe6>
     dca:	8c 36       	cpi	r24, 0x6C	; 108
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <vfprintf+0xe2>
     dce:	83 2d       	mov	r24, r3
     dd0:	80 68       	ori	r24, 0x80	; 128
     dd2:	38 2e       	mov	r3, r24
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0xe6>
     dd6:	88 36       	cpi	r24, 0x68	; 104
     dd8:	41 f4       	brne	.+16     	; 0xdea <vfprintf+0xf6>
     dda:	f7 01       	movw	r30, r14
     ddc:	93 fd       	sbrc	r25, 3
     dde:	85 91       	lpm	r24, Z+
     de0:	93 ff       	sbrs	r25, 3
     de2:	81 91       	ld	r24, Z+
     de4:	7f 01       	movw	r14, r30
     de6:	81 11       	cpse	r24, r1
     de8:	b3 cf       	rjmp	.-154    	; 0xd50 <vfprintf+0x5c>
     dea:	98 2f       	mov	r25, r24
     dec:	9f 7d       	andi	r25, 0xDF	; 223
     dee:	95 54       	subi	r25, 0x45	; 69
     df0:	93 30       	cpi	r25, 0x03	; 3
     df2:	28 f4       	brcc	.+10     	; 0xdfe <vfprintf+0x10a>
     df4:	0c 5f       	subi	r16, 0xFC	; 252
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
     df8:	9f e3       	ldi	r25, 0x3F	; 63
     dfa:	99 83       	std	Y+1, r25	; 0x01
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <vfprintf+0x124>
     dfe:	83 36       	cpi	r24, 0x63	; 99
     e00:	31 f0       	breq	.+12     	; 0xe0e <vfprintf+0x11a>
     e02:	83 37       	cpi	r24, 0x73	; 115
     e04:	71 f0       	breq	.+28     	; 0xe22 <vfprintf+0x12e>
     e06:	83 35       	cpi	r24, 0x53	; 83
     e08:	09 f0       	breq	.+2      	; 0xe0c <vfprintf+0x118>
     e0a:	59 c0       	rjmp	.+178    	; 0xebe <vfprintf+0x1ca>
     e0c:	21 c0       	rjmp	.+66     	; 0xe50 <vfprintf+0x15c>
     e0e:	f8 01       	movw	r30, r16
     e10:	80 81       	ld	r24, Z
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	0e 5f       	subi	r16, 0xFE	; 254
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	88 24       	eor	r8, r8
     e1a:	83 94       	inc	r8
     e1c:	91 2c       	mov	r9, r1
     e1e:	53 01       	movw	r10, r6
     e20:	13 c0       	rjmp	.+38     	; 0xe48 <vfprintf+0x154>
     e22:	28 01       	movw	r4, r16
     e24:	f2 e0       	ldi	r31, 0x02	; 2
     e26:	4f 0e       	add	r4, r31
     e28:	51 1c       	adc	r5, r1
     e2a:	f8 01       	movw	r30, r16
     e2c:	a0 80       	ld	r10, Z
     e2e:	b1 80       	ldd	r11, Z+1	; 0x01
     e30:	36 fe       	sbrs	r3, 6
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <vfprintf+0x146>
     e34:	69 2d       	mov	r22, r9
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <vfprintf+0x14a>
     e3a:	6f ef       	ldi	r22, 0xFF	; 255
     e3c:	7f ef       	ldi	r23, 0xFF	; 255
     e3e:	c5 01       	movw	r24, r10
     e40:	0e 94 66 08 	call	0x10cc	; 0x10cc <strnlen>
     e44:	4c 01       	movw	r8, r24
     e46:	82 01       	movw	r16, r4
     e48:	f3 2d       	mov	r31, r3
     e4a:	ff 77       	andi	r31, 0x7F	; 127
     e4c:	3f 2e       	mov	r3, r31
     e4e:	16 c0       	rjmp	.+44     	; 0xe7c <vfprintf+0x188>
     e50:	28 01       	movw	r4, r16
     e52:	22 e0       	ldi	r18, 0x02	; 2
     e54:	42 0e       	add	r4, r18
     e56:	51 1c       	adc	r5, r1
     e58:	f8 01       	movw	r30, r16
     e5a:	a0 80       	ld	r10, Z
     e5c:	b1 80       	ldd	r11, Z+1	; 0x01
     e5e:	36 fe       	sbrs	r3, 6
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <vfprintf+0x174>
     e62:	69 2d       	mov	r22, r9
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x178>
     e68:	6f ef       	ldi	r22, 0xFF	; 255
     e6a:	7f ef       	ldi	r23, 0xFF	; 255
     e6c:	c5 01       	movw	r24, r10
     e6e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strnlen_P>
     e72:	4c 01       	movw	r8, r24
     e74:	f3 2d       	mov	r31, r3
     e76:	f0 68       	ori	r31, 0x80	; 128
     e78:	3f 2e       	mov	r3, r31
     e7a:	82 01       	movw	r16, r4
     e7c:	33 fc       	sbrc	r3, 3
     e7e:	1b c0       	rjmp	.+54     	; 0xeb6 <vfprintf+0x1c2>
     e80:	82 2d       	mov	r24, r2
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	88 16       	cp	r8, r24
     e86:	99 06       	cpc	r9, r25
     e88:	b0 f4       	brcc	.+44     	; 0xeb6 <vfprintf+0x1c2>
     e8a:	b6 01       	movw	r22, r12
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
     e94:	2a 94       	dec	r2
     e96:	f4 cf       	rjmp	.-24     	; 0xe80 <vfprintf+0x18c>
     e98:	f5 01       	movw	r30, r10
     e9a:	37 fc       	sbrc	r3, 7
     e9c:	85 91       	lpm	r24, Z+
     e9e:	37 fe       	sbrs	r3, 7
     ea0:	81 91       	ld	r24, Z+
     ea2:	5f 01       	movw	r10, r30
     ea4:	b6 01       	movw	r22, r12
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
     eac:	21 10       	cpse	r2, r1
     eae:	2a 94       	dec	r2
     eb0:	21 e0       	ldi	r18, 0x01	; 1
     eb2:	82 1a       	sub	r8, r18
     eb4:	91 08       	sbc	r9, r1
     eb6:	81 14       	cp	r8, r1
     eb8:	91 04       	cpc	r9, r1
     eba:	71 f7       	brne	.-36     	; 0xe98 <vfprintf+0x1a4>
     ebc:	e8 c0       	rjmp	.+464    	; 0x108e <vfprintf+0x39a>
     ebe:	84 36       	cpi	r24, 0x64	; 100
     ec0:	11 f0       	breq	.+4      	; 0xec6 <vfprintf+0x1d2>
     ec2:	89 36       	cpi	r24, 0x69	; 105
     ec4:	41 f5       	brne	.+80     	; 0xf16 <vfprintf+0x222>
     ec6:	f8 01       	movw	r30, r16
     ec8:	37 fe       	sbrs	r3, 7
     eca:	07 c0       	rjmp	.+14     	; 0xeda <vfprintf+0x1e6>
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	0c 5f       	subi	r16, 0xFC	; 252
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <vfprintf+0x1f6>
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	07 2e       	mov	r0, r23
     ee0:	00 0c       	add	r0, r0
     ee2:	88 0b       	sbc	r24, r24
     ee4:	99 0b       	sbc	r25, r25
     ee6:	0e 5f       	subi	r16, 0xFE	; 254
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	f3 2d       	mov	r31, r3
     eec:	ff 76       	andi	r31, 0x6F	; 111
     eee:	3f 2e       	mov	r3, r31
     ef0:	97 ff       	sbrs	r25, 7
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <vfprintf+0x212>
     ef4:	90 95       	com	r25
     ef6:	80 95       	com	r24
     ef8:	70 95       	com	r23
     efa:	61 95       	neg	r22
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	f0 68       	ori	r31, 0x80	; 128
     f04:	3f 2e       	mov	r3, r31
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	a3 01       	movw	r20, r6
     f0c:	0e 94 ad 08 	call	0x115a	; 0x115a <__ultoa_invert>
     f10:	88 2e       	mov	r8, r24
     f12:	86 18       	sub	r8, r6
     f14:	45 c0       	rjmp	.+138    	; 0xfa0 <vfprintf+0x2ac>
     f16:	85 37       	cpi	r24, 0x75	; 117
     f18:	31 f4       	brne	.+12     	; 0xf26 <vfprintf+0x232>
     f1a:	23 2d       	mov	r18, r3
     f1c:	2f 7e       	andi	r18, 0xEF	; 239
     f1e:	b2 2e       	mov	r11, r18
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	25 c0       	rjmp	.+74     	; 0xf70 <vfprintf+0x27c>
     f26:	93 2d       	mov	r25, r3
     f28:	99 7f       	andi	r25, 0xF9	; 249
     f2a:	b9 2e       	mov	r11, r25
     f2c:	8f 36       	cpi	r24, 0x6F	; 111
     f2e:	c1 f0       	breq	.+48     	; 0xf60 <vfprintf+0x26c>
     f30:	18 f4       	brcc	.+6      	; 0xf38 <vfprintf+0x244>
     f32:	88 35       	cpi	r24, 0x58	; 88
     f34:	79 f0       	breq	.+30     	; 0xf54 <vfprintf+0x260>
     f36:	b5 c0       	rjmp	.+362    	; 0x10a2 <vfprintf+0x3ae>
     f38:	80 37       	cpi	r24, 0x70	; 112
     f3a:	19 f0       	breq	.+6      	; 0xf42 <vfprintf+0x24e>
     f3c:	88 37       	cpi	r24, 0x78	; 120
     f3e:	21 f0       	breq	.+8      	; 0xf48 <vfprintf+0x254>
     f40:	b0 c0       	rjmp	.+352    	; 0x10a2 <vfprintf+0x3ae>
     f42:	e9 2f       	mov	r30, r25
     f44:	e0 61       	ori	r30, 0x10	; 16
     f46:	be 2e       	mov	r11, r30
     f48:	b4 fe       	sbrs	r11, 4
     f4a:	0d c0       	rjmp	.+26     	; 0xf66 <vfprintf+0x272>
     f4c:	fb 2d       	mov	r31, r11
     f4e:	f4 60       	ori	r31, 0x04	; 4
     f50:	bf 2e       	mov	r11, r31
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <vfprintf+0x272>
     f54:	34 fe       	sbrs	r3, 4
     f56:	0a c0       	rjmp	.+20     	; 0xf6c <vfprintf+0x278>
     f58:	29 2f       	mov	r18, r25
     f5a:	26 60       	ori	r18, 0x06	; 6
     f5c:	b2 2e       	mov	r11, r18
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0x278>
     f60:	28 e0       	ldi	r18, 0x08	; 8
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <vfprintf+0x27c>
     f66:	20 e1       	ldi	r18, 0x10	; 16
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <vfprintf+0x27c>
     f6c:	20 e1       	ldi	r18, 0x10	; 16
     f6e:	32 e0       	ldi	r19, 0x02	; 2
     f70:	f8 01       	movw	r30, r16
     f72:	b7 fe       	sbrs	r11, 7
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <vfprintf+0x290>
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	0c 5f       	subi	r16, 0xFC	; 252
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <vfprintf+0x29c>
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 5f       	subi	r16, 0xFE	; 254
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	a3 01       	movw	r20, r6
     f92:	0e 94 ad 08 	call	0x115a	; 0x115a <__ultoa_invert>
     f96:	88 2e       	mov	r8, r24
     f98:	86 18       	sub	r8, r6
     f9a:	fb 2d       	mov	r31, r11
     f9c:	ff 77       	andi	r31, 0x7F	; 127
     f9e:	3f 2e       	mov	r3, r31
     fa0:	36 fe       	sbrs	r3, 6
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <vfprintf+0x2ca>
     fa4:	23 2d       	mov	r18, r3
     fa6:	2e 7f       	andi	r18, 0xFE	; 254
     fa8:	a2 2e       	mov	r10, r18
     faa:	89 14       	cp	r8, r9
     fac:	58 f4       	brcc	.+22     	; 0xfc4 <vfprintf+0x2d0>
     fae:	34 fe       	sbrs	r3, 4
     fb0:	0b c0       	rjmp	.+22     	; 0xfc8 <vfprintf+0x2d4>
     fb2:	32 fc       	sbrc	r3, 2
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <vfprintf+0x2d4>
     fb6:	83 2d       	mov	r24, r3
     fb8:	8e 7e       	andi	r24, 0xEE	; 238
     fba:	a8 2e       	mov	r10, r24
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <vfprintf+0x2d4>
     fbe:	b8 2c       	mov	r11, r8
     fc0:	a3 2c       	mov	r10, r3
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <vfprintf+0x2d6>
     fc4:	b8 2c       	mov	r11, r8
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <vfprintf+0x2d6>
     fc8:	b9 2c       	mov	r11, r9
     fca:	a4 fe       	sbrs	r10, 4
     fcc:	0f c0       	rjmp	.+30     	; 0xfec <vfprintf+0x2f8>
     fce:	fe 01       	movw	r30, r28
     fd0:	e8 0d       	add	r30, r8
     fd2:	f1 1d       	adc	r31, r1
     fd4:	80 81       	ld	r24, Z
     fd6:	80 33       	cpi	r24, 0x30	; 48
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <vfprintf+0x2ee>
     fda:	9a 2d       	mov	r25, r10
     fdc:	99 7e       	andi	r25, 0xE9	; 233
     fde:	a9 2e       	mov	r10, r25
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <vfprintf+0x300>
     fe2:	a2 fe       	sbrs	r10, 2
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <vfprintf+0x2fe>
     fe6:	b3 94       	inc	r11
     fe8:	b3 94       	inc	r11
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <vfprintf+0x300>
     fec:	8a 2d       	mov	r24, r10
     fee:	86 78       	andi	r24, 0x86	; 134
     ff0:	09 f0       	breq	.+2      	; 0xff4 <vfprintf+0x300>
     ff2:	b3 94       	inc	r11
     ff4:	a3 fc       	sbrc	r10, 3
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <vfprintf+0x326>
     ff8:	a0 fe       	sbrs	r10, 0
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <vfprintf+0x314>
     ffc:	b2 14       	cp	r11, r2
     ffe:	88 f4       	brcc	.+34     	; 0x1022 <vfprintf+0x32e>
    1000:	28 0c       	add	r2, r8
    1002:	92 2c       	mov	r9, r2
    1004:	9b 18       	sub	r9, r11
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <vfprintf+0x330>
    1008:	b2 14       	cp	r11, r2
    100a:	60 f4       	brcc	.+24     	; 0x1024 <vfprintf+0x330>
    100c:	b6 01       	movw	r22, r12
    100e:	80 e2       	ldi	r24, 0x20	; 32
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
    1016:	b3 94       	inc	r11
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <vfprintf+0x314>
    101a:	b2 14       	cp	r11, r2
    101c:	18 f4       	brcc	.+6      	; 0x1024 <vfprintf+0x330>
    101e:	2b 18       	sub	r2, r11
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0x332>
    1022:	98 2c       	mov	r9, r8
    1024:	21 2c       	mov	r2, r1
    1026:	a4 fe       	sbrs	r10, 4
    1028:	10 c0       	rjmp	.+32     	; 0x104a <vfprintf+0x356>
    102a:	b6 01       	movw	r22, r12
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
    1034:	a2 fe       	sbrs	r10, 2
    1036:	17 c0       	rjmp	.+46     	; 0x1066 <vfprintf+0x372>
    1038:	a1 fc       	sbrc	r10, 1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <vfprintf+0x34e>
    103c:	88 e7       	ldi	r24, 0x78	; 120
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x352>
    1042:	88 e5       	ldi	r24, 0x58	; 88
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	b6 01       	movw	r22, r12
    1048:	0c c0       	rjmp	.+24     	; 0x1062 <vfprintf+0x36e>
    104a:	8a 2d       	mov	r24, r10
    104c:	86 78       	andi	r24, 0x86	; 134
    104e:	59 f0       	breq	.+22     	; 0x1066 <vfprintf+0x372>
    1050:	a1 fe       	sbrs	r10, 1
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <vfprintf+0x364>
    1054:	8b e2       	ldi	r24, 0x2B	; 43
    1056:	01 c0       	rjmp	.+2      	; 0x105a <vfprintf+0x366>
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	a7 fc       	sbrc	r10, 7
    105c:	8d e2       	ldi	r24, 0x2D	; 45
    105e:	b6 01       	movw	r22, r12
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
    1066:	89 14       	cp	r8, r9
    1068:	38 f4       	brcc	.+14     	; 0x1078 <vfprintf+0x384>
    106a:	b6 01       	movw	r22, r12
    106c:	80 e3       	ldi	r24, 0x30	; 48
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
    1074:	9a 94       	dec	r9
    1076:	f7 cf       	rjmp	.-18     	; 0x1066 <vfprintf+0x372>
    1078:	8a 94       	dec	r8
    107a:	f3 01       	movw	r30, r6
    107c:	e8 0d       	add	r30, r8
    107e:	f1 1d       	adc	r31, r1
    1080:	80 81       	ld	r24, Z
    1082:	b6 01       	movw	r22, r12
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
    108a:	81 10       	cpse	r8, r1
    108c:	f5 cf       	rjmp	.-22     	; 0x1078 <vfprintf+0x384>
    108e:	22 20       	and	r2, r2
    1090:	09 f4       	brne	.+2      	; 0x1094 <vfprintf+0x3a0>
    1092:	42 ce       	rjmp	.-892    	; 0xd18 <vfprintf+0x24>
    1094:	b6 01       	movw	r22, r12
    1096:	80 e2       	ldi	r24, 0x20	; 32
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <fputc>
    109e:	2a 94       	dec	r2
    10a0:	f6 cf       	rjmp	.-20     	; 0x108e <vfprintf+0x39a>
    10a2:	f6 01       	movw	r30, r12
    10a4:	86 81       	ldd	r24, Z+6	; 0x06
    10a6:	97 81       	ldd	r25, Z+7	; 0x07
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <vfprintf+0x3ba>
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	9f ef       	ldi	r25, 0xFF	; 255
    10ae:	2b 96       	adiw	r28, 0x0b	; 11
    10b0:	e2 e1       	ldi	r30, 0x12	; 18
    10b2:	0c 94 27 09 	jmp	0x124e	; 0x124e <__epilogue_restores__>

000010b6 <strnlen_P>:
    10b6:	fc 01       	movw	r30, r24
    10b8:	05 90       	lpm	r0, Z+
    10ba:	61 50       	subi	r22, 0x01	; 1
    10bc:	70 40       	sbci	r23, 0x00	; 0
    10be:	01 10       	cpse	r0, r1
    10c0:	d8 f7       	brcc	.-10     	; 0x10b8 <strnlen_P+0x2>
    10c2:	80 95       	com	r24
    10c4:	90 95       	com	r25
    10c6:	8e 0f       	add	r24, r30
    10c8:	9f 1f       	adc	r25, r31
    10ca:	08 95       	ret

000010cc <strnlen>:
    10cc:	fc 01       	movw	r30, r24
    10ce:	61 50       	subi	r22, 0x01	; 1
    10d0:	70 40       	sbci	r23, 0x00	; 0
    10d2:	01 90       	ld	r0, Z+
    10d4:	01 10       	cpse	r0, r1
    10d6:	d8 f7       	brcc	.-10     	; 0x10ce <strnlen+0x2>
    10d8:	80 95       	com	r24
    10da:	90 95       	com	r25
    10dc:	8e 0f       	add	r24, r30
    10de:	9f 1f       	adc	r25, r31
    10e0:	08 95       	ret

000010e2 <fputc>:
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	fb 01       	movw	r30, r22
    10ec:	23 81       	ldd	r18, Z+3	; 0x03
    10ee:	21 fd       	sbrc	r18, 1
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <fputc+0x16>
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	9f ef       	ldi	r25, 0xFF	; 255
    10f6:	2c c0       	rjmp	.+88     	; 0x1150 <fputc+0x6e>
    10f8:	22 ff       	sbrs	r18, 2
    10fa:	16 c0       	rjmp	.+44     	; 0x1128 <fputc+0x46>
    10fc:	46 81       	ldd	r20, Z+6	; 0x06
    10fe:	57 81       	ldd	r21, Z+7	; 0x07
    1100:	24 81       	ldd	r18, Z+4	; 0x04
    1102:	35 81       	ldd	r19, Z+5	; 0x05
    1104:	42 17       	cp	r20, r18
    1106:	53 07       	cpc	r21, r19
    1108:	44 f4       	brge	.+16     	; 0x111a <fputc+0x38>
    110a:	a0 81       	ld	r26, Z
    110c:	b1 81       	ldd	r27, Z+1	; 0x01
    110e:	9d 01       	movw	r18, r26
    1110:	2f 5f       	subi	r18, 0xFF	; 255
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	31 83       	std	Z+1, r19	; 0x01
    1116:	20 83       	st	Z, r18
    1118:	8c 93       	st	X, r24
    111a:	26 81       	ldd	r18, Z+6	; 0x06
    111c:	37 81       	ldd	r19, Z+7	; 0x07
    111e:	2f 5f       	subi	r18, 0xFF	; 255
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	37 83       	std	Z+7, r19	; 0x07
    1124:	26 83       	std	Z+6, r18	; 0x06
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <fputc+0x6e>
    1128:	8b 01       	movw	r16, r22
    112a:	ec 01       	movw	r28, r24
    112c:	fb 01       	movw	r30, r22
    112e:	00 84       	ldd	r0, Z+8	; 0x08
    1130:	f1 85       	ldd	r31, Z+9	; 0x09
    1132:	e0 2d       	mov	r30, r0
    1134:	09 95       	icall
    1136:	89 2b       	or	r24, r25
    1138:	e1 f6       	brne	.-72     	; 0x10f2 <fputc+0x10>
    113a:	d8 01       	movw	r26, r16
    113c:	16 96       	adiw	r26, 0x06	; 6
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	17 97       	sbiw	r26, 0x07	; 7
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	17 96       	adiw	r26, 0x07	; 7
    1148:	9c 93       	st	X, r25
    114a:	8e 93       	st	-X, r24
    114c:	16 97       	sbiw	r26, 0x06	; 6
    114e:	ce 01       	movw	r24, r28
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <__ultoa_invert>:
    115a:	fa 01       	movw	r30, r20
    115c:	aa 27       	eor	r26, r26
    115e:	28 30       	cpi	r18, 0x08	; 8
    1160:	51 f1       	breq	.+84     	; 0x11b6 <__ultoa_invert+0x5c>
    1162:	20 31       	cpi	r18, 0x10	; 16
    1164:	81 f1       	breq	.+96     	; 0x11c6 <__ultoa_invert+0x6c>
    1166:	e8 94       	clt
    1168:	6f 93       	push	r22
    116a:	6e 7f       	andi	r22, 0xFE	; 254
    116c:	6e 5f       	subi	r22, 0xFE	; 254
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	af 4f       	sbci	r26, 0xFF	; 255
    1176:	b1 e0       	ldi	r27, 0x01	; 1
    1178:	3e d0       	rcall	.+124    	; 0x11f6 <__ultoa_invert+0x9c>
    117a:	b4 e0       	ldi	r27, 0x04	; 4
    117c:	3c d0       	rcall	.+120    	; 0x11f6 <__ultoa_invert+0x9c>
    117e:	67 0f       	add	r22, r23
    1180:	78 1f       	adc	r23, r24
    1182:	89 1f       	adc	r24, r25
    1184:	9a 1f       	adc	r25, r26
    1186:	a1 1d       	adc	r26, r1
    1188:	68 0f       	add	r22, r24
    118a:	79 1f       	adc	r23, r25
    118c:	8a 1f       	adc	r24, r26
    118e:	91 1d       	adc	r25, r1
    1190:	a1 1d       	adc	r26, r1
    1192:	6a 0f       	add	r22, r26
    1194:	71 1d       	adc	r23, r1
    1196:	81 1d       	adc	r24, r1
    1198:	91 1d       	adc	r25, r1
    119a:	a1 1d       	adc	r26, r1
    119c:	20 d0       	rcall	.+64     	; 0x11de <__ultoa_invert+0x84>
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__ultoa_invert+0x48>
    11a0:	68 94       	set
    11a2:	3f 91       	pop	r19
    11a4:	2a e0       	ldi	r18, 0x0A	; 10
    11a6:	26 9f       	mul	r18, r22
    11a8:	11 24       	eor	r1, r1
    11aa:	30 19       	sub	r19, r0
    11ac:	30 5d       	subi	r19, 0xD0	; 208
    11ae:	31 93       	st	Z+, r19
    11b0:	de f6       	brtc	.-74     	; 0x1168 <__ultoa_invert+0xe>
    11b2:	cf 01       	movw	r24, r30
    11b4:	08 95       	ret
    11b6:	46 2f       	mov	r20, r22
    11b8:	47 70       	andi	r20, 0x07	; 7
    11ba:	40 5d       	subi	r20, 0xD0	; 208
    11bc:	41 93       	st	Z+, r20
    11be:	b3 e0       	ldi	r27, 0x03	; 3
    11c0:	0f d0       	rcall	.+30     	; 0x11e0 <__ultoa_invert+0x86>
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__ultoa_invert+0x5c>
    11c4:	f6 cf       	rjmp	.-20     	; 0x11b2 <__ultoa_invert+0x58>
    11c6:	46 2f       	mov	r20, r22
    11c8:	4f 70       	andi	r20, 0x0F	; 15
    11ca:	40 5d       	subi	r20, 0xD0	; 208
    11cc:	4a 33       	cpi	r20, 0x3A	; 58
    11ce:	18 f0       	brcs	.+6      	; 0x11d6 <__ultoa_invert+0x7c>
    11d0:	49 5d       	subi	r20, 0xD9	; 217
    11d2:	31 fd       	sbrc	r19, 1
    11d4:	40 52       	subi	r20, 0x20	; 32
    11d6:	41 93       	st	Z+, r20
    11d8:	02 d0       	rcall	.+4      	; 0x11de <__ultoa_invert+0x84>
    11da:	a9 f7       	brne	.-22     	; 0x11c6 <__ultoa_invert+0x6c>
    11dc:	ea cf       	rjmp	.-44     	; 0x11b2 <__ultoa_invert+0x58>
    11de:	b4 e0       	ldi	r27, 0x04	; 4
    11e0:	a6 95       	lsr	r26
    11e2:	97 95       	ror	r25
    11e4:	87 95       	ror	r24
    11e6:	77 95       	ror	r23
    11e8:	67 95       	ror	r22
    11ea:	ba 95       	dec	r27
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__ultoa_invert+0x86>
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	61 05       	cpc	r22, r1
    11f2:	71 05       	cpc	r23, r1
    11f4:	08 95       	ret
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	0a 2e       	mov	r0, r26
    11fc:	06 94       	lsr	r0
    11fe:	57 95       	ror	r21
    1200:	47 95       	ror	r20
    1202:	37 95       	ror	r19
    1204:	27 95       	ror	r18
    1206:	ba 95       	dec	r27
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__ultoa_invert+0xa2>
    120a:	62 0f       	add	r22, r18
    120c:	73 1f       	adc	r23, r19
    120e:	84 1f       	adc	r24, r20
    1210:	95 1f       	adc	r25, r21
    1212:	a0 1d       	adc	r26, r0
    1214:	08 95       	ret

00001216 <__prologue_saves__>:
    1216:	2f 92       	push	r2
    1218:	3f 92       	push	r3
    121a:	4f 92       	push	r4
    121c:	5f 92       	push	r5
    121e:	6f 92       	push	r6
    1220:	7f 92       	push	r7
    1222:	8f 92       	push	r8
    1224:	9f 92       	push	r9
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	ca 1b       	sub	r28, r26
    1240:	db 0b       	sbc	r29, r27
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	09 94       	ijmp

0000124e <__epilogue_restores__>:
    124e:	2a 88       	ldd	r2, Y+18	; 0x12
    1250:	39 88       	ldd	r3, Y+17	; 0x11
    1252:	48 88       	ldd	r4, Y+16	; 0x10
    1254:	5f 84       	ldd	r5, Y+15	; 0x0f
    1256:	6e 84       	ldd	r6, Y+14	; 0x0e
    1258:	7d 84       	ldd	r7, Y+13	; 0x0d
    125a:	8c 84       	ldd	r8, Y+12	; 0x0c
    125c:	9b 84       	ldd	r9, Y+11	; 0x0b
    125e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1260:	b9 84       	ldd	r11, Y+9	; 0x09
    1262:	c8 84       	ldd	r12, Y+8	; 0x08
    1264:	df 80       	ldd	r13, Y+7	; 0x07
    1266:	ee 80       	ldd	r14, Y+6	; 0x06
    1268:	fd 80       	ldd	r15, Y+5	; 0x05
    126a:	0c 81       	ldd	r16, Y+4	; 0x04
    126c:	1b 81       	ldd	r17, Y+3	; 0x03
    126e:	aa 81       	ldd	r26, Y+2	; 0x02
    1270:	b9 81       	ldd	r27, Y+1	; 0x01
    1272:	ce 0f       	add	r28, r30
    1274:	d1 1d       	adc	r29, r1
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	ed 01       	movw	r28, r26
    1282:	08 95       	ret

00001284 <_exit>:
    1284:	f8 94       	cli

00001286 <__stop_program>:
    1286:	ff cf       	rjmp	.-2      	; 0x1286 <__stop_program>
