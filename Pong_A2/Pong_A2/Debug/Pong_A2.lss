
Pong_A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000014ec  00001580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  00800120  00800120  000015a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000258f  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c7  00000000  00000000  00003e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c0  00000000  00000000  00004f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  00006704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c15  00000000  00000000  00006e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001943  00000000  00000000  00007a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  000093c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_5>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_16>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_20>
      54:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_21>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2270>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2244>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 4e 41 4d 20 48 69 75 20 59 69 20 2d      by NAM Hiu Yi -
      d4:	20 34 36 36 30 34 35 36 33 00                        46604563.

000000de <__c.2242>:
      de:	50 4f 4e 47 00                                      PONG.

000000e3 <__c.2058>:
      e3:	1b 5b 3f 32 35 68 00                                .[?25h.

000000ea <__c.2040>:
      ea:	1b 5b 32 4a 00                                      .[2J.

000000ef <__c.2025>:
      ef:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d8 e0       	ldi	r29, 0x08	; 8
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	ec ee       	ldi	r30, 0xEC	; 236
     10c:	f4 e1       	ldi	r31, 0x14	; 20
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 32       	cpi	r26, 0x20	; 32
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	22 e0       	ldi	r18, 0x02	; 2
     11c:	a0 e2       	ldi	r26, 0x20	; 32
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ab 34       	cpi	r26, 0x4B	; 75
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <main>
     12e:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     136:	e8 e6       	ldi	r30, 0x68	; 104
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	82 60       	ori	r24, 0x02	; 2
     13e:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     140:	8b b3       	in	r24, 0x1b	; 27
     142:	82 60       	ori	r24, 0x02	; 2
     144:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     146:	ec e6       	ldi	r30, 0x6C	; 108
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 60       	ori	r24, 0x0F	; 15
     14e:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     150:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     154:	08 95       	ret

00000156 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0) {
     156:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     15a:	18 16       	cp	r1, r24
     15c:	14 f5       	brge	.+68     	; 0x1a2 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     15e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     162:	6f b7       	in	r22, 0x3f	; 63
		cli();
     164:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++) {
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	09 c0       	rjmp	.+18     	; 0x17c <button_pushed+0x26>
			button_queue[i - 1] = button_queue[i];
     16a:	f9 01       	movw	r30, r18
     16c:	ef 5d       	subi	r30, 0xDF	; 223
     16e:	fe 4f       	sbci	r31, 0xFE	; 254
     170:	40 81       	ld	r20, Z
     172:	f9 01       	movw	r30, r18
     174:	e0 5e       	subi	r30, 0xE0	; 224
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++) {
     17a:	9f 5f       	subi	r25, 0xFF	; 255
     17c:	29 2f       	mov	r18, r25
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <__data_end>
     184:	04 2e       	mov	r0, r20
     186:	00 0c       	add	r0, r0
     188:	55 0b       	sbc	r21, r21
     18a:	24 17       	cp	r18, r20
     18c:	35 07       	cpc	r19, r21
     18e:	6c f3       	brlt	.-38     	; 0x16a <button_pushed+0x14>
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     190:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     194:	91 50       	subi	r25, 0x01	; 1
     196:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
		
		if (interrupts_were_enabled) {
     19a:	66 23       	and	r22, r22
     19c:	1c f4       	brge	.+6      	; 0x1a4 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     19e:	78 94       	sei
     1a0:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1a4:	08 95       	ret

000001a6 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	0f 92       	push	r0
     1ae:	11 24       	eor	r1, r1
     1b0:	2f 93       	push	r18
     1b2:	3f 93       	push	r19
     1b4:	4f 93       	push	r20
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	ef 93       	push	r30
     1bc:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1be:	43 b1       	in	r20, 0x03	; 3
     1c0:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	26 c0       	rjmp	.+76     	; 0x212 <__vector_5+0x6c>
		if (queue_length < BUTTON_QUEUE_SIZE
     1c6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
     1ca:	94 30       	cpi	r25, 0x04	; 4
     1cc:	0c f5       	brge	.+66     	; 0x210 <__vector_5+0x6a>
				&& (button_state & (1 << pin))
     1ce:	24 2f       	mov	r18, r20
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	08 2e       	mov	r0, r24
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_5+0x34>
     1d6:	35 95       	asr	r19
     1d8:	27 95       	ror	r18
     1da:	0a 94       	dec	r0
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <__vector_5+0x30>
     1de:	20 ff       	sbrs	r18, 0
     1e0:	17 c0       	rjmp	.+46     	; 0x210 <__vector_5+0x6a>
				&& !(last_button_state & (1 << pin))) {
     1e2:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <last_button_state>
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	08 2e       	mov	r0, r24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__vector_5+0x4a>
     1ec:	35 95       	asr	r19
     1ee:	27 95       	ror	r18
     1f0:	0a 94       	dec	r0
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <__vector_5+0x46>
     1f4:	20 fd       	sbrc	r18, 0
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <__vector_5+0x6a>
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     1f8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	9e 0f       	add	r25, r30
     200:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__data_end>
     204:	0e 2e       	mov	r0, r30
     206:	00 0c       	add	r0, r0
     208:	ff 0b       	sbc	r31, r31
     20a:	ef 5d       	subi	r30, 0xDF	; 223
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     210:	8f 5f       	subi	r24, 0xFF	; 255
     212:	84 30       	cpi	r24, 0x04	; 4
     214:	c0 f2       	brcs	.-80     	; 0x1c6 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     216:	40 93 25 01 	sts	0x0125, r20	; 0x800125 <last_button_state>
}
     21a:	ff 91       	pop	r31
     21c:	ef 91       	pop	r30
     21e:	9f 91       	pop	r25
     220:	8f 91       	pop	r24
     222:	4f 91       	pop	r20
     224:	3f 91       	pop	r19
     226:	2f 91       	pop	r18
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti

00000232 <initialise_display>:
    0b0111001111101111, // 9
};

// Initialise the display for the board, this creates the display
// for an empty board.
void initialise_display(void) {
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	28 97       	sbiw	r28, 0x08	; 8
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     24a:	0e 94 b5 03 	call	0x76a	; 0x76a <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	09 c0       	rjmp	.+18     	; 0x266 <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BORDER;
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e8 0f       	add	r30, r24
     25e:	f9 1f       	adc	r31, r25
     260:	25 e3       	ldi	r18, 0x35	; 53
     262:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	91 05       	cpc	r25, r1
     26a:	a4 f3       	brlt	.-24     	; 0x254 <initialise_display+0x22>
     26c:	01 e0       	ldi	r16, 0x01	; 1
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	08 c0       	rjmp	.+16     	; 0x282 <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     272:	be 01       	movw	r22, r28
     274:	6f 5f       	subi	r22, 0xFF	; 255
     276:	7f 4f       	sbci	r23, 0xFF	; 255
     278:	80 2f       	mov	r24, r16
     27a:	0e 94 98 03 	call	0x730	; 0x730 <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
     27e:	0f 5f       	subi	r16, 0xFF	; 255
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	02 30       	cpi	r16, 0x02	; 2
     284:	11 05       	cpc	r17, r1
     286:	ac f3       	brlt	.-22     	; 0x272 <initialise_display+0x40>
     288:	0e e0       	ldi	r16, 0x0E	; 14
     28a:	10 e0       	ldi	r17, 0x00	; 0
     28c:	08 c0       	rjmp	.+16     	; 0x29e <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     28e:	be 01       	movw	r22, r28
     290:	6f 5f       	subi	r22, 0xFF	; 255
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	80 2f       	mov	r24, r16
     296:	0e 94 98 03 	call	0x730	; 0x730 <ledmatrix_update_column>
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
     29a:	0f 5f       	subi	r16, 0xFF	; 255
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	0f 30       	cpi	r16, 0x0F	; 15
     2a0:	11 05       	cpc	r17, r1
     2a2:	ac f3       	brlt	.-22     	; 0x28e <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
}
     2a4:	28 96       	adiw	r28, 0x08	; 8
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <show_start_screen>:

void show_start_screen(void) {
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	28 97       	sbiw	r28, 0x08	; 8
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     2d0:	0e 94 b5 03 	call	0x76a	; 0x76a <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	29 c0       	rjmp	.+82     	; 0x32a <show_start_screen+0x70>
		col_data = pong_display[col];
     2d8:	e1 2f       	mov	r30, r17
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	e2 5f       	subi	r30, 0xF2	; 242
     2de:	fe 4f       	sbci	r31, 0xFE	; 254
     2e0:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     2e2:	90 ff       	sbrs	r25, 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <show_start_screen+0x30>
			colour = COLOUR_RED;
     2e6:	2f e0       	ldi	r18, 0x0F	; 15
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <show_start_screen+0x32>
		} else {
			colour = COLOUR_GREEN;
     2ea:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     2ec:	87 e0       	ldi	r24, 0x07	; 7
     2ee:	13 c0       	rjmp	.+38     	; 0x316 <show_start_screen+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     2f0:	99 23       	and	r25, r25
     2f2:	44 f4       	brge	.+16     	; 0x304 <show_start_screen+0x4a>
				column_colour_data[i] = colour;
     2f4:	e1 e0       	ldi	r30, 0x01	; 1
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ec 0f       	add	r30, r28
     2fa:	fd 1f       	adc	r31, r29
     2fc:	e8 0f       	add	r30, r24
     2fe:	f1 1d       	adc	r31, r1
     300:	20 83       	st	Z, r18
     302:	07 c0       	rjmp	.+14     	; 0x312 <show_start_screen+0x58>
			} else {
				column_colour_data[i] = 0;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     312:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     314:	81 50       	subi	r24, 0x01	; 1
     316:	81 11       	cpse	r24, r1
     318:	eb cf       	rjmp	.-42     	; 0x2f0 <show_start_screen+0x36>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     31a:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     31c:	be 01       	movw	r22, r28
     31e:	6f 5f       	subi	r22, 0xFF	; 255
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	81 2f       	mov	r24, r17
     324:	0e 94 98 03 	call	0x730	; 0x730 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     328:	1f 5f       	subi	r17, 0xFF	; 255
     32a:	10 31       	cpi	r17, 0x10	; 16
     32c:	a8 f2       	brcs	.-86     	; 0x2d8 <show_start_screen+0x1e>
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
		// Update pong ball colour
	ledmatrix_update_pixel(START_SCREEN_BALL_X, START_SCREEN_BALL_Y, MATRIX_COLOUR_BALL);
     32e:	4f e0       	ldi	r20, 0x0F	; 15
     330:	64 e0       	ldi	r22, 0x04	; 4
     332:	8e e0       	ldi	r24, 0x0E	; 14
     334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <ledmatrix_update_pixel>
}
     338:	28 96       	adiw	r28, 0x08	; 8
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	08 95       	ret

0000034c <update_start_screen>:

// Update dynamic start screen based on the frame number (0-11)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number) {
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	68 97       	sbiw	r28, 0x18	; 24
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
	
	if (frame_number < 0 || frame_number > 11) {
     362:	8c 30       	cpi	r24, 0x0C	; 12
     364:	08 f0       	brcs	.+2      	; 0x368 <update_start_screen+0x1c>
     366:	64 c0       	rjmp	.+200    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	17 c0       	rjmp	.+46     	; 0x39a <update_start_screen+0x4e>
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
			column_colour_data[col][row] = 0;
     36c:	e2 2f       	mov	r30, r18
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	4c 0f       	add	r20, r28
     382:	5d 1f       	adc	r21, r29
     384:	e4 0f       	add	r30, r20
     386:	f5 1f       	adc	r31, r21
     388:	e9 0f       	add	r30, r25
     38a:	f1 1d       	adc	r31, r1
     38c:	10 82       	st	Z, r1
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
     38e:	9f 5f       	subi	r25, 0xFF	; 255
     390:	01 c0       	rjmp	.+2      	; 0x394 <update_start_screen+0x48>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	98 30       	cpi	r25, 0x08	; 8
     396:	50 f3       	brcs	.-44     	; 0x36c <update_start_screen+0x20>
		return;
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	23 30       	cpi	r18, 0x03	; 3
     39c:	d0 f3       	brcs	.-12     	; 0x392 <update_start_screen+0x46>
			column_colour_data[col][row] = 0;
		}
	}
	
	// Set the middle paddle pixel
	column_colour_data[1][6] = MATRIX_COLOUR_PLAYER;
     39e:	90 ef       	ldi	r25, 0xF0	; 240
     3a0:	9f 87       	std	Y+15, r25	; 0x0f
	column_colour_data[1][1] = MATRIX_COLOUR_PLAYER;
     3a2:	9a 87       	std	Y+10, r25	; 0x0a
	
	// Set the edge paddle pixel depending on frame number
	if (frame_number < 3 || frame_number >= 9) {
     3a4:	9d ef       	ldi	r25, 0xFD	; 253
     3a6:	98 0f       	add	r25, r24
     3a8:	96 30       	cpi	r25, 0x06	; 6
     3aa:	18 f0       	brcs	.+6      	; 0x3b2 <update_start_screen+0x66>
		column_colour_data[2][6] = MATRIX_COLOUR_PLAYER;
     3ac:	90 ef       	ldi	r25, 0xF0	; 240
     3ae:	9f 8b       	std	Y+23, r25	; 0x17
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <update_start_screen+0x6a>
	} else {
		column_colour_data[0][6] = MATRIX_COLOUR_PLAYER;
     3b2:	90 ef       	ldi	r25, 0xF0	; 240
     3b4:	9f 83       	std	Y+7, r25	; 0x07
	}
	if (frame_number < 6) {
     3b6:	86 30       	cpi	r24, 0x06	; 6
     3b8:	18 f4       	brcc	.+6      	; 0x3c0 <update_start_screen+0x74>
		column_colour_data[0][1] = MATRIX_COLOUR_PLAYER;
     3ba:	90 ef       	ldi	r25, 0xF0	; 240
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <update_start_screen+0x78>
	} else {
		column_colour_data[2][1] = MATRIX_COLOUR_PLAYER;
     3c0:	90 ef       	ldi	r25, 0xF0	; 240
     3c2:	9a 8b       	std	Y+18, r25	; 0x12
	}
	
	// Set the ball pixel depending on frame number
	if (frame_number == 5 || frame_number == 11) {
     3c4:	85 30       	cpi	r24, 0x05	; 5
     3c6:	11 f0       	breq	.+4      	; 0x3cc <update_start_screen+0x80>
     3c8:	8b 30       	cpi	r24, 0x0B	; 11
     3ca:	19 f4       	brne	.+6      	; 0x3d2 <update_start_screen+0x86>
		column_colour_data[1][5] = MATRIX_COLOUR_BALL;
     3cc:	8f e0       	ldi	r24, 0x0F	; 15
     3ce:	8e 87       	std	Y+14, r24	; 0x0e
     3d0:	15 c0       	rjmp	.+42     	; 0x3fc <update_start_screen+0xb0>
	} else if (frame_number == 0 || frame_number == 4 || frame_number == 6
     3d2:	88 23       	and	r24, r24
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <update_start_screen+0x96>
     3d6:	84 30       	cpi	r24, 0x04	; 4
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <update_start_screen+0x96>
     3da:	86 30       	cpi	r24, 0x06	; 6
     3dc:	11 f0       	breq	.+4      	; 0x3e2 <update_start_screen+0x96>
			|| frame_number == 10) {
     3de:	8a 30       	cpi	r24, 0x0A	; 10
     3e0:	19 f4       	brne	.+6      	; 0x3e8 <update_start_screen+0x9c>
		column_colour_data[1][4] = MATRIX_COLOUR_BALL;
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	8d 87       	std	Y+13, r24	; 0x0d
     3e6:	0a c0       	rjmp	.+20     	; 0x3fc <update_start_screen+0xb0>
	} else if (frame_number == 1 || frame_number == 3 || frame_number == 7
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	31 f0       	breq	.+12     	; 0x3f8 <update_start_screen+0xac>
     3ec:	83 30       	cpi	r24, 0x03	; 3
     3ee:	21 f0       	breq	.+8      	; 0x3f8 <update_start_screen+0xac>
     3f0:	87 30       	cpi	r24, 0x07	; 7
     3f2:	11 f0       	breq	.+4      	; 0x3f8 <update_start_screen+0xac>
			|| frame_number == 9) {
     3f4:	89 30       	cpi	r24, 0x09	; 9
     3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
		column_colour_data[1][3] = MATRIX_COLOUR_BALL;
     3f8:	8f e0       	ldi	r24, 0x0F	; 15
     3fa:	8c 87       	std	Y+12, r24	; 0x0c
     3fc:	10 e0       	ldi	r17, 0x00	; 0
     3fe:	16 c0       	rjmp	.+44     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
     400:	8f e0       	ldi	r24, 0x0F	; 15
     402:	8b 87       	std	Y+11, r24	; 0x0b
     404:	fb cf       	rjmp	.-10     	; 0x3fc <update_start_screen+0xb0>
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
     406:	61 2f       	mov	r22, r17
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	66 0f       	add	r22, r22
     40c:	77 1f       	adc	r23, r23
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	66 0f       	add	r22, r22
     414:	77 1f       	adc	r23, r23
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	8c 0f       	add	r24, r28
     41c:	9d 1f       	adc	r25, r29
     41e:	68 0f       	add	r22, r24
     420:	79 1f       	adc	r23, r25
     422:	8d e0       	ldi	r24, 0x0D	; 13
     424:	81 0f       	add	r24, r17
     426:	0e 94 98 03 	call	0x730	; 0x730 <ledmatrix_update_column>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     42a:	1f 5f       	subi	r17, 0xFF	; 255
     42c:	13 30       	cpi	r17, 0x03	; 3
     42e:	58 f3       	brcs	.-42     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
	}
}
     430:	68 96       	adiw	r28, 0x18	; 24
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	08 95       	ret

00000444 <update_square_colour>:
// provided object
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	
	switch (object) {
     444:	41 30       	cpi	r20, 0x01	; 1
     446:	31 f0       	breq	.+12     	; 0x454 <update_square_colour+0x10>
     448:	42 30       	cpi	r20, 0x02	; 2
     44a:	11 f0       	breq	.+4      	; 0x450 <update_square_colour+0xc>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	03 c0       	rjmp	.+6      	; 0x456 <update_square_colour+0x12>
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
			break;
		case BALL:
			colour = MATRIX_COLOUR_BALL;
     450:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     452:	01 c0       	rjmp	.+2      	; 0x456 <update_square_colour+0x12>
	switch (object) {
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
     454:	40 ef       	ldi	r20, 0xF0	; 240
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y + MATRIX_Y_OFFSET, colour);
     456:	8e 5f       	subi	r24, 0xFE	; 254
     458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <ledmatrix_update_pixel>
     45c:	08 95       	ret

0000045e <draw_player_paddle>:
}

// Draw player 1 or 2 on the game board at their current position (specified
// by the `PLAYER_X_COORDINATES` and `player_y_coordinates` variables).
// This makes it easier to draw the multiple pixels of the players.
void draw_player_paddle(uint8_t player_to_draw) {
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	e2 5e       	subi	r30, 0xE2	; 226
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	f0 80       	ld	r15, Z
	int8_t player_y = player_y_coordinates[player_to_draw];
     472:	fc 01       	movw	r30, r24
     474:	ea 5d       	subi	r30, 0xDA	; 218
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	00 81       	ld	r16, Z

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     47a:	00 2e       	mov	r0, r16
     47c:	00 0c       	add	r0, r0
     47e:	11 0b       	sbc	r17, r17
     480:	e8 01       	movw	r28, r16
     482:	06 c0       	rjmp	.+12     	; 0x490 <draw_player_paddle+0x32>
		update_square_colour(player_x, y, PLAYER);
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	6c 2f       	mov	r22, r28
     488:	8f 2d       	mov	r24, r15
     48a:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
// This makes it easier to draw the multiple pixels of the players.
void draw_player_paddle(uint8_t player_to_draw) {
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
	int8_t player_y = player_y_coordinates[player_to_draw];

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	c8 01       	movw	r24, r16
     492:	02 96       	adiw	r24, 0x02	; 2
     494:	c8 17       	cp	r28, r24
     496:	d9 07       	cpc	r29, r25
     498:	ac f3       	brlt	.-22     	; 0x484 <draw_player_paddle+0x26>
		update_square_colour(player_x, y, PLAYER);
	}
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	ff 90       	pop	r15
     4a4:	08 95       	ret

000004a6 <initialise_game>:

// Initialise the player paddles, ball and display to start a game of PONG.
void initialise_game(void) {
	
	// initialise the display we are using.
	initialise_display();
     4a6:	0e 94 19 01 	call	0x232	; 0x232 <initialise_display>

	// Start players in the middle of the board
	player_y_coordinates[PLAYER_1] = BOARD_HEIGHT / 2 - 1;
     4aa:	e6 e2       	ldi	r30, 0x26	; 38
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	80 83       	st	Z, r24
	player_y_coordinates[PLAYER_2] = BOARD_HEIGHT / 2 - 1;
     4b2:	81 83       	std	Z+1, r24	; 0x01

	draw_player_paddle(PLAYER_1);
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 2f 02 	call	0x45e	; 0x45e <draw_player_paddle>
	draw_player_paddle(PLAYER_2);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 2f 02 	call	0x45e	; 0x45e <draw_player_paddle>

	// Clear the old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <ball_y>
     4c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ball_x>
     4ca:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
	
	// Reset ball position and direction
	ball_x = BALL_START_X;
     4ce:	85 e0       	ldi	r24, 0x05	; 5
     4d0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <ball_x>
	ball_y = BALL_START_Y;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <ball_y>

	ball_x_direction = LEFT;
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <ball_x_direction>
	ball_y_direction = UP;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ball_y_direction>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
     4e6:	42 e0       	ldi	r20, 0x02	; 2
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
     4f0:	08 95       	ret

000004f2 <erase_player_paddle>:
		update_square_colour(player_x, y, PLAYER);
	}
}

// Erase the pixels of player 1 or 2 from the display.
void erase_player_paddle(uint8_t player_to_draw) {
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fc 01       	movw	r30, r24
     500:	e2 5e       	subi	r30, 0xE2	; 226
     502:	fe 4f       	sbci	r31, 0xFE	; 254
     504:	f0 80       	ld	r15, Z
	int8_t player_y = player_y_coordinates[player_to_draw];
     506:	fc 01       	movw	r30, r24
     508:	ea 5d       	subi	r30, 0xDA	; 218
     50a:	fe 4f       	sbci	r31, 0xFE	; 254
     50c:	00 81       	ld	r16, Z

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     50e:	00 2e       	mov	r0, r16
     510:	00 0c       	add	r0, r0
     512:	11 0b       	sbc	r17, r17
     514:	e8 01       	movw	r28, r16
     516:	06 c0       	rjmp	.+12     	; 0x524 <erase_player_paddle+0x32>
		update_square_colour(player_x, y, EMPTY_SQUARE);
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	6c 2f       	mov	r22, r28
     51c:	8f 2d       	mov	r24, r15
     51e:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
// Erase the pixels of player 1 or 2 from the display.
void erase_player_paddle(uint8_t player_to_draw) {
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
	int8_t player_y = player_y_coordinates[player_to_draw];

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     522:	21 96       	adiw	r28, 0x01	; 1
     524:	c8 01       	movw	r24, r16
     526:	02 96       	adiw	r24, 0x02	; 2
     528:	c8 17       	cp	r28, r24
     52a:	d9 07       	cpc	r29, r25
     52c:	ac f3       	brlt	.-22     	; 0x518 <erase_player_paddle+0x26>
		update_square_colour(player_x, y, EMPTY_SQUARE);
	}
}
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	08 95       	ret

0000053a <move_player_paddle>:

// Try and move the selected player's y coordinate by the amount specified.
// For example, to move player 1's paddle up one space, call the function
// as `move_player(PLAYER_1, 1)`. Use `-1` instead to move the paddle down. No
// pixels of the player paddles should be allowed to move off the display.
void move_player_paddle(int8_t player, int8_t direction) {
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	d8 2f       	mov	r29, r24
     546:	f6 2e       	mov	r15, r22
	 * 3: Update the positional knowledge of the player. This will involve the
	 *    player coordinate variables.
	 * 4: Display the player at their new position.
	 */	
	// YOUR CODE HERE
	int8_t player_y = player_y_coordinates[player];
     548:	08 2f       	mov	r16, r24
     54a:	08 2e       	mov	r0, r24
     54c:	00 0c       	add	r0, r0
     54e:	11 0b       	sbc	r17, r17
     550:	f8 01       	movw	r30, r16
     552:	ea 5d       	subi	r30, 0xDA	; 218
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	c0 81       	ld	r28, Z
	
	// Erase the old paddle
	erase_player_paddle(player);
     558:	0e 94 79 02 	call	0x4f2	; 0x4f2 <erase_player_paddle>
	
	// Calculate the new y-coordinate for the player y paddle 
	int8_t new_player_y = player_y + direction;
     55c:	8c 2f       	mov	r24, r28
     55e:	8f 0d       	add	r24, r15
	
	// Check if the paddle will move off the display
	if (new_player_y >= 0 && new_player_y + PLAYER_HEIGHT <= BOARD_HEIGHT) {
     560:	7a f1       	brmi	.+94     	; 0x5c0 <move_player_paddle+0x86>
     562:	28 2f       	mov	r18, r24
     564:	08 2e       	mov	r0, r24
     566:	00 0c       	add	r0, r0
     568:	33 0b       	sbc	r19, r19
     56a:	a9 01       	movw	r20, r18
     56c:	4e 5f       	subi	r20, 0xFE	; 254
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	49 30       	cpi	r20, 0x09	; 9
     572:	51 05       	cpc	r21, r1
     574:	2c f5       	brge	.+74     	; 0x5c0 <move_player_paddle+0x86>
		// Check if the new paddle position is in the same column as the ball
		if (ball_x == PLAYER_X_COORDINATES[player]) {
     576:	f8 01       	movw	r30, r16
     578:	e2 5e       	subi	r30, 0xE2	; 226
     57a:	fe 4f       	sbci	r31, 0xFE	; 254
     57c:	40 81       	ld	r20, Z
     57e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <ball_x>
     582:	49 13       	cpse	r20, r25
     584:	18 c0       	rjmp	.+48     	; 0x5b6 <move_player_paddle+0x7c>
			// Adjust the new position based on the ball's position
			if (direction > 0) {
     586:	1f 14       	cp	r1, r15
     588:	74 f4       	brge	.+28     	; 0x5a6 <move_player_paddle+0x6c>
				if (ball_y <= new_player_y + PLAYER_HEIGHT - 1) {
     58a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ball_y>
     58e:	49 2f       	mov	r20, r25
     590:	09 2e       	mov	r0, r25
     592:	00 0c       	add	r0, r0
     594:	55 0b       	sbc	r21, r21
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	24 17       	cp	r18, r20
     59c:	35 07       	cpc	r19, r21
     59e:	5c f0       	brlt	.+22     	; 0x5b6 <move_player_paddle+0x7c>
					new_player_y = ball_y - PLAYER_HEIGHT + 1;
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	89 0f       	add	r24, r25
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <move_player_paddle+0x7c>
				}
			} else if (direction < 0) {
     5a6:	ff 20       	and	r15, r15
     5a8:	34 f4       	brge	.+12     	; 0x5b6 <move_player_paddle+0x7c>
				if (ball_y >= new_player_y) {
     5aa:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ball_y>
     5ae:	98 17       	cp	r25, r24
     5b0:	14 f0       	brlt	.+4      	; 0x5b6 <move_player_paddle+0x7c>
					new_player_y = ball_y + 1;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	89 0f       	add	r24, r25
				}
			}
		}
		// Update the player's y-coordinate
		player_y_coordinates[player] = new_player_y;
     5b6:	f8 01       	movw	r30, r16
     5b8:	ea 5d       	subi	r30, 0xDA	; 218
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	80 83       	st	Z, r24
     5be:	0c c0       	rjmp	.+24     	; 0x5d8 <move_player_paddle+0x9e>
	} else if (new_player_y < 0) {
     5c0:	88 23       	and	r24, r24
     5c2:	2c f4       	brge	.+10     	; 0x5ce <move_player_paddle+0x94>
		// Paddle reached the upper bound, set it to 0
		player_y_coordinates[player] = 0;
     5c4:	f8 01       	movw	r30, r16
     5c6:	ea 5d       	subi	r30, 0xDA	; 218
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ca:	10 82       	st	Z, r1
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <move_player_paddle+0x9e>
	} else {
		// Paddle reached the lower bound, set it to the maximum valid position
		player_y_coordinates[player] = BOARD_HEIGHT - PLAYER_HEIGHT;
     5ce:	f8 01       	movw	r30, r16
     5d0:	ea 5d       	subi	r30, 0xDA	; 218
     5d2:	fe 4f       	sbci	r31, 0xFE	; 254
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	80 83       	st	Z, r24
	}
	// Draw the new paddle
	draw_player_paddle(player);
     5d8:	8d 2f       	mov	r24, r29
     5da:	0e 94 2f 02 	call	0x45e	; 0x45e <draw_player_paddle>
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	08 95       	ret

000005ea <update_ball_position>:

// Update ball position based on current x direction and y direction of ball
void update_ball_position(void) {
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
	
	// Determine new ball coordinates
	int8_t new_ball_x = ball_x + ball_x_direction;
     5ee:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <ball_x>
     5f2:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <ball_x_direction>
     5f6:	c8 2f       	mov	r28, r24
     5f8:	c9 0f       	add	r28, r25
	int8_t new_ball_y = ball_y + ball_y_direction;
     5fa:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <ball_y>
     5fe:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <ball_y_direction>
     602:	d6 2f       	mov	r29, r22
     604:	d2 0f       	add	r29, r18
	
	// Check for collision with top wall
	if (new_ball_y < 0) {
     606:	22 f4       	brpl	.+8      	; 0x610 <update_ball_position+0x26>
		// Invert vertical direction
		ball_y_direction = -ball_y_direction;
     608:	21 95       	neg	r18
     60a:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <ball_y_direction>
		// Set ball position at the top wall
		new_ball_y = 1;
     60e:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	// Check for collision with bottom wall
	if (new_ball_y > BOARD_HEIGHT - 1) {
     610:	d8 30       	cpi	r29, 0x08	; 8
     612:	34 f0       	brlt	.+12     	; 0x620 <update_ball_position+0x36>
		// Invert vertical direction
		ball_y_direction = -ball_y_direction;
     614:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <ball_y_direction>
     618:	21 95       	neg	r18
     61a:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <ball_y_direction>
		// Set ball position at the bottom wall
		new_ball_y = BOARD_HEIGHT - 2;
     61e:	d6 e0       	ldi	r29, 0x06	; 6
	}
	
	// Check for collision with left wall
	if (new_ball_x < 0) {
     620:	cc 23       	and	r28, r28
     622:	14 f4       	brge	.+4      	; 0x628 <update_ball_position+0x3e>
		// Reset ball position to (5, 4)
		new_ball_x = 5;
		new_ball_y = 4;
     624:	d4 e0       	ldi	r29, 0x04	; 4
	}
	
	// Check for collision with left wall
	if (new_ball_x < 0) {
		// Reset ball position to (5, 4)
		new_ball_x = 5;
     626:	c5 e0       	ldi	r28, 0x05	; 5
		new_ball_y = 4;
	}
	
	// Check for collision with right wall 
	if (new_ball_x >= BOARD_WIDTH) {
     628:	cc 30       	cpi	r28, 0x0C	; 12
     62a:	14 f0       	brlt	.+4      	; 0x630 <update_ball_position+0x46>
		// Reset ball position to (5, 4)
		new_ball_x = 5;
		new_ball_y = 4;
     62c:	d4 e0       	ldi	r29, 0x04	; 4
	}
	
	// Check for collision with right wall 
	if (new_ball_x >= BOARD_WIDTH) {
		// Reset ball position to (5, 4)
		new_ball_x = 5;
     62e:	c5 e0       	ldi	r28, 0x05	; 5
		new_ball_y = 4;
	}
	
	// Check for collision with player paddles 
	if (new_ball_x == PLAYER_1_X + 1 && ball_x_direction < 0) {
     630:	c1 30       	cpi	r28, 0x01	; 1
     632:	29 f5       	brne	.+74     	; 0x67e <update_ball_position+0x94>
     634:	99 23       	and	r25, r25
     636:	1c f5       	brge	.+70     	; 0x67e <update_ball_position+0x94>
		// Ball is approaching player 1 paddle from the right
		if (new_ball_y >= player_y_coordinates[PLAYER_1] && new_ball_y < player_y_coordinates[PLAYER_1] + PLAYER_HEIGHT) {
     638:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <player_y_coordinates>
     63c:	d2 17       	cp	r29, r18
     63e:	0c f4       	brge	.+2      	; 0x642 <update_ball_position+0x58>
     640:	43 c0       	rjmp	.+134    	; 0x6c8 <update_ball_position+0xde>
     642:	42 2f       	mov	r20, r18
     644:	02 2e       	mov	r0, r18
     646:	00 0c       	add	r0, r0
     648:	55 0b       	sbc	r21, r21
     64a:	4e 5f       	subi	r20, 0xFE	; 254
     64c:	5f 4f       	sbci	r21, 0xFF	; 255
     64e:	ed 2f       	mov	r30, r29
     650:	0d 2e       	mov	r0, r29
     652:	00 0c       	add	r0, r0
     654:	ff 0b       	sbc	r31, r31
     656:	e4 17       	cp	r30, r20
     658:	f5 07       	cpc	r31, r21
     65a:	b4 f5       	brge	.+108    	; 0x6c8 <update_ball_position+0xde>
			// Ball collides with player 1 paddle
			if (ball_y_direction < 0) {
     65c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <ball_y_direction>
     660:	33 23       	and	r19, r19
     662:	24 f4       	brge	.+8      	; 0x66c <update_ball_position+0x82>
				ball_x_direction = -ball_x_direction;	// Ball is moving up, invert horizontal direction 			
     664:	91 95       	neg	r25
     666:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <ball_x_direction>
     66a:	2e c0       	rjmp	.+92     	; 0x6c8 <update_ball_position+0xde>
			} else if (ball_y_direction > 0) {
     66c:	13 16       	cp	r1, r19
     66e:	64 f5       	brge	.+88     	; 0x6c8 <update_ball_position+0xde>
				// Ball is moving down, determine if it should bounce or pass
				int8_t paddle_collision_point = player_y_coordinates[PLAYER_1] + PLAYER_HEIGHT - 1;
     670:	2f 5f       	subi	r18, 0xFF	; 255
				if (new_ball_y > paddle_collision_point) {
     672:	2d 17       	cp	r18, r29
     674:	4c f1       	brlt	.+82     	; 0x6c8 <update_ball_position+0xde>
					// Ball passes below the paddle, no bounce
				} else {
					// Ball bounce off the paddle, invert horizontal direction 
					ball_x_direction = -ball_x_direction;
     676:	91 95       	neg	r25
     678:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <ball_x_direction>
     67c:	25 c0       	rjmp	.+74     	; 0x6c8 <update_ball_position+0xde>
				}
			}
		}
	} else if (new_ball_x == PLAYER_2_X - 1 && ball_x_direction > 0) {
     67e:	ca 30       	cpi	r28, 0x0A	; 10
     680:	19 f5       	brne	.+70     	; 0x6c8 <update_ball_position+0xde>
     682:	19 16       	cp	r1, r25
     684:	0c f5       	brge	.+66     	; 0x6c8 <update_ball_position+0xde>
		// Ball is approaching player 2 paddle from the left
		if (new_ball_y >= player_y_coordinates[PLAYER_2] && new_ball_y < player_y_coordinates[PLAYER_2] + PLAYER_HEIGHT) {
     686:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <player_y_coordinates+0x1>
     68a:	d2 17       	cp	r29, r18
     68c:	ec f0       	brlt	.+58     	; 0x6c8 <update_ball_position+0xde>
     68e:	42 2f       	mov	r20, r18
     690:	02 2e       	mov	r0, r18
     692:	00 0c       	add	r0, r0
     694:	55 0b       	sbc	r21, r21
     696:	4e 5f       	subi	r20, 0xFE	; 254
     698:	5f 4f       	sbci	r21, 0xFF	; 255
     69a:	ed 2f       	mov	r30, r29
     69c:	0d 2e       	mov	r0, r29
     69e:	00 0c       	add	r0, r0
     6a0:	ff 0b       	sbc	r31, r31
     6a2:	e4 17       	cp	r30, r20
     6a4:	f5 07       	cpc	r31, r21
     6a6:	84 f4       	brge	.+32     	; 0x6c8 <update_ball_position+0xde>
			// Ball collides with player 2 paddle
			if (ball_y_direction < 0) {
     6a8:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <ball_y_direction>
     6ac:	33 23       	and	r19, r19
     6ae:	24 f4       	brge	.+8      	; 0x6b8 <update_ball_position+0xce>
				ball_x_direction = -ball_x_direction;	// Ball is moving up, invert horizontal direction
     6b0:	91 95       	neg	r25
     6b2:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <ball_x_direction>
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <update_ball_position+0xde>
			} else if (ball_y_direction > 0) {
     6b8:	13 16       	cp	r1, r19
     6ba:	34 f4       	brge	.+12     	; 0x6c8 <update_ball_position+0xde>
				// Ball is moving down, determine bounce or pass
				int8_t paddle_collision_point = player_y_coordinates[PLAYER_2] + PLAYER_HEIGHT - 1;
     6bc:	2f 5f       	subi	r18, 0xFF	; 255
				if (new_ball_y > paddle_collision_point) {
     6be:	2d 17       	cp	r18, r29
     6c0:	1c f0       	brlt	.+6      	; 0x6c8 <update_ball_position+0xde>
					// Ball passes below the paddle, no bounce
				} else {
					// Ball bounce off the paddle, invert horizontal direction 
					ball_x_direction = -ball_x_direction;
     6c2:	91 95       	neg	r25
     6c4:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <ball_x_direction>
			}
		}
	}
	
	// Erase old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
	
	// Assign new ball coordinates
	ball_x = new_ball_x;
     6ce:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <ball_x>
	ball_y = new_ball_y;
     6d2:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <ball_y>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
     6d6:	42 e0       	ldi	r20, 0x02	; 2
     6d8:	6d 2f       	mov	r22, r29
     6da:	8c 2f       	mov	r24, r28
     6dc:	0e 94 22 02 	call	0x444	; 0x444 <update_square_colour>
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <is_game_over>:
// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void) {
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	return 0;
}
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     6ea:	80 e8       	ldi	r24, 0x80	; 128
     6ec:	0e 94 3f 06 	call	0xc7e	; 0xc7e <spi_setup_master>
     6f0:	08 95       	ret

000006f2 <ledmatrix_update_pixel>:
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	80 31       	cpi	r24, 0x10	; 16
     6fa:	b0 f4       	brcc	.+44     	; 0x728 <ledmatrix_update_pixel+0x36>
     6fc:	68 30       	cpi	r22, 0x08	; 8
     6fe:	a0 f4       	brcc	.+40     	; 0x728 <ledmatrix_update_pixel+0x36>
     700:	14 2f       	mov	r17, r20
     702:	c6 2f       	mov	r28, r22
     704:	d8 2f       	mov	r29, r24
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     70c:	6c 2f       	mov	r22, r28
     70e:	67 70       	andi	r22, 0x07	; 7
     710:	80 e1       	ldi	r24, 0x10	; 16
     712:	68 9f       	mul	r22, r24
     714:	90 01       	movw	r18, r0
     716:	11 24       	eor	r1, r1
     718:	8d 2f       	mov	r24, r29
     71a:	8f 70       	andi	r24, 0x0F	; 15
     71c:	82 2b       	or	r24, r18
     71e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     722:	81 2f       	mov	r24, r17
     724:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	08 95       	ret

00000730 <ledmatrix_update_column>:
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	80 31       	cpi	r24, 0x10	; 16
     738:	a0 f4       	brcc	.+40     	; 0x762 <ledmatrix_update_column+0x32>
     73a:	8b 01       	movw	r16, r22
     73c:	c8 2f       	mov	r28, r24
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     744:	8c 2f       	mov	r24, r28
     746:	8f 70       	andi	r24, 0x0F	; 15
     748:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     74c:	c0 e0       	ldi	r28, 0x00	; 0
     74e:	07 c0       	rjmp	.+14     	; 0x75e <ledmatrix_update_column+0x2e>
     750:	f8 01       	movw	r30, r16
     752:	ec 0f       	add	r30, r28
     754:	f1 1d       	adc	r31, r1
     756:	80 81       	ld	r24, Z
     758:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     75c:	cf 5f       	subi	r28, 0xFF	; 255
     75e:	c8 30       	cpi	r28, 0x08	; 8
     760:	b8 f3       	brcs	.-18     	; 0x750 <ledmatrix_update_column+0x20>
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <spi_send_byte>
     770:	08 95       	ret

00000772 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     772:	0e 94 75 03 	call	0x6ea	; 0x6ea <ledmatrix_setup>
	init_button_interrupts();
     776:	0e 94 9b 00 	call	0x136	; 0x136 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	7b e4       	ldi	r23, 0x4B	; 75
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 57 05 	call	0xaae	; 0xaae <init_serial_stdio>
	
	init_timer0();
     788:	0e 94 94 06 	call	0xd28	; 0xd28 <init_timer0>
	
	// Turn on global interrupts
	sei();
     78c:	78 94       	sei
     78e:	08 95       	ret

00000790 <start_screen>:
}

void start_screen(void) {
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	cf 93       	push	r28
	// Start Screen (Level 1: 4 marks)
	// Clear terminal screen and output a message
	clear_terminal();
     7a2:	0e 94 82 06 	call	0xd04	; 0xd04 <clear_terminal>
	show_cursor();
     7a6:	0e 94 8b 06 	call	0xd16	; 0xd16 <show_cursor>
	move_terminal_cursor(10,10);
     7aa:	6a e0       	ldi	r22, 0x0A	; 10
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	8a e0       	ldi	r24, 0x0A	; 10
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 71 06 	call	0xce2	; 0xce2 <move_terminal_cursor>
	printf_P(PSTR("PONG"));
     7b6:	8e ed       	ldi	r24, 0xDE	; 222
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
	move_terminal_cursor(10,12);
     7c2:	6c e0       	ldi	r22, 0x0C	; 12
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 71 06 	call	0xce2	; 0xce2 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 A2 by NAM Hiu Yi - 46604563"));
     7ce:	84 eb       	ldi	r24, 0xB4	; 180
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     7da:	0e 94 5d 01 	call	0x2ba	; 0x2ba <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     7de:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_current_time>
     7e2:	4b 01       	movw	r8, r22
     7e4:	5c 01       	movw	r10, r24
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
	
	uint8_t frame_number = 0;
     7ee:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     7f0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <serial_input_available>
     7f4:	88 23       	and	r24, r24
     7f6:	39 f0       	breq	.+14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
			serial_input = fgetc(stdin);
     7f8:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <__iob>
     7fc:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__iob+0x1>
     800:	0e 94 48 07 	call	0xe90	; 0xe90 <fgetc>
     804:	01 c0       	rjmp	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     806:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     808:	83 37       	cpi	r24, 0x73	; 115
     80a:	19 f1       	breq	.+70     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     80c:	83 35       	cpi	r24, 0x53	; 83
     80e:	09 f1       	breq	.+66     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     810:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     814:	8f 3f       	cpi	r24, 0xFF	; 255
     816:	e9 f4       	brne	.+58     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
			break;
		}

		current_time = get_current_time();
     818:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_current_time>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > 500) {
     820:	ab 01       	movw	r20, r22
     822:	bc 01       	movw	r22, r24
     824:	48 19       	sub	r20, r8
     826:	59 09       	sbc	r21, r9
     828:	6a 09       	sbc	r22, r10
     82a:	7b 09       	sbc	r23, r11
     82c:	45 3f       	cpi	r20, 0xF5	; 245
     82e:	51 40       	sbci	r21, 0x01	; 1
     830:	61 05       	cpc	r22, r1
     832:	71 05       	cpc	r23, r1
     834:	e8 f2       	brcs	.-70     	; 0x7f0 <start_screen+0x60>
			update_start_screen(frame_number);
     836:	8c 2f       	mov	r24, r28
     838:	0e 94 a6 01 	call	0x34c	; 0x34c <update_start_screen>
			frame_number = (frame_number + 1) % 12;
     83c:	8c 2f       	mov	r24, r28
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	6c e0       	ldi	r22, 0x0C	; 12
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	0e 94 df 06 	call	0xdbe	; 0xdbe <__divmodhi4>
     84a:	c8 2f       	mov	r28, r24
			last_screen_update = current_time;
     84c:	46 01       	movw	r8, r12
     84e:	57 01       	movw	r10, r14
     850:	cf cf       	rjmp	.-98     	; 0x7f0 <start_screen+0x60>
		}
	}
}
     852:	cf 91       	pop	r28
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	af 90       	pop	r10
     860:	9f 90       	pop	r9
     862:	8f 90       	pop	r8
     864:	08 95       	ret

00000866 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     866:	0e 94 82 06 	call	0xd04	; 0xd04 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     86a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     86e:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
	clear_serial_input_buffer();
     872:	0e 94 a5 05 	call	0xb4a	; 0xb4a <clear_serial_input_buffer>
     876:	08 95       	ret

00000878 <play_game>:
}

void play_game(void) {
     878:	8f 92       	push	r8
     87a:	9f 92       	push	r9
     87c:	af 92       	push	r10
     87e:	bf 92       	push	r11
     880:	cf 92       	push	r12
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
	uint8_t btn; // The button pushed
	
	char escape_sequence_char;
	uint8_t chars_in_escape_sequence = 0;
	
	last_ball_move_time = get_current_time();
     88c:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_current_time>
     890:	4b 01       	movw	r8, r22
     892:	5c 01       	movw	r10, r24
	
	uint32_t last_ball_move_time, current_time;
	uint8_t btn; // The button pushed
	
	char escape_sequence_char;
	uint8_t chars_in_escape_sequence = 0;
     894:	d0 e0       	ldi	r29, 0x00	; 0
	
	last_ball_move_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over()) {
     896:	69 c0       	rjmp	.+210    	; 0x96a <__stack+0x6b>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
     898:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
     89c:	c8 2f       	mov	r28, r24
		
		char serial_input = 1;
		escape_sequence_char = -1;
		
		if (serial_input_available()) {
     89e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <serial_input_available>
     8a2:	88 23       	and	r24, r24
     8a4:	c1 f0       	breq	.+48     	; 0x8d6 <play_game+0x5e>
			serial_input = fgetc(stdin);
     8a6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <__iob>
     8aa:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__iob+0x1>
     8ae:	0e 94 48 07 	call	0xe90	; 0xe90 <fgetc>
			if (chars_in_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     8b2:	d1 11       	cpse	r29, r1
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <play_game+0x48>
     8b6:	8b 31       	cpi	r24, 0x1B	; 27
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <play_game+0x48>
				chars_in_escape_sequence ++;
     8ba:	df 5f       	subi	r29, 0xFF	; 255
				serial_input = -1;
     8bc:	8f ef       	ldi	r24, 0xFF	; 255
     8be:	0f c0       	rjmp	.+30     	; 0x8de <play_game+0x66>
				} else if (chars_in_escape_sequence == 1 && serial_input == '[') {
     8c0:	d1 30       	cpi	r29, 0x01	; 1
     8c2:	29 f4       	brne	.+10     	; 0x8ce <play_game+0x56>
     8c4:	8b 35       	cpi	r24, 0x5B	; 91
     8c6:	19 f4       	brne	.+6      	; 0x8ce <play_game+0x56>
				chars_in_escape_sequence ++;
     8c8:	df 5f       	subi	r29, 0xFF	; 255
				serial_input = -1;
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	08 c0       	rjmp	.+16     	; 0x8de <play_game+0x66>
				} else if (chars_in_escape_sequence == 2) {
     8ce:	d2 30       	cpi	r29, 0x02	; 2
     8d0:	21 f0       	breq	.+8      	; 0x8da <play_game+0x62>
				escape_sequence_char = serial_input;
				serial_input = -1;
				chars_in_escape_sequence = 0;
				} else {
				chars_in_escape_sequence = 0;
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <play_game+0x66>
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		
		char serial_input = 1;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <play_game+0x66>
				} else if (chars_in_escape_sequence == 1 && serial_input == '[') {
				chars_in_escape_sequence ++;
				serial_input = -1;
				} else if (chars_in_escape_sequence == 2) {
				escape_sequence_char = serial_input;
				serial_input = -1;
     8da:	8f ef       	ldi	r24, 0xFF	; 255
				chars_in_escape_sequence = 0;
     8dc:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}

		// Move Paddles with Buttons (Level 1: 8 marks)
		// Move Paddles with Terminal Input (Level 1: 4 marks)
		if (serial_input == 'w' || serial_input == 'W' || btn == BUTTON3_PUSHED) {
     8de:	87 37       	cpi	r24, 0x77	; 119
     8e0:	21 f0       	breq	.+8      	; 0x8ea <play_game+0x72>
     8e2:	87 35       	cpi	r24, 0x57	; 87
     8e4:	11 f0       	breq	.+4      	; 0x8ea <play_game+0x72>
     8e6:	c3 30       	cpi	r28, 0x03	; 3
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <play_game+0x7c>
			// If button 3 is pushed, move player 1 one space up
			// YOU WILL NEED TO IMPLEMENT THIS FUNCTION
			move_player_paddle(PLAYER_1, UP);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 9d 02 	call	0x53a	; 0x53a <move_player_paddle>
     8f2:	28 c0       	rjmp	.+80     	; 0x944 <__stack+0x45>
		} else if (serial_input == 's' || serial_input == 'S' || 
     8f4:	83 37       	cpi	r24, 0x73	; 115
     8f6:	41 f0       	breq	.+16     	; 0x908 <__stack+0x9>
     8f8:	83 35       	cpi	r24, 0x53	; 83
     8fa:	31 f0       	breq	.+12     	; 0x908 <__stack+0x9>
     8fc:	84 36       	cpi	r24, 0x64	; 100
     8fe:	21 f0       	breq	.+8      	; 0x908 <__stack+0x9>
			serial_input == 'd' || serial_input == 'D' || btn == BUTTON2_PUSHED) {
     900:	84 34       	cpi	r24, 0x44	; 68
     902:	11 f0       	breq	.+4      	; 0x908 <__stack+0x9>
     904:	c2 30       	cpi	r28, 0x02	; 2
     906:	29 f4       	brne	.+10     	; 0x912 <__stack+0x13>
			// If button 2 is pushed, move player 1 one space down
			move_player_paddle(PLAYER_1, DOWN);
     908:	6f ef       	ldi	r22, 0xFF	; 255
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 9d 02 	call	0x53a	; 0x53a <move_player_paddle>
     910:	19 c0       	rjmp	.+50     	; 0x944 <__stack+0x45>
		} else if (serial_input == 'o' || serial_input == 'O' || btn == BUTTON1_PUSHED) {
     912:	8f 36       	cpi	r24, 0x6F	; 111
     914:	21 f0       	breq	.+8      	; 0x91e <__stack+0x1f>
     916:	8f 34       	cpi	r24, 0x4F	; 79
     918:	11 f0       	breq	.+4      	; 0x91e <__stack+0x1f>
     91a:	c1 30       	cpi	r28, 0x01	; 1
     91c:	29 f4       	brne	.+10     	; 0x928 <__stack+0x29>
			// If button 1 is pushed, mover player 2 one space up
			move_player_paddle(PLAYER_2, UP);
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	0e 94 9d 02 	call	0x53a	; 0x53a <move_player_paddle>
     926:	0e c0       	rjmp	.+28     	; 0x944 <__stack+0x45>
		} else if (serial_input == 'k' || serial_input == 'K' ||
     928:	8b 36       	cpi	r24, 0x6B	; 107
     92a:	41 f0       	breq	.+16     	; 0x93c <__stack+0x3d>
     92c:	8b 34       	cpi	r24, 0x4B	; 75
     92e:	31 f0       	breq	.+12     	; 0x93c <__stack+0x3d>
     930:	8c 36       	cpi	r24, 0x6C	; 108
     932:	21 f0       	breq	.+8      	; 0x93c <__stack+0x3d>
			serial_input == 'l' || serial_input == 'L' || btn == BUTTON0_PUSHED) {
     934:	8c 34       	cpi	r24, 0x4C	; 76
     936:	11 f0       	breq	.+4      	; 0x93c <__stack+0x3d>
     938:	c1 11       	cpse	r28, r1
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0x45>
			// If button 0 is pushed, move player 2 one space down
			move_player_paddle(PLAYER_2, DOWN);
     93c:	6f ef       	ldi	r22, 0xFF	; 255
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 9d 02 	call	0x53a	; 0x53a <move_player_paddle>
		}
		
		current_time = get_current_time();
     944:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_current_time>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
		if (current_time >= last_ball_move_time + 500) {
     94c:	d5 01       	movw	r26, r10
     94e:	c4 01       	movw	r24, r8
     950:	8c 50       	subi	r24, 0x0C	; 12
     952:	9e 4f       	sbci	r25, 0xFE	; 254
     954:	af 4f       	sbci	r26, 0xFF	; 255
     956:	bf 4f       	sbci	r27, 0xFF	; 255
     958:	c8 16       	cp	r12, r24
     95a:	d9 06       	cpc	r13, r25
     95c:	ea 06       	cpc	r14, r26
     95e:	fb 06       	cpc	r15, r27
     960:	20 f0       	brcs	.+8      	; 0x96a <__stack+0x6b>
			// 500ms (0.5 second) has passed since the last time we move the
			// ball, so update the position of the ball based on current x
			// direction and y direction
			update_ball_position();
     962:	0e 94 f5 02 	call	0x5ea	; 0x5ea <update_ball_position>
			
			// Update the most recent time the ball was moved
			last_ball_move_time = current_time;
     966:	46 01       	movw	r8, r12
     968:	57 01       	movw	r10, r14
	uint8_t chars_in_escape_sequence = 0;
	
	last_ball_move_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over()) {
     96a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <is_game_over>
     96e:	88 23       	and	r24, r24
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
     972:	92 cf       	rjmp	.-220    	; 0x898 <play_game+0x20>
			// Update the most recent time the ball was moved
			last_ball_move_time = current_time;
		}
	}
	// We get here if the game is over.
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	08 95       	ret

0000098a <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
     98a:	6e e0       	ldi	r22, 0x0E	; 14
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	8a e0       	ldi	r24, 0x0A	; 10
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 71 06 	call	0xce2	; 0xce2 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     996:	8a ea       	ldi	r24, 0xAA	; 170
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
	move_terminal_cursor(10,15);
     9a2:	6f e0       	ldi	r22, 0x0F	; 15
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	8a e0       	ldi	r24, 0x0A	; 10
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 71 06 	call	0xce2	; 0xce2 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     9ae:	8c e7       	ldi	r24, 0x7C	; 124
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED) {
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0e 94 ab 00 	call	0x156	; 0x156 <button_pushed>
     9c6:	8f 3f       	cpi	r24, 0xFF	; 255
     9c8:	e1 f3       	breq	.-8      	; 0x9c2 <handle_game_over+0x38>
		; // wait
	}
}
     9ca:	08 95       	ret

000009cc <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     9cc:	0e 94 b9 03 	call	0x772	; 0x772 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
     9d0:	0e 94 c8 03 	call	0x790	; 0x790 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
     9d4:	0e 94 33 04 	call	0x866	; 0x866 <new_game>
		play_game();
     9d8:	0e 94 3c 04 	call	0x878	; 0x878 <play_game>
		handle_game_over();
     9dc:	0e 94 c5 04 	call	0x98a	; 0x98a <handle_game_over>
     9e0:	f9 cf       	rjmp	.-14     	; 0x9d4 <main+0x8>

000009e2 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     9e2:	cf 93       	push	r28
     9e4:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n') {
     9e6:	8a 30       	cpi	r24, 0x0A	; 10
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     9ea:	8d e0       	ldi	r24, 0x0D	; 13
     9ec:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     9f0:	9f b7       	in	r25, 0x3f	; 63
     9f2:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <uart_put_char+0x18>
		if (!interrupts_enabled) {
     9f6:	99 23       	and	r25, r25
     9f8:	29 f1       	breq	.+74     	; 0xa44 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     9fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     9fe:	8f 3f       	cpi	r24, 0xFF	; 255
     a00:	d1 f3       	breq	.-12     	; 0x9f6 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     a02:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     a04:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	8e 0f       	add	r24, r30
     a0c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <out_insert_pos>
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	ed 5c       	subi	r30, 0xCD	; 205
     a14:	fe 4f       	sbci	r31, 0xFE	; 254
     a16:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     a18:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE) {
     a22:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <out_insert_pos>
     a26:	8f 3f       	cpi	r24, 0xFF	; 255
     a28:	11 f4       	brne	.+4      	; 0xa2e <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     a2a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     a2e:	e1 ec       	ldi	r30, 0xC1	; 193
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	80 62       	ori	r24, 0x20	; 32
     a36:	80 83       	st	Z, r24
	if (interrupts_enabled) {
     a38:	99 23       	and	r25, r25
     a3a:	39 f0       	breq	.+14     	; 0xa4a <uart_put_char+0x68>
		sei();
     a3c:	78 94       	sei
	}
	return 0;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if (!interrupts_enabled) {
			return 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled) {
		sei();
	}
	return 0;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
}
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0) {
     a52:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     a56:	88 23       	and	r24, r24
     a58:	e1 f3       	breq	.-8      	; 0xa52 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     a5a:	2f b7       	in	r18, 0x3f	; 63
     a5c:	20 78       	andi	r18, 0x80	; 128
	cli();
     a5e:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0) {
     a60:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <input_insert_pos>
     a64:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <bytes_in_input_buffer>
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	83 1b       	sub	r24, r19
     a6c:	91 09       	sbc	r25, r1
     a6e:	5a f4       	brpl	.+22     	; 0xa86 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     a70:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     a74:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	e8 1b       	sub	r30, r24
     a7c:	f1 09       	sbc	r31, r1
     a7e:	ed 5b       	subi	r30, 0xBD	; 189
     a80:	fd 4f       	sbci	r31, 0xFD	; 253
     a82:	80 81       	ld	r24, Z
     a84:	0a c0       	rjmp	.+20     	; 0xa9a <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     a86:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     a8a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	e8 1b       	sub	r30, r24
     a92:	f1 09       	sbc	r31, r1
     a94:	ed 5c       	subi	r30, 0xCD	; 205
     a96:	fd 4f       	sbci	r31, 0xFD	; 253
     a98:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     a9a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <bytes_in_input_buffer>
     a9e:	91 50       	subi	r25, 0x01	; 1
     aa0:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <bytes_in_input_buffer>
	if (interrupts_enabled) {
     aa4:	22 23       	and	r18, r18
     aa6:	09 f0       	breq	.+2      	; 0xaaa <uart_get_char+0x58>
		sei();
     aa8:	78 94       	sei
	}	
	return c;
}
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	08 95       	ret

00000aae <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     aae:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <out_insert_pos>
	bytes_in_out_buffer = 0;
     ab2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <bytes_in_out_buffer>
	input_insert_pos = 0;
     ab6:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
	bytes_in_input_buffer = 0;
     aba:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <bytes_in_input_buffer>
	input_overrun = 0;
     abe:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     ac2:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	aa 1f       	adc	r26, r26
     ad0:	bb 1f       	adc	r27, r27
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	aa 1f       	adc	r26, r26
     ad8:	bb 1f       	adc	r27, r27
     ada:	9c 01       	movw	r18, r24
     adc:	ad 01       	movw	r20, r26
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	44 1f       	adc	r20, r20
     ae4:	55 1f       	adc	r21, r21
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	72 e1       	ldi	r23, 0x12	; 18
     aea:	8a e7       	ldi	r24, 0x7A	; 122
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 f3 06 	call	0xde6	; 0xde6 <__divmodsi4>
     af2:	ba 01       	movw	r22, r20
     af4:	a9 01       	movw	r20, r18
     af6:	4f 5f       	subi	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	6f 4f       	sbci	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	db 01       	movw	r26, r22
     b00:	ca 01       	movw	r24, r20
     b02:	1a f4       	brpl	.+6      	; 0xb0a <init_serial_stdio+0x5c>
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	a1 1d       	adc	r26, r1
     b08:	b1 1d       	adc	r27, r1
     b0a:	b5 95       	asr	r27
     b0c:	a7 95       	ror	r26
     b0e:	97 95       	ror	r25
     b10:	87 95       	ror	r24
     b12:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     b14:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     b18:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     b1c:	e1 ec       	ldi	r30, 0xC1	; 193
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
     b24:	80 81       	ld	r24, Z
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     b2a:	e5 e4       	ldi	r30, 0x45	; 69
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	93 83       	std	Z+3, r25	; 0x03
     b34:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	80 83       	st	Z, r24
     b3a:	08 95       	ret

00000b3c <serial_input_available>:
}

int8_t serial_input_available(void) {
	return bytes_in_input_buffer != 0;
     b3c:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <bytes_in_input_buffer>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	91 11       	cpse	r25, r1
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <serial_input_available+0xc>
     b46:	80 e0       	ldi	r24, 0x00	; 0
}
     b48:	08 95       	ret

00000b4a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     b4a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
	bytes_in_input_buffer = 0;
     b4e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <bytes_in_input_buffer>
     b52:	08 95       	ret

00000b54 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0) {
     b68:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     b6c:	88 23       	and	r24, r24
     b6e:	29 f1       	breq	.+74     	; 0xbba <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
     b70:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <out_insert_pos>
     b74:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <bytes_in_out_buffer>
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	82 1b       	sub	r24, r18
     b7c:	91 09       	sbc	r25, r1
     b7e:	5a f4       	brpl	.+22     	; 0xb96 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     b80:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     b84:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	e8 1b       	sub	r30, r24
     b8c:	f1 09       	sbc	r31, r1
     b8e:	ee 5c       	subi	r30, 0xCE	; 206
     b90:	fd 4f       	sbci	r31, 0xFD	; 253
     b92:	90 81       	ld	r25, Z
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     b96:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <out_insert_pos>
     b9a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	e8 1b       	sub	r30, r24
     ba2:	f1 09       	sbc	r31, r1
     ba4:	ed 5c       	subi	r30, 0xCD	; 205
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     baa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     bae:	81 50       	subi	r24, 0x01	; 1
     bb0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     bb4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
     bba:	e1 ec       	ldi	r30, 0xC1	; 193
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	8f 7d       	andi	r24, 0xDF	; 223
     bc2:	80 83       	st	Z, r24
	}
}
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	cf 93       	push	r28
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     bfc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     c00:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <do_echo>
     c04:	88 23       	and	r24, r24
     c06:	49 f0       	breq	.+18     	; 0xc1a <__vector_20+0x42>
     c08:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <bytes_in_out_buffer>
     c0c:	8f 3f       	cpi	r24, 0xFF	; 255
     c0e:	29 f0       	breq	.+10     	; 0xc1a <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	8c 2f       	mov	r24, r28
     c16:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     c1a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     c1e:	80 31       	cpi	r24, 0x10	; 16
     c20:	20 f0       	brcs	.+8      	; 0xc2a <__vector_20+0x52>
		input_overrun = 1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <input_overrun>
     c28:	18 c0       	rjmp	.+48     	; 0xc5a <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     c2a:	cd 30       	cpi	r28, 0x0D	; 13
     c2c:	09 f4       	brne	.+2      	; 0xc30 <__vector_20+0x58>
			c = '\n';
     c2e:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     c30:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <input_insert_pos>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	8e 0f       	add	r24, r30
     c38:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <input_insert_pos>
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	ed 5c       	subi	r30, 0xCD	; 205
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     c44:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <bytes_in_input_buffer>
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
     c4e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <input_insert_pos>
     c52:	80 31       	cpi	r24, 0x10	; 16
     c54:	11 f4       	brne	.+4      	; 0xc5a <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     c56:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <input_insert_pos>
		}
	}
}
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	cf 91       	pop	r28
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     c7e:	94 b1       	in	r25, 0x04	; 4
     c80:	90 6b       	ori	r25, 0xB0	; 176
     c82:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
     c84:	95 b1       	in	r25, 0x05	; 5
     c86:	90 61       	ori	r25, 0x10	; 16
     c88:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     c8a:	90 e5       	ldi	r25, 0x50	; 80
     c8c:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider) {
     c8e:	88 30       	cpi	r24, 0x08	; 8
     c90:	21 f0       	breq	.+8      	; 0xc9a <spi_setup_master+0x1c>
     c92:	80 32       	cpi	r24, 0x20	; 32
     c94:	11 f0       	breq	.+4      	; 0xc9a <spi_setup_master+0x1c>
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	19 f4       	brne	.+6      	; 0xca0 <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9d bd       	out	0x2d, r25	; 45
			break;
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     ca0:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider) {
     ca2:	80 32       	cpi	r24, 0x20	; 32
     ca4:	69 f0       	breq	.+26     	; 0xcc0 <spi_setup_master+0x42>
     ca6:	28 f4       	brcc	.+10     	; 0xcb2 <spi_setup_master+0x34>
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	71 f0       	breq	.+28     	; 0xcc8 <spi_setup_master+0x4a>
     cac:	80 31       	cpi	r24, 0x10	; 16
     cae:	61 f0       	breq	.+24     	; 0xcc8 <spi_setup_master+0x4a>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <spi_setup_master+0x50>
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	29 f0       	breq	.+10     	; 0xcc0 <spi_setup_master+0x42>
     cb6:	80 38       	cpi	r24, 0x80	; 128
     cb8:	51 f4       	brne	.+20     	; 0xcce <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
     cba:	8c b5       	in	r24, 0x2c	; 44
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
     cc0:	8c b5       	in	r24, 0x2c	; 44
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	8c bd       	out	0x2c, r24	; 44
			break;
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
     cc8:	8c b5       	in	r24, 0x2c	; 44
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
     cce:	85 b1       	in	r24, 0x05	; 5
     cd0:	8f 7e       	andi	r24, 0xEF	; 239
     cd2:	85 b9       	out	0x05, r24	; 5
     cd4:	08 95       	ret

00000cd6 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
     cd6:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0) {
     cd8:	0d b4       	in	r0, 0x2d	; 45
     cda:	07 fe       	sbrs	r0, 7
     cdc:	fd cf       	rjmp	.-6      	; 0xcd8 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     cde:	8e b5       	in	r24, 0x2e	; 46
}
     ce0:	08 95       	ret

00000ce2 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[%dm"), parameter);
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
}
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	7f 93       	push	r23
     ce8:	6f 93       	push	r22
     cea:	8f ee       	ldi	r24, 0xEF	; 239
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	08 95       	ret

00000d04 <clear_terminal>:
     d04:	8a ee       	ldi	r24, 0xEA	; 234
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	08 95       	ret

00000d16 <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
     d16:	83 ee       	ldi	r24, 0xE3	; 227
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9f 93       	push	r25
     d1c:	8f 93       	push	r24
     d1e:	0e 94 86 07 	call	0xf0c	; 0xf0c <printf_P>
}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	08 95       	ret

00000d28 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
     d28:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <clock_ticks_ms>
     d2c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <clock_ticks_ms+0x1>
     d30:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <clock_ticks_ms+0x2>
     d34:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     d38:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     d3a:	8c e7       	ldi	r24, 0x7C	; 124
     d3c:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
     d46:	ee e6       	ldi	r30, 0x6E	; 110
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
     d50:	95 bb       	out	0x15, r25	; 21
     d52:	08 95       	ret

00000d54 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     d54:	8f b7       	in	r24, 0x3f	; 63
     d56:	28 2f       	mov	r18, r24
     d58:	20 78       	andi	r18, 0x80	; 128
	cli();
     d5a:	f8 94       	cli
	return_value = clock_ticks_ms;
     d5c:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <clock_ticks_ms>
     d60:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <clock_ticks_ms+0x1>
     d64:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <clock_ticks_ms+0x2>
     d68:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <clock_ticks_ms+0x3>
	if (interrupts_were_enabled) {
     d6c:	22 23       	and	r18, r18
     d6e:	09 f0       	breq	.+2      	; 0xd72 <get_current_time+0x1e>
		sei();
     d70:	78 94       	sei
	}
	return return_value;
}
     d72:	08 95       	ret

00000d74 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
     d86:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clock_ticks_ms>
     d8a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clock_ticks_ms+0x1>
     d8e:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <clock_ticks_ms+0x2>
     d92:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <clock_ticks_ms+0x3>
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	a1 1d       	adc	r26, r1
     d9a:	b1 1d       	adc	r27, r1
     d9c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <clock_ticks_ms>
     da0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <clock_ticks_ms+0x1>
     da4:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <clock_ticks_ms+0x2>
     da8:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <clock_ticks_ms+0x3>
}
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__divmodhi4>:
     dbe:	97 fb       	bst	r25, 7
     dc0:	07 2e       	mov	r0, r23
     dc2:	16 f4       	brtc	.+4      	; 0xdc8 <__divmodhi4+0xa>
     dc4:	00 94       	com	r0
     dc6:	07 d0       	rcall	.+14     	; 0xdd6 <__divmodhi4_neg1>
     dc8:	77 fd       	sbrc	r23, 7
     dca:	09 d0       	rcall	.+18     	; 0xdde <__divmodhi4_neg2>
     dcc:	0e 94 12 07 	call	0xe24	; 0xe24 <__udivmodhi4>
     dd0:	07 fc       	sbrc	r0, 7
     dd2:	05 d0       	rcall	.+10     	; 0xdde <__divmodhi4_neg2>
     dd4:	3e f4       	brtc	.+14     	; 0xde4 <__divmodhi4_exit>

00000dd6 <__divmodhi4_neg1>:
     dd6:	90 95       	com	r25
     dd8:	81 95       	neg	r24
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	08 95       	ret

00000dde <__divmodhi4_neg2>:
     dde:	70 95       	com	r23
     de0:	61 95       	neg	r22
     de2:	7f 4f       	sbci	r23, 0xFF	; 255

00000de4 <__divmodhi4_exit>:
     de4:	08 95       	ret

00000de6 <__divmodsi4>:
     de6:	05 2e       	mov	r0, r21
     de8:	97 fb       	bst	r25, 7
     dea:	1e f4       	brtc	.+6      	; 0xdf2 <__divmodsi4+0xc>
     dec:	00 94       	com	r0
     dee:	0e 94 0a 07 	call	0xe14	; 0xe14 <__negsi2>
     df2:	57 fd       	sbrc	r21, 7
     df4:	07 d0       	rcall	.+14     	; 0xe04 <__divmodsi4_neg2>
     df6:	0e 94 26 07 	call	0xe4c	; 0xe4c <__udivmodsi4>
     dfa:	07 fc       	sbrc	r0, 7
     dfc:	03 d0       	rcall	.+6      	; 0xe04 <__divmodsi4_neg2>
     dfe:	4e f4       	brtc	.+18     	; 0xe12 <__divmodsi4_exit>
     e00:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__negsi2>

00000e04 <__divmodsi4_neg2>:
     e04:	50 95       	com	r21
     e06:	40 95       	com	r20
     e08:	30 95       	com	r19
     e0a:	21 95       	neg	r18
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	4f 4f       	sbci	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255

00000e12 <__divmodsi4_exit>:
     e12:	08 95       	ret

00000e14 <__negsi2>:
     e14:	90 95       	com	r25
     e16:	80 95       	com	r24
     e18:	70 95       	com	r23
     e1a:	61 95       	neg	r22
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <__udivmodhi4>:
     e24:	aa 1b       	sub	r26, r26
     e26:	bb 1b       	sub	r27, r27
     e28:	51 e1       	ldi	r21, 0x11	; 17
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <__udivmodhi4_ep>

00000e2c <__udivmodhi4_loop>:
     e2c:	aa 1f       	adc	r26, r26
     e2e:	bb 1f       	adc	r27, r27
     e30:	a6 17       	cp	r26, r22
     e32:	b7 07       	cpc	r27, r23
     e34:	10 f0       	brcs	.+4      	; 0xe3a <__udivmodhi4_ep>
     e36:	a6 1b       	sub	r26, r22
     e38:	b7 0b       	sbc	r27, r23

00000e3a <__udivmodhi4_ep>:
     e3a:	88 1f       	adc	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	5a 95       	dec	r21
     e40:	a9 f7       	brne	.-22     	; 0xe2c <__udivmodhi4_loop>
     e42:	80 95       	com	r24
     e44:	90 95       	com	r25
     e46:	bc 01       	movw	r22, r24
     e48:	cd 01       	movw	r24, r26
     e4a:	08 95       	ret

00000e4c <__udivmodsi4>:
     e4c:	a1 e2       	ldi	r26, 0x21	; 33
     e4e:	1a 2e       	mov	r1, r26
     e50:	aa 1b       	sub	r26, r26
     e52:	bb 1b       	sub	r27, r27
     e54:	fd 01       	movw	r30, r26
     e56:	0d c0       	rjmp	.+26     	; 0xe72 <__udivmodsi4_ep>

00000e58 <__udivmodsi4_loop>:
     e58:	aa 1f       	adc	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	ee 1f       	adc	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	a2 17       	cp	r26, r18
     e62:	b3 07       	cpc	r27, r19
     e64:	e4 07       	cpc	r30, r20
     e66:	f5 07       	cpc	r31, r21
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__udivmodsi4_ep>
     e6a:	a2 1b       	sub	r26, r18
     e6c:	b3 0b       	sbc	r27, r19
     e6e:	e4 0b       	sbc	r30, r20
     e70:	f5 0b       	sbc	r31, r21

00000e72 <__udivmodsi4_ep>:
     e72:	66 1f       	adc	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	1a 94       	dec	r1
     e7c:	69 f7       	brne	.-38     	; 0xe58 <__udivmodsi4_loop>
     e7e:	60 95       	com	r22
     e80:	70 95       	com	r23
     e82:	80 95       	com	r24
     e84:	90 95       	com	r25
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	bd 01       	movw	r22, r26
     e8c:	cf 01       	movw	r24, r30
     e8e:	08 95       	ret

00000e90 <fgetc>:
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
     e96:	2b 81       	ldd	r18, Y+3	; 0x03
     e98:	20 ff       	sbrs	r18, 0
     e9a:	33 c0       	rjmp	.+102    	; 0xf02 <fgetc+0x72>
     e9c:	26 ff       	sbrs	r18, 6
     e9e:	0a c0       	rjmp	.+20     	; 0xeb4 <fgetc+0x24>
     ea0:	2f 7b       	andi	r18, 0xBF	; 191
     ea2:	2b 83       	std	Y+3, r18	; 0x03
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	9f 83       	std	Y+7, r25	; 0x07
     eac:	8e 83       	std	Y+6, r24	; 0x06
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	29 c0       	rjmp	.+82     	; 0xf06 <fgetc+0x76>
     eb4:	22 ff       	sbrs	r18, 2
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <fgetc+0x46>
     eb8:	e8 81       	ld	r30, Y
     eba:	f9 81       	ldd	r31, Y+1	; 0x01
     ebc:	80 81       	ld	r24, Z
     ebe:	08 2e       	mov	r0, r24
     ec0:	00 0c       	add	r0, r0
     ec2:	99 0b       	sbc	r25, r25
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	19 f4       	brne	.+6      	; 0xece <fgetc+0x3e>
     ec8:	20 62       	ori	r18, 0x20	; 32
     eca:	2b 83       	std	Y+3, r18	; 0x03
     ecc:	1a c0       	rjmp	.+52     	; 0xf02 <fgetc+0x72>
     ece:	31 96       	adiw	r30, 0x01	; 1
     ed0:	f9 83       	std	Y+1, r31	; 0x01
     ed2:	e8 83       	st	Y, r30
     ed4:	0e c0       	rjmp	.+28     	; 0xef2 <fgetc+0x62>
     ed6:	ea 85       	ldd	r30, Y+10	; 0x0a
     ed8:	fb 85       	ldd	r31, Y+11	; 0x0b
     eda:	09 95       	icall
     edc:	97 ff       	sbrs	r25, 7
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <fgetc+0x62>
     ee0:	2b 81       	ldd	r18, Y+3	; 0x03
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	11 f0       	breq	.+4      	; 0xeea <fgetc+0x5a>
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <fgetc+0x5c>
     eea:	80 e1       	ldi	r24, 0x10	; 16
     eec:	82 2b       	or	r24, r18
     eee:	8b 83       	std	Y+3, r24	; 0x03
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <fgetc+0x72>
     ef2:	2e 81       	ldd	r18, Y+6	; 0x06
     ef4:	3f 81       	ldd	r19, Y+7	; 0x07
     ef6:	2f 5f       	subi	r18, 0xFF	; 255
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	3f 83       	std	Y+7, r19	; 0x07
     efc:	2e 83       	std	Y+6, r18	; 0x06
     efe:	99 27       	eor	r25, r25
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <fgetc+0x76>
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	9f ef       	ldi	r25, 0xFF	; 255
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <printf_P>:
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ec e8       	ldi	r30, 0x8C	; 140
     f12:	f7 e0       	ldi	r31, 0x07	; 7
     f14:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x1c>
     f18:	ae 01       	movw	r20, r28
     f1a:	49 5f       	subi	r20, 0xF9	; 249
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	da 01       	movw	r26, r20
     f20:	6d 91       	ld	r22, X+
     f22:	7d 91       	ld	r23, X+
     f24:	ad 01       	movw	r20, r26
     f26:	05 e4       	ldi	r16, 0x45	; 69
     f28:	12 e0       	ldi	r17, 0x02	; 2
     f2a:	f8 01       	movw	r30, r16
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	dc 01       	movw	r26, r24
     f32:	13 96       	adiw	r26, 0x03	; 3
     f34:	2c 91       	ld	r18, X
     f36:	13 97       	sbiw	r26, 0x03	; 3
     f38:	28 60       	ori	r18, 0x08	; 8
     f3a:	13 96       	adiw	r26, 0x03	; 3
     f3c:	2c 93       	st	X, r18
     f3e:	0e 94 ac 07 	call	0xf58	; 0xf58 <vfprintf>
     f42:	d8 01       	movw	r26, r16
     f44:	12 96       	adiw	r26, 0x02	; 2
     f46:	ed 91       	ld	r30, X+
     f48:	fc 91       	ld	r31, X
     f4a:	13 97       	sbiw	r26, 0x03	; 3
     f4c:	23 81       	ldd	r18, Z+3	; 0x03
     f4e:	27 7f       	andi	r18, 0xF7	; 247
     f50:	23 83       	std	Z+3, r18	; 0x03
     f52:	e4 e0       	ldi	r30, 0x04	; 4
     f54:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x1c>

00000f58 <vfprintf>:
     f58:	ab e0       	ldi	r26, 0x0B	; 11
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e2 eb       	ldi	r30, 0xB2	; 178
     f5e:	f7 e0       	ldi	r31, 0x07	; 7
     f60:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__prologue_saves__>
     f64:	6c 01       	movw	r12, r24
     f66:	7b 01       	movw	r14, r22
     f68:	8a 01       	movw	r16, r20
     f6a:	fc 01       	movw	r30, r24
     f6c:	17 82       	std	Z+7, r1	; 0x07
     f6e:	16 82       	std	Z+6, r1	; 0x06
     f70:	83 81       	ldd	r24, Z+3	; 0x03
     f72:	81 ff       	sbrs	r24, 1
     f74:	cc c1       	rjmp	.+920    	; 0x130e <vfprintf+0x3b6>
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	3c 01       	movw	r6, r24
     f7c:	f6 01       	movw	r30, r12
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	f7 01       	movw	r30, r14
     f82:	93 fd       	sbrc	r25, 3
     f84:	85 91       	lpm	r24, Z+
     f86:	93 ff       	sbrs	r25, 3
     f88:	81 91       	ld	r24, Z+
     f8a:	7f 01       	movw	r14, r30
     f8c:	88 23       	and	r24, r24
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vfprintf+0x3a>
     f90:	ba c1       	rjmp	.+884    	; 0x1306 <vfprintf+0x3ae>
     f92:	85 32       	cpi	r24, 0x25	; 37
     f94:	39 f4       	brne	.+14     	; 0xfa4 <vfprintf+0x4c>
     f96:	93 fd       	sbrc	r25, 3
     f98:	85 91       	lpm	r24, Z+
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	81 91       	ld	r24, Z+
     f9e:	7f 01       	movw	r14, r30
     fa0:	85 32       	cpi	r24, 0x25	; 37
     fa2:	29 f4       	brne	.+10     	; 0xfae <vfprintf+0x56>
     fa4:	b6 01       	movw	r22, r12
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
     fac:	e7 cf       	rjmp	.-50     	; 0xf7c <vfprintf+0x24>
     fae:	91 2c       	mov	r9, r1
     fb0:	21 2c       	mov	r2, r1
     fb2:	31 2c       	mov	r3, r1
     fb4:	ff e1       	ldi	r31, 0x1F	; 31
     fb6:	f3 15       	cp	r31, r3
     fb8:	d8 f0       	brcs	.+54     	; 0xff0 <vfprintf+0x98>
     fba:	8b 32       	cpi	r24, 0x2B	; 43
     fbc:	79 f0       	breq	.+30     	; 0xfdc <vfprintf+0x84>
     fbe:	38 f4       	brcc	.+14     	; 0xfce <vfprintf+0x76>
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	79 f0       	breq	.+30     	; 0xfe2 <vfprintf+0x8a>
     fc4:	83 32       	cpi	r24, 0x23	; 35
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <vfprintf+0x98>
     fc8:	23 2d       	mov	r18, r3
     fca:	20 61       	ori	r18, 0x10	; 16
     fcc:	1d c0       	rjmp	.+58     	; 0x1008 <vfprintf+0xb0>
     fce:	8d 32       	cpi	r24, 0x2D	; 45
     fd0:	61 f0       	breq	.+24     	; 0xfea <vfprintf+0x92>
     fd2:	80 33       	cpi	r24, 0x30	; 48
     fd4:	69 f4       	brne	.+26     	; 0xff0 <vfprintf+0x98>
     fd6:	23 2d       	mov	r18, r3
     fd8:	21 60       	ori	r18, 0x01	; 1
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <vfprintf+0xb0>
     fdc:	83 2d       	mov	r24, r3
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	38 2e       	mov	r3, r24
     fe2:	e3 2d       	mov	r30, r3
     fe4:	e4 60       	ori	r30, 0x04	; 4
     fe6:	3e 2e       	mov	r3, r30
     fe8:	2a c0       	rjmp	.+84     	; 0x103e <vfprintf+0xe6>
     fea:	f3 2d       	mov	r31, r3
     fec:	f8 60       	ori	r31, 0x08	; 8
     fee:	1d c0       	rjmp	.+58     	; 0x102a <vfprintf+0xd2>
     ff0:	37 fc       	sbrc	r3, 7
     ff2:	2d c0       	rjmp	.+90     	; 0x104e <vfprintf+0xf6>
     ff4:	20 ed       	ldi	r18, 0xD0	; 208
     ff6:	28 0f       	add	r18, r24
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	40 f0       	brcs	.+16     	; 0x100c <vfprintf+0xb4>
     ffc:	8e 32       	cpi	r24, 0x2E	; 46
     ffe:	b9 f4       	brne	.+46     	; 0x102e <vfprintf+0xd6>
    1000:	36 fc       	sbrc	r3, 6
    1002:	81 c1       	rjmp	.+770    	; 0x1306 <vfprintf+0x3ae>
    1004:	23 2d       	mov	r18, r3
    1006:	20 64       	ori	r18, 0x40	; 64
    1008:	32 2e       	mov	r3, r18
    100a:	19 c0       	rjmp	.+50     	; 0x103e <vfprintf+0xe6>
    100c:	36 fe       	sbrs	r3, 6
    100e:	06 c0       	rjmp	.+12     	; 0x101c <vfprintf+0xc4>
    1010:	8a e0       	ldi	r24, 0x0A	; 10
    1012:	98 9e       	mul	r9, r24
    1014:	20 0d       	add	r18, r0
    1016:	11 24       	eor	r1, r1
    1018:	92 2e       	mov	r9, r18
    101a:	11 c0       	rjmp	.+34     	; 0x103e <vfprintf+0xe6>
    101c:	ea e0       	ldi	r30, 0x0A	; 10
    101e:	2e 9e       	mul	r2, r30
    1020:	20 0d       	add	r18, r0
    1022:	11 24       	eor	r1, r1
    1024:	22 2e       	mov	r2, r18
    1026:	f3 2d       	mov	r31, r3
    1028:	f0 62       	ori	r31, 0x20	; 32
    102a:	3f 2e       	mov	r3, r31
    102c:	08 c0       	rjmp	.+16     	; 0x103e <vfprintf+0xe6>
    102e:	8c 36       	cpi	r24, 0x6C	; 108
    1030:	21 f4       	brne	.+8      	; 0x103a <vfprintf+0xe2>
    1032:	83 2d       	mov	r24, r3
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	38 2e       	mov	r3, r24
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0xe6>
    103a:	88 36       	cpi	r24, 0x68	; 104
    103c:	41 f4       	brne	.+16     	; 0x104e <vfprintf+0xf6>
    103e:	f7 01       	movw	r30, r14
    1040:	93 fd       	sbrc	r25, 3
    1042:	85 91       	lpm	r24, Z+
    1044:	93 ff       	sbrs	r25, 3
    1046:	81 91       	ld	r24, Z+
    1048:	7f 01       	movw	r14, r30
    104a:	81 11       	cpse	r24, r1
    104c:	b3 cf       	rjmp	.-154    	; 0xfb4 <vfprintf+0x5c>
    104e:	98 2f       	mov	r25, r24
    1050:	9f 7d       	andi	r25, 0xDF	; 223
    1052:	95 54       	subi	r25, 0x45	; 69
    1054:	93 30       	cpi	r25, 0x03	; 3
    1056:	28 f4       	brcc	.+10     	; 0x1062 <vfprintf+0x10a>
    1058:	0c 5f       	subi	r16, 0xFC	; 252
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	9f e3       	ldi	r25, 0x3F	; 63
    105e:	99 83       	std	Y+1, r25	; 0x01
    1060:	0d c0       	rjmp	.+26     	; 0x107c <vfprintf+0x124>
    1062:	83 36       	cpi	r24, 0x63	; 99
    1064:	31 f0       	breq	.+12     	; 0x1072 <vfprintf+0x11a>
    1066:	83 37       	cpi	r24, 0x73	; 115
    1068:	71 f0       	breq	.+28     	; 0x1086 <vfprintf+0x12e>
    106a:	83 35       	cpi	r24, 0x53	; 83
    106c:	09 f0       	breq	.+2      	; 0x1070 <vfprintf+0x118>
    106e:	59 c0       	rjmp	.+178    	; 0x1122 <vfprintf+0x1ca>
    1070:	21 c0       	rjmp	.+66     	; 0x10b4 <vfprintf+0x15c>
    1072:	f8 01       	movw	r30, r16
    1074:	80 81       	ld	r24, Z
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	0e 5f       	subi	r16, 0xFE	; 254
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	88 24       	eor	r8, r8
    107e:	83 94       	inc	r8
    1080:	91 2c       	mov	r9, r1
    1082:	53 01       	movw	r10, r6
    1084:	13 c0       	rjmp	.+38     	; 0x10ac <vfprintf+0x154>
    1086:	28 01       	movw	r4, r16
    1088:	f2 e0       	ldi	r31, 0x02	; 2
    108a:	4f 0e       	add	r4, r31
    108c:	51 1c       	adc	r5, r1
    108e:	f8 01       	movw	r30, r16
    1090:	a0 80       	ld	r10, Z
    1092:	b1 80       	ldd	r11, Z+1	; 0x01
    1094:	36 fe       	sbrs	r3, 6
    1096:	03 c0       	rjmp	.+6      	; 0x109e <vfprintf+0x146>
    1098:	69 2d       	mov	r22, r9
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <vfprintf+0x14a>
    109e:	6f ef       	ldi	r22, 0xFF	; 255
    10a0:	7f ef       	ldi	r23, 0xFF	; 255
    10a2:	c5 01       	movw	r24, r10
    10a4:	0e 94 98 09 	call	0x1330	; 0x1330 <strnlen>
    10a8:	4c 01       	movw	r8, r24
    10aa:	82 01       	movw	r16, r4
    10ac:	f3 2d       	mov	r31, r3
    10ae:	ff 77       	andi	r31, 0x7F	; 127
    10b0:	3f 2e       	mov	r3, r31
    10b2:	16 c0       	rjmp	.+44     	; 0x10e0 <vfprintf+0x188>
    10b4:	28 01       	movw	r4, r16
    10b6:	22 e0       	ldi	r18, 0x02	; 2
    10b8:	42 0e       	add	r4, r18
    10ba:	51 1c       	adc	r5, r1
    10bc:	f8 01       	movw	r30, r16
    10be:	a0 80       	ld	r10, Z
    10c0:	b1 80       	ldd	r11, Z+1	; 0x01
    10c2:	36 fe       	sbrs	r3, 6
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <vfprintf+0x174>
    10c6:	69 2d       	mov	r22, r9
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x178>
    10cc:	6f ef       	ldi	r22, 0xFF	; 255
    10ce:	7f ef       	ldi	r23, 0xFF	; 255
    10d0:	c5 01       	movw	r24, r10
    10d2:	0e 94 8d 09 	call	0x131a	; 0x131a <strnlen_P>
    10d6:	4c 01       	movw	r8, r24
    10d8:	f3 2d       	mov	r31, r3
    10da:	f0 68       	ori	r31, 0x80	; 128
    10dc:	3f 2e       	mov	r3, r31
    10de:	82 01       	movw	r16, r4
    10e0:	33 fc       	sbrc	r3, 3
    10e2:	1b c0       	rjmp	.+54     	; 0x111a <vfprintf+0x1c2>
    10e4:	82 2d       	mov	r24, r2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 16       	cp	r8, r24
    10ea:	99 06       	cpc	r9, r25
    10ec:	b0 f4       	brcc	.+44     	; 0x111a <vfprintf+0x1c2>
    10ee:	b6 01       	movw	r22, r12
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    10f8:	2a 94       	dec	r2
    10fa:	f4 cf       	rjmp	.-24     	; 0x10e4 <vfprintf+0x18c>
    10fc:	f5 01       	movw	r30, r10
    10fe:	37 fc       	sbrc	r3, 7
    1100:	85 91       	lpm	r24, Z+
    1102:	37 fe       	sbrs	r3, 7
    1104:	81 91       	ld	r24, Z+
    1106:	5f 01       	movw	r10, r30
    1108:	b6 01       	movw	r22, r12
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1110:	21 10       	cpse	r2, r1
    1112:	2a 94       	dec	r2
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	82 1a       	sub	r8, r18
    1118:	91 08       	sbc	r9, r1
    111a:	81 14       	cp	r8, r1
    111c:	91 04       	cpc	r9, r1
    111e:	71 f7       	brne	.-36     	; 0x10fc <vfprintf+0x1a4>
    1120:	e8 c0       	rjmp	.+464    	; 0x12f2 <vfprintf+0x39a>
    1122:	84 36       	cpi	r24, 0x64	; 100
    1124:	11 f0       	breq	.+4      	; 0x112a <vfprintf+0x1d2>
    1126:	89 36       	cpi	r24, 0x69	; 105
    1128:	41 f5       	brne	.+80     	; 0x117a <vfprintf+0x222>
    112a:	f8 01       	movw	r30, r16
    112c:	37 fe       	sbrs	r3, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x1e6>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0c 5f       	subi	r16, 0xFC	; 252
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	08 c0       	rjmp	.+16     	; 0x114e <vfprintf+0x1f6>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	07 2e       	mov	r0, r23
    1144:	00 0c       	add	r0, r0
    1146:	88 0b       	sbc	r24, r24
    1148:	99 0b       	sbc	r25, r25
    114a:	0e 5f       	subi	r16, 0xFE	; 254
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	f3 2d       	mov	r31, r3
    1150:	ff 76       	andi	r31, 0x6F	; 111
    1152:	3f 2e       	mov	r3, r31
    1154:	97 ff       	sbrs	r25, 7
    1156:	09 c0       	rjmp	.+18     	; 0x116a <vfprintf+0x212>
    1158:	90 95       	com	r25
    115a:	80 95       	com	r24
    115c:	70 95       	com	r23
    115e:	61 95       	neg	r22
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	f0 68       	ori	r31, 0x80	; 128
    1168:	3f 2e       	mov	r3, r31
    116a:	2a e0       	ldi	r18, 0x0A	; 10
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	a3 01       	movw	r20, r6
    1170:	0e 94 df 09 	call	0x13be	; 0x13be <__ultoa_invert>
    1174:	88 2e       	mov	r8, r24
    1176:	86 18       	sub	r8, r6
    1178:	45 c0       	rjmp	.+138    	; 0x1204 <vfprintf+0x2ac>
    117a:	85 37       	cpi	r24, 0x75	; 117
    117c:	31 f4       	brne	.+12     	; 0x118a <vfprintf+0x232>
    117e:	23 2d       	mov	r18, r3
    1180:	2f 7e       	andi	r18, 0xEF	; 239
    1182:	b2 2e       	mov	r11, r18
    1184:	2a e0       	ldi	r18, 0x0A	; 10
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	25 c0       	rjmp	.+74     	; 0x11d4 <vfprintf+0x27c>
    118a:	93 2d       	mov	r25, r3
    118c:	99 7f       	andi	r25, 0xF9	; 249
    118e:	b9 2e       	mov	r11, r25
    1190:	8f 36       	cpi	r24, 0x6F	; 111
    1192:	c1 f0       	breq	.+48     	; 0x11c4 <vfprintf+0x26c>
    1194:	18 f4       	brcc	.+6      	; 0x119c <vfprintf+0x244>
    1196:	88 35       	cpi	r24, 0x58	; 88
    1198:	79 f0       	breq	.+30     	; 0x11b8 <vfprintf+0x260>
    119a:	b5 c0       	rjmp	.+362    	; 0x1306 <vfprintf+0x3ae>
    119c:	80 37       	cpi	r24, 0x70	; 112
    119e:	19 f0       	breq	.+6      	; 0x11a6 <vfprintf+0x24e>
    11a0:	88 37       	cpi	r24, 0x78	; 120
    11a2:	21 f0       	breq	.+8      	; 0x11ac <vfprintf+0x254>
    11a4:	b0 c0       	rjmp	.+352    	; 0x1306 <vfprintf+0x3ae>
    11a6:	e9 2f       	mov	r30, r25
    11a8:	e0 61       	ori	r30, 0x10	; 16
    11aa:	be 2e       	mov	r11, r30
    11ac:	b4 fe       	sbrs	r11, 4
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <vfprintf+0x272>
    11b0:	fb 2d       	mov	r31, r11
    11b2:	f4 60       	ori	r31, 0x04	; 4
    11b4:	bf 2e       	mov	r11, r31
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <vfprintf+0x272>
    11b8:	34 fe       	sbrs	r3, 4
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <vfprintf+0x278>
    11bc:	29 2f       	mov	r18, r25
    11be:	26 60       	ori	r18, 0x06	; 6
    11c0:	b2 2e       	mov	r11, r18
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0x278>
    11c4:	28 e0       	ldi	r18, 0x08	; 8
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <vfprintf+0x27c>
    11ca:	20 e1       	ldi	r18, 0x10	; 16
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0x27c>
    11d0:	20 e1       	ldi	r18, 0x10	; 16
    11d2:	32 e0       	ldi	r19, 0x02	; 2
    11d4:	f8 01       	movw	r30, r16
    11d6:	b7 fe       	sbrs	r11, 7
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <vfprintf+0x290>
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	0c 5f       	subi	r16, 0xFC	; 252
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <vfprintf+0x29c>
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 5f       	subi	r16, 0xFE	; 254
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	a3 01       	movw	r20, r6
    11f6:	0e 94 df 09 	call	0x13be	; 0x13be <__ultoa_invert>
    11fa:	88 2e       	mov	r8, r24
    11fc:	86 18       	sub	r8, r6
    11fe:	fb 2d       	mov	r31, r11
    1200:	ff 77       	andi	r31, 0x7F	; 127
    1202:	3f 2e       	mov	r3, r31
    1204:	36 fe       	sbrs	r3, 6
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <vfprintf+0x2ca>
    1208:	23 2d       	mov	r18, r3
    120a:	2e 7f       	andi	r18, 0xFE	; 254
    120c:	a2 2e       	mov	r10, r18
    120e:	89 14       	cp	r8, r9
    1210:	58 f4       	brcc	.+22     	; 0x1228 <vfprintf+0x2d0>
    1212:	34 fe       	sbrs	r3, 4
    1214:	0b c0       	rjmp	.+22     	; 0x122c <vfprintf+0x2d4>
    1216:	32 fc       	sbrc	r3, 2
    1218:	09 c0       	rjmp	.+18     	; 0x122c <vfprintf+0x2d4>
    121a:	83 2d       	mov	r24, r3
    121c:	8e 7e       	andi	r24, 0xEE	; 238
    121e:	a8 2e       	mov	r10, r24
    1220:	05 c0       	rjmp	.+10     	; 0x122c <vfprintf+0x2d4>
    1222:	b8 2c       	mov	r11, r8
    1224:	a3 2c       	mov	r10, r3
    1226:	03 c0       	rjmp	.+6      	; 0x122e <vfprintf+0x2d6>
    1228:	b8 2c       	mov	r11, r8
    122a:	01 c0       	rjmp	.+2      	; 0x122e <vfprintf+0x2d6>
    122c:	b9 2c       	mov	r11, r9
    122e:	a4 fe       	sbrs	r10, 4
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <vfprintf+0x2f8>
    1232:	fe 01       	movw	r30, r28
    1234:	e8 0d       	add	r30, r8
    1236:	f1 1d       	adc	r31, r1
    1238:	80 81       	ld	r24, Z
    123a:	80 33       	cpi	r24, 0x30	; 48
    123c:	21 f4       	brne	.+8      	; 0x1246 <vfprintf+0x2ee>
    123e:	9a 2d       	mov	r25, r10
    1240:	99 7e       	andi	r25, 0xE9	; 233
    1242:	a9 2e       	mov	r10, r25
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <vfprintf+0x300>
    1246:	a2 fe       	sbrs	r10, 2
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <vfprintf+0x2fe>
    124a:	b3 94       	inc	r11
    124c:	b3 94       	inc	r11
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <vfprintf+0x300>
    1250:	8a 2d       	mov	r24, r10
    1252:	86 78       	andi	r24, 0x86	; 134
    1254:	09 f0       	breq	.+2      	; 0x1258 <vfprintf+0x300>
    1256:	b3 94       	inc	r11
    1258:	a3 fc       	sbrc	r10, 3
    125a:	11 c0       	rjmp	.+34     	; 0x127e <vfprintf+0x326>
    125c:	a0 fe       	sbrs	r10, 0
    125e:	06 c0       	rjmp	.+12     	; 0x126c <vfprintf+0x314>
    1260:	b2 14       	cp	r11, r2
    1262:	88 f4       	brcc	.+34     	; 0x1286 <vfprintf+0x32e>
    1264:	28 0c       	add	r2, r8
    1266:	92 2c       	mov	r9, r2
    1268:	9b 18       	sub	r9, r11
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <vfprintf+0x330>
    126c:	b2 14       	cp	r11, r2
    126e:	60 f4       	brcc	.+24     	; 0x1288 <vfprintf+0x330>
    1270:	b6 01       	movw	r22, r12
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    127a:	b3 94       	inc	r11
    127c:	f7 cf       	rjmp	.-18     	; 0x126c <vfprintf+0x314>
    127e:	b2 14       	cp	r11, r2
    1280:	18 f4       	brcc	.+6      	; 0x1288 <vfprintf+0x330>
    1282:	2b 18       	sub	r2, r11
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x332>
    1286:	98 2c       	mov	r9, r8
    1288:	21 2c       	mov	r2, r1
    128a:	a4 fe       	sbrs	r10, 4
    128c:	10 c0       	rjmp	.+32     	; 0x12ae <vfprintf+0x356>
    128e:	b6 01       	movw	r22, r12
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1298:	a2 fe       	sbrs	r10, 2
    129a:	17 c0       	rjmp	.+46     	; 0x12ca <vfprintf+0x372>
    129c:	a1 fc       	sbrc	r10, 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <vfprintf+0x34e>
    12a0:	88 e7       	ldi	r24, 0x78	; 120
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <vfprintf+0x352>
    12a6:	88 e5       	ldi	r24, 0x58	; 88
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	b6 01       	movw	r22, r12
    12ac:	0c c0       	rjmp	.+24     	; 0x12c6 <vfprintf+0x36e>
    12ae:	8a 2d       	mov	r24, r10
    12b0:	86 78       	andi	r24, 0x86	; 134
    12b2:	59 f0       	breq	.+22     	; 0x12ca <vfprintf+0x372>
    12b4:	a1 fe       	sbrs	r10, 1
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x364>
    12b8:	8b e2       	ldi	r24, 0x2B	; 43
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <vfprintf+0x366>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	a7 fc       	sbrc	r10, 7
    12c0:	8d e2       	ldi	r24, 0x2D	; 45
    12c2:	b6 01       	movw	r22, r12
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12ca:	89 14       	cp	r8, r9
    12cc:	38 f4       	brcc	.+14     	; 0x12dc <vfprintf+0x384>
    12ce:	b6 01       	movw	r22, r12
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12d8:	9a 94       	dec	r9
    12da:	f7 cf       	rjmp	.-18     	; 0x12ca <vfprintf+0x372>
    12dc:	8a 94       	dec	r8
    12de:	f3 01       	movw	r30, r6
    12e0:	e8 0d       	add	r30, r8
    12e2:	f1 1d       	adc	r31, r1
    12e4:	80 81       	ld	r24, Z
    12e6:	b6 01       	movw	r22, r12
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12ee:	81 10       	cpse	r8, r1
    12f0:	f5 cf       	rjmp	.-22     	; 0x12dc <vfprintf+0x384>
    12f2:	22 20       	and	r2, r2
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <vfprintf+0x3a0>
    12f6:	42 ce       	rjmp	.-892    	; 0xf7c <vfprintf+0x24>
    12f8:	b6 01       	movw	r22, r12
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1302:	2a 94       	dec	r2
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <vfprintf+0x39a>
    1306:	f6 01       	movw	r30, r12
    1308:	86 81       	ldd	r24, Z+6	; 0x06
    130a:	97 81       	ldd	r25, Z+7	; 0x07
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <vfprintf+0x3ba>
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	2b 96       	adiw	r28, 0x0b	; 11
    1314:	e2 e1       	ldi	r30, 0x12	; 18
    1316:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__epilogue_restores__>

0000131a <strnlen_P>:
    131a:	fc 01       	movw	r30, r24
    131c:	05 90       	lpm	r0, Z+
    131e:	61 50       	subi	r22, 0x01	; 1
    1320:	70 40       	sbci	r23, 0x00	; 0
    1322:	01 10       	cpse	r0, r1
    1324:	d8 f7       	brcc	.-10     	; 0x131c <strnlen_P+0x2>
    1326:	80 95       	com	r24
    1328:	90 95       	com	r25
    132a:	8e 0f       	add	r24, r30
    132c:	9f 1f       	adc	r25, r31
    132e:	08 95       	ret

00001330 <strnlen>:
    1330:	fc 01       	movw	r30, r24
    1332:	61 50       	subi	r22, 0x01	; 1
    1334:	70 40       	sbci	r23, 0x00	; 0
    1336:	01 90       	ld	r0, Z+
    1338:	01 10       	cpse	r0, r1
    133a:	d8 f7       	brcc	.-10     	; 0x1332 <strnlen+0x2>
    133c:	80 95       	com	r24
    133e:	90 95       	com	r25
    1340:	8e 0f       	add	r24, r30
    1342:	9f 1f       	adc	r25, r31
    1344:	08 95       	ret

00001346 <fputc>:
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	fb 01       	movw	r30, r22
    1350:	23 81       	ldd	r18, Z+3	; 0x03
    1352:	21 fd       	sbrc	r18, 1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <fputc+0x16>
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	2c c0       	rjmp	.+88     	; 0x13b4 <fputc+0x6e>
    135c:	22 ff       	sbrs	r18, 2
    135e:	16 c0       	rjmp	.+44     	; 0x138c <fputc+0x46>
    1360:	46 81       	ldd	r20, Z+6	; 0x06
    1362:	57 81       	ldd	r21, Z+7	; 0x07
    1364:	24 81       	ldd	r18, Z+4	; 0x04
    1366:	35 81       	ldd	r19, Z+5	; 0x05
    1368:	42 17       	cp	r20, r18
    136a:	53 07       	cpc	r21, r19
    136c:	44 f4       	brge	.+16     	; 0x137e <fputc+0x38>
    136e:	a0 81       	ld	r26, Z
    1370:	b1 81       	ldd	r27, Z+1	; 0x01
    1372:	9d 01       	movw	r18, r26
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	31 83       	std	Z+1, r19	; 0x01
    137a:	20 83       	st	Z, r18
    137c:	8c 93       	st	X, r24
    137e:	26 81       	ldd	r18, Z+6	; 0x06
    1380:	37 81       	ldd	r19, Z+7	; 0x07
    1382:	2f 5f       	subi	r18, 0xFF	; 255
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	37 83       	std	Z+7, r19	; 0x07
    1388:	26 83       	std	Z+6, r18	; 0x06
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <fputc+0x6e>
    138c:	8b 01       	movw	r16, r22
    138e:	ec 01       	movw	r28, r24
    1390:	fb 01       	movw	r30, r22
    1392:	00 84       	ldd	r0, Z+8	; 0x08
    1394:	f1 85       	ldd	r31, Z+9	; 0x09
    1396:	e0 2d       	mov	r30, r0
    1398:	09 95       	icall
    139a:	89 2b       	or	r24, r25
    139c:	e1 f6       	brne	.-72     	; 0x1356 <fputc+0x10>
    139e:	d8 01       	movw	r26, r16
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	8d 91       	ld	r24, X+
    13a4:	9c 91       	ld	r25, X
    13a6:	17 97       	sbiw	r26, 0x07	; 7
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	17 96       	adiw	r26, 0x07	; 7
    13ac:	9c 93       	st	X, r25
    13ae:	8e 93       	st	-X, r24
    13b0:	16 97       	sbiw	r26, 0x06	; 6
    13b2:	ce 01       	movw	r24, r28
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <__ultoa_invert>:
    13be:	fa 01       	movw	r30, r20
    13c0:	aa 27       	eor	r26, r26
    13c2:	28 30       	cpi	r18, 0x08	; 8
    13c4:	51 f1       	breq	.+84     	; 0x141a <__ultoa_invert+0x5c>
    13c6:	20 31       	cpi	r18, 0x10	; 16
    13c8:	81 f1       	breq	.+96     	; 0x142a <__ultoa_invert+0x6c>
    13ca:	e8 94       	clt
    13cc:	6f 93       	push	r22
    13ce:	6e 7f       	andi	r22, 0xFE	; 254
    13d0:	6e 5f       	subi	r22, 0xFE	; 254
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	af 4f       	sbci	r26, 0xFF	; 255
    13da:	b1 e0       	ldi	r27, 0x01	; 1
    13dc:	3e d0       	rcall	.+124    	; 0x145a <__ultoa_invert+0x9c>
    13de:	b4 e0       	ldi	r27, 0x04	; 4
    13e0:	3c d0       	rcall	.+120    	; 0x145a <__ultoa_invert+0x9c>
    13e2:	67 0f       	add	r22, r23
    13e4:	78 1f       	adc	r23, r24
    13e6:	89 1f       	adc	r24, r25
    13e8:	9a 1f       	adc	r25, r26
    13ea:	a1 1d       	adc	r26, r1
    13ec:	68 0f       	add	r22, r24
    13ee:	79 1f       	adc	r23, r25
    13f0:	8a 1f       	adc	r24, r26
    13f2:	91 1d       	adc	r25, r1
    13f4:	a1 1d       	adc	r26, r1
    13f6:	6a 0f       	add	r22, r26
    13f8:	71 1d       	adc	r23, r1
    13fa:	81 1d       	adc	r24, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	a1 1d       	adc	r26, r1
    1400:	20 d0       	rcall	.+64     	; 0x1442 <__ultoa_invert+0x84>
    1402:	09 f4       	brne	.+2      	; 0x1406 <__ultoa_invert+0x48>
    1404:	68 94       	set
    1406:	3f 91       	pop	r19
    1408:	2a e0       	ldi	r18, 0x0A	; 10
    140a:	26 9f       	mul	r18, r22
    140c:	11 24       	eor	r1, r1
    140e:	30 19       	sub	r19, r0
    1410:	30 5d       	subi	r19, 0xD0	; 208
    1412:	31 93       	st	Z+, r19
    1414:	de f6       	brtc	.-74     	; 0x13cc <__ultoa_invert+0xe>
    1416:	cf 01       	movw	r24, r30
    1418:	08 95       	ret
    141a:	46 2f       	mov	r20, r22
    141c:	47 70       	andi	r20, 0x07	; 7
    141e:	40 5d       	subi	r20, 0xD0	; 208
    1420:	41 93       	st	Z+, r20
    1422:	b3 e0       	ldi	r27, 0x03	; 3
    1424:	0f d0       	rcall	.+30     	; 0x1444 <__ultoa_invert+0x86>
    1426:	c9 f7       	brne	.-14     	; 0x141a <__ultoa_invert+0x5c>
    1428:	f6 cf       	rjmp	.-20     	; 0x1416 <__ultoa_invert+0x58>
    142a:	46 2f       	mov	r20, r22
    142c:	4f 70       	andi	r20, 0x0F	; 15
    142e:	40 5d       	subi	r20, 0xD0	; 208
    1430:	4a 33       	cpi	r20, 0x3A	; 58
    1432:	18 f0       	brcs	.+6      	; 0x143a <__ultoa_invert+0x7c>
    1434:	49 5d       	subi	r20, 0xD9	; 217
    1436:	31 fd       	sbrc	r19, 1
    1438:	40 52       	subi	r20, 0x20	; 32
    143a:	41 93       	st	Z+, r20
    143c:	02 d0       	rcall	.+4      	; 0x1442 <__ultoa_invert+0x84>
    143e:	a9 f7       	brne	.-22     	; 0x142a <__ultoa_invert+0x6c>
    1440:	ea cf       	rjmp	.-44     	; 0x1416 <__ultoa_invert+0x58>
    1442:	b4 e0       	ldi	r27, 0x04	; 4
    1444:	a6 95       	lsr	r26
    1446:	97 95       	ror	r25
    1448:	87 95       	ror	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__ultoa_invert+0x86>
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 05       	cpc	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	08 95       	ret
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	0a 2e       	mov	r0, r26
    1460:	06 94       	lsr	r0
    1462:	57 95       	ror	r21
    1464:	47 95       	ror	r20
    1466:	37 95       	ror	r19
    1468:	27 95       	ror	r18
    146a:	ba 95       	dec	r27
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__ultoa_invert+0xa2>
    146e:	62 0f       	add	r22, r18
    1470:	73 1f       	adc	r23, r19
    1472:	84 1f       	adc	r24, r20
    1474:	95 1f       	adc	r25, r21
    1476:	a0 1d       	adc	r26, r0
    1478:	08 95       	ret

0000147a <__prologue_saves__>:
    147a:	2f 92       	push	r2
    147c:	3f 92       	push	r3
    147e:	4f 92       	push	r4
    1480:	5f 92       	push	r5
    1482:	6f 92       	push	r6
    1484:	7f 92       	push	r7
    1486:	8f 92       	push	r8
    1488:	9f 92       	push	r9
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	ca 1b       	sub	r28, r26
    14a4:	db 0b       	sbc	r29, r27
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	09 94       	ijmp

000014b2 <__epilogue_restores__>:
    14b2:	2a 88       	ldd	r2, Y+18	; 0x12
    14b4:	39 88       	ldd	r3, Y+17	; 0x11
    14b6:	48 88       	ldd	r4, Y+16	; 0x10
    14b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    14bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    14be:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c4:	b9 84       	ldd	r11, Y+9	; 0x09
    14c6:	c8 84       	ldd	r12, Y+8	; 0x08
    14c8:	df 80       	ldd	r13, Y+7	; 0x07
    14ca:	ee 80       	ldd	r14, Y+6	; 0x06
    14cc:	fd 80       	ldd	r15, Y+5	; 0x05
    14ce:	0c 81       	ldd	r16, Y+4	; 0x04
    14d0:	1b 81       	ldd	r17, Y+3	; 0x03
    14d2:	aa 81       	ldd	r26, Y+2	; 0x02
    14d4:	b9 81       	ldd	r27, Y+1	; 0x01
    14d6:	ce 0f       	add	r28, r30
    14d8:	d1 1d       	adc	r29, r1
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	ed 01       	movw	r28, r26
    14e6:	08 95       	ret

000014e8 <_exit>:
    14e8:	f8 94       	cli

000014ea <__stop_program>:
    14ea:	ff cf       	rjmp	.-2      	; 0x14ea <__stop_program>
